/* Generated by Cython 0.22.1 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/mounts/anaconda/lib/python2.7/site-packages/pysam-0.8.3-py2.7-linux-x86_64.egg/pysam/htslib_util.h", 
            "/mounts/anaconda/lib/python2.7/site-packages/pysam-0.8.3-py2.7-linux-x86_64.egg/pysam/samfile_util.h", 
            "/mounts/anaconda/lib/python2.7/site-packages/pysam-0.8.3-py2.7-linux-x86_64.egg/pysam/pysam_stream.h"
        ], 
        "sources": [
            "include/MPA.c"
        ]
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_22_1"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#define __Pyx_void_to_None(void_result) (void_result, Py_INCREF(Py_None), Py_None)
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(T& ref) : ptr(&ref) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__utilBMF__MergePairedAlignments
#define __PYX_HAVE_API__utilBMF__MergePairedAlignments
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "stdint.h"
#include "pythread.h"
#include "sys/types.h"
#include "zlib.h"
#include "htslib/kstring.h"
#include "htslib_util.h"
#include "htslib/hfile.h"
#include "htslib/bgzf.h"
#include "htslib/hts.h"
#include "htslib/sam.h"
#include "pysam_stream.h"
#include "htslib/faidx.h"
#include "htslib/tbx.h"
#include "htslib/vcf.h"
#include "samfile_util.h"
#include "math.h"
#include "MPA.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 1
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING "ascii"
#define __Pyx_PyObject_FromString __Pyx_PyStr_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyStr_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "utilBMF/MergePairedAlignments.pyx",
  "utilBMF/MergePairedAlignments.pxd",
  "array.pxd",
  "__init__.pxd",
  "utilBMF/Inliners.pxd",
  "stringsource",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
  "cfaidx.pxd",
  "calignmentfile.pxd",
  "TabProxies.pxd",
  "utilBMF/HTSUtils.pxd",
  "utilBMF/PysamUtils.pxd",
};
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":727
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":728
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":729
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":734
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":735
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":736
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":740
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":741
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":750
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":752
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":756
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":759
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":761
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":763
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

/* "utilBMF/Inliners.pxd":11
 * ctypedef cython.str cystr
 * cimport numpy as np
 * ctypedef np.int32_t np_int32_t             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef __pyx_t_5numpy_int32_t __pyx_t_7utilBMF_8Inliners_np_int32_t;

/* "utilBMF/HTSUtils.pxd":12
 * ctypedef cython.str cystr
 * ctypedef PileupReadPair PileupReadPair_t
 * ctypedef np.longdouble_t dtype128_t             # <<<<<<<<<<<<<<
 * ctypedef pPileupRead pPileupRead_t
 * ctypedef ReadPair ReadPair_t
 */
typedef __pyx_t_5numpy_longdouble_t __pyx_t_7utilBMF_8HTSUtils_dtype128_t;

/* "utilBMF/HTSUtils.pxd":25
 * ctypedef IndelQuiver IndelQuiver_t
 * ctypedef IDVCFLine IDVCFLine_t
 * ctypedef np.int32_t np_int32_t             # <<<<<<<<<<<<<<
 * 
 * cdef class pPileupRead:
 */
typedef __pyx_t_5numpy_int32_t __pyx_t_7utilBMF_8HTSUtils_np_int32_t;

/* "MawCluster/Probability.pxd":6
 * from cpython cimport array as c_array
 * ctypedef c_array.array py_array
 * ctypedef long double npy_float128             # <<<<<<<<<<<<<<
 * ctypedef npy_float128   float128_t
 * ctypedef double npy_float64
 */
typedef long double __pyx_t_10MawCluster_11Probability_npy_float128;

/* "MawCluster/Probability.pxd":7
 * ctypedef c_array.array py_array
 * ctypedef long double npy_float128
 * ctypedef npy_float128   float128_t             # <<<<<<<<<<<<<<
 * ctypedef double npy_float64
 * ctypedef npy_float64   float64_t
 */
typedef __pyx_t_10MawCluster_11Probability_npy_float128 __pyx_t_10MawCluster_11Probability_float128_t;

/* "MawCluster/Probability.pxd":8
 * ctypedef long double npy_float128
 * ctypedef npy_float128   float128_t
 * ctypedef double npy_float64             # <<<<<<<<<<<<<<
 * ctypedef npy_float64   float64_t
 * ctypedef cython.str cystr
 */
typedef double __pyx_t_10MawCluster_11Probability_npy_float64;

/* "MawCluster/Probability.pxd":9
 * ctypedef npy_float128   float128_t
 * ctypedef double npy_float64
 * ctypedef npy_float64   float64_t             # <<<<<<<<<<<<<<
 * ctypedef cython.str cystr
 * 
 */
typedef __pyx_t_10MawCluster_11Probability_npy_float64 __pyx_t_10MawCluster_11Probability_float64_t;

/* "utilBMF/MergePairedAlignments.pxd":18
 * from MawCluster.Probability cimport c_abs
 * ctypedef pysam.calignmentfile.AlignedSegment AlignedSegment_t
 * ctypedef unsigned char uchar             # <<<<<<<<<<<<<<
 * ctypedef BamTag BamTag_t
 * ctypedef Layout Layout_t
 */
typedef unsigned char __pyx_t_7utilBMF_21MergePairedAlignments_uchar;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
#ifndef _ARRAYARRAY_H
struct arrayobject;
typedef struct arrayobject arrayobject;
#endif
struct __pyx_obj_5pysam_6cfaidx_FastaFile;
struct __pyx_obj_5pysam_6cfaidx_FastqProxy;
struct __pyx_obj_5pysam_6cfaidx_FastxFile;
struct __pyx_obj_5pysam_6cfaidx_FastqFile;
struct __pyx_obj_5pysam_6cfaidx_Fastafile;
struct __pyx_obj_5pysam_6cfaidx_Fastqfile;
struct __pyx_obj_5pysam_6cfaidx_pFastqFile;
struct __pyx_obj_5pysam_6cfaidx_pFastqProxy;
struct __pyx_obj_5pysam_14calignmentfile_AlignedSegment;
struct __pyx_obj_5pysam_14calignmentfile_AlignmentFile;
struct __pyx_obj_5pysam_14calignmentfile_PileupColumn;
struct __pyx_obj_5pysam_14calignmentfile_PileupRead;
struct __pyx_obj_5pysam_14calignmentfile_IteratorRow;
struct __pyx_obj_5pysam_14calignmentfile_IteratorRowRegion;
struct __pyx_obj_5pysam_14calignmentfile_IteratorRowHead;
struct __pyx_obj_5pysam_14calignmentfile_IteratorRowAll;
struct __pyx_obj_5pysam_14calignmentfile_IteratorRowAllRefs;
struct __pyx_obj_5pysam_14calignmentfile_IteratorRowSelection;
struct __pyx_obj_5pysam_14calignmentfile_IteratorColumn;
struct __pyx_obj_5pysam_14calignmentfile_IteratorColumnRegion;
struct __pyx_obj_5pysam_14calignmentfile_IteratorColumnAllRefs;
struct __pyx_obj_5pysam_14calignmentfile_IndexedReads;
struct __pyx_obj_5pysam_10TabProxies_TupleProxy;
struct __pyx_obj_5pysam_10TabProxies_GTFProxy;
struct __pyx_obj_5pysam_10TabProxies_NamedTupleProxy;
struct __pyx_obj_5pysam_10TabProxies_BedProxy;
struct __pyx_obj_5pysam_10TabProxies_VCFProxy;
struct __pyx_obj_7utilBMF_8HTSUtils_pPileupRead;
struct __pyx_obj_7utilBMF_8HTSUtils_PileupReadPair;
struct __pyx_obj_7utilBMF_8HTSUtils_ReadPair;
struct __pyx_obj_7utilBMF_8HTSUtils_AbstractIndelContainer;
struct __pyx_obj_7utilBMF_8HTSUtils_Deletion;
struct __pyx_obj_7utilBMF_8HTSUtils_Insertion;
struct __pyx_obj_7utilBMF_8HTSUtils_IndelQuiver;
struct __pyx_obj_7utilBMF_8HTSUtils_IDVCFLine;
struct __pyx_obj_7utilBMF_8HTSUtils_pFastqProxy;
struct __pyx_obj_7utilBMF_8HTSUtils_pFastqFile;
struct __pyx_obj_7utilBMF_8HTSUtils_BamTag;
struct __pyx_obj_7utilBMF_10PysamUtils_PairwiseAlignmentFile;
struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout;
struct __pyx_obj_7utilBMF_21MergePairedAlignments_ListBool;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":765
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":767
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":769
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "cfaidx.pxd":11
 * from chtslib cimport faidx_t, kseq_t, gzFile
 * 
 * ctypedef pFastqProxy pFastqProxy_t             # <<<<<<<<<<<<<<
 * ctypedef pFastqFile pFastqFile_t
 * 
 */
typedef struct __pyx_obj_5pysam_6cfaidx_pFastqProxy *__pyx_t_5pysam_6cfaidx_pFastqProxy_t;

/* "cfaidx.pxd":12
 * 
 * ctypedef pFastqProxy pFastqProxy_t
 * ctypedef pFastqFile pFastqFile_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "htslib/kstring.h" nogil:
 */
typedef struct __pyx_obj_5pysam_6cfaidx_pFastqFile *__pyx_t_5pysam_6cfaidx_pFastqFile_t;
struct __pyx_t_5pysam_14calignmentfile___iterdata;
typedef struct __pyx_t_5pysam_14calignmentfile___iterdata __pyx_t_5pysam_14calignmentfile___iterdata;
struct __pyx_opt_args_5pysam_14calignmentfile_14AlignedSegment_set_tag;
struct __pyx_opt_args_5pysam_14calignmentfile_14IteratorColumn_setupIteratorData;

/* "pysam/calignmentfile.pxd":56
 * # Utility types
 * 
 * ctypedef struct __iterdata:             # <<<<<<<<<<<<<<
 *     htsFile * htsfile
 *     bam_hdr_t * header
 */
struct __pyx_t_5pysam_14calignmentfile___iterdata {
  htsFile *htsfile;
  bam_hdr_t *header;
  hts_itr_t *iter;
  faidx_t *fastafile;
  int tid;
  char *seq;
  int seq_len;
};

/* "pysam/calignmentfile.pxd":75
 *     # add an alignment tag with value to the AlignedSegment
 *     # an existing tag of the same name will be replaced.
 *     cpdef set_tag(self, tag, value, value_type=?, replace=?)             # <<<<<<<<<<<<<<
 * 
 *     # add an alignment tag with value to the AlignedSegment
 */
struct __pyx_opt_args_5pysam_14calignmentfile_14AlignedSegment_set_tag {
  int __pyx_n;
  PyObject *value_type;
  PyObject *replace;
};

/* "pysam/calignmentfile.pxd":188
 *     cdef char * getSequence( self )
 *     cdef setMask(self, mask)
 *     cdef setupIteratorData(self,             # <<<<<<<<<<<<<<
 *                            int tid,
 *                            int start,
 */
struct __pyx_opt_args_5pysam_14calignmentfile_14IteratorColumn_setupIteratorData {
  int __pyx_n;
  int multiple_iterators;
};

/* "utilBMF/Inliners.pxd":9
 * """
 * cimport cython
 * ctypedef cython.str cystr             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * ctypedef np.int32_t np_int32_t
 */
typedef PyObject *__pyx_t_7utilBMF_8Inliners_cystr;
typedef arrayobject *__pyx_t_7utilBMF_7cstring_py_array;

/* "utilBMF/cstring.pxd":10
 * from utilBMF.Inliners cimport RevCmpChar, RevCmpInt, RevCmpToChar
 * ctypedef c_array.array py_array
 * ctypedef cython.str cystr             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * 
 */
typedef PyObject *__pyx_t_7utilBMF_7cstring_cystr;
struct __pyx_opt_args_7utilBMF_8HTSUtils_11pFastqProxy_getSlice;
struct __pyx_opt_args_7utilBMF_8HTSUtils_permuteNucleotides;
struct __pyx_opt_args_7utilBMF_8HTSUtils_WritePairToHandle;

/* "utilBMF/HTSUtils.pxd":9
 * from utilBMF.cstring cimport cs_to_ph, cs_to_ia, RevCmpImplicit
 * from cpython cimport array
 * ctypedef array.array py_array             # <<<<<<<<<<<<<<
 * ctypedef cython.str cystr
 * ctypedef PileupReadPair PileupReadPair_t
 */
typedef arrayobject *__pyx_t_7utilBMF_8HTSUtils_py_array;

/* "utilBMF/HTSUtils.pxd":10
 * from cpython cimport array
 * ctypedef array.array py_array
 * ctypedef cython.str cystr             # <<<<<<<<<<<<<<
 * ctypedef PileupReadPair PileupReadPair_t
 * ctypedef np.longdouble_t dtype128_t
 */
typedef PyObject *__pyx_t_7utilBMF_8HTSUtils_cystr;

/* "utilBMF/HTSUtils.pxd":11
 * ctypedef array.array py_array
 * ctypedef cython.str cystr
 * ctypedef PileupReadPair PileupReadPair_t             # <<<<<<<<<<<<<<
 * ctypedef np.longdouble_t dtype128_t
 * ctypedef pPileupRead pPileupRead_t
 */
typedef struct __pyx_obj_7utilBMF_8HTSUtils_PileupReadPair *__pyx_t_7utilBMF_8HTSUtils_PileupReadPair_t;

/* "utilBMF/HTSUtils.pxd":13
 * ctypedef PileupReadPair PileupReadPair_t
 * ctypedef np.longdouble_t dtype128_t
 * ctypedef pPileupRead pPileupRead_t             # <<<<<<<<<<<<<<
 * ctypedef ReadPair ReadPair_t
 * ctypedef pysam.calignmentfile.AlignedSegment AlignedSegment_t
 */
typedef struct __pyx_obj_7utilBMF_8HTSUtils_pPileupRead *__pyx_t_7utilBMF_8HTSUtils_pPileupRead_t;

/* "utilBMF/HTSUtils.pxd":14
 * ctypedef np.longdouble_t dtype128_t
 * ctypedef pPileupRead pPileupRead_t
 * ctypedef ReadPair ReadPair_t             # <<<<<<<<<<<<<<
 * ctypedef pysam.calignmentfile.AlignedSegment AlignedSegment_t
 * ctypedef pFastqProxy pFastqProxy_t
 */
typedef struct __pyx_obj_7utilBMF_8HTSUtils_ReadPair *__pyx_t_7utilBMF_8HTSUtils_ReadPair_t;

/* "utilBMF/HTSUtils.pxd":15
 * ctypedef pPileupRead pPileupRead_t
 * ctypedef ReadPair ReadPair_t
 * ctypedef pysam.calignmentfile.AlignedSegment AlignedSegment_t             # <<<<<<<<<<<<<<
 * ctypedef pFastqProxy pFastqProxy_t
 * 
 */
typedef struct __pyx_obj_5pysam_14calignmentfile_AlignedSegment *__pyx_t_7utilBMF_8HTSUtils_AlignedSegment_t;

/* "utilBMF/HTSUtils.pxd":16
 * ctypedef ReadPair ReadPair_t
 * ctypedef pysam.calignmentfile.AlignedSegment AlignedSegment_t
 * ctypedef pFastqProxy pFastqProxy_t             # <<<<<<<<<<<<<<
 * 
 * cimport pysam.TabProxies
 */
typedef struct __pyx_obj_7utilBMF_8HTSUtils_pFastqProxy *__pyx_t_7utilBMF_8HTSUtils_pFastqProxy_t;

/* "utilBMF/HTSUtils.pxd":19
 * 
 * cimport pysam.TabProxies
 * ctypedef pysam.calignmentfile.PileupRead cPileupRead             # <<<<<<<<<<<<<<
 * ctypedef Insertion Insertion_t
 * ctypedef Deletion Deletion_t
 */
typedef struct __pyx_obj_5pysam_14calignmentfile_PileupRead *__pyx_t_7utilBMF_8HTSUtils_cPileupRead;

/* "utilBMF/HTSUtils.pxd":20
 * cimport pysam.TabProxies
 * ctypedef pysam.calignmentfile.PileupRead cPileupRead
 * ctypedef Insertion Insertion_t             # <<<<<<<<<<<<<<
 * ctypedef Deletion Deletion_t
 * ctypedef AbstractIndelContainer AbstractIndelContainer_t
 */
typedef struct __pyx_obj_7utilBMF_8HTSUtils_Insertion *__pyx_t_7utilBMF_8HTSUtils_Insertion_t;

/* "utilBMF/HTSUtils.pxd":21
 * ctypedef pysam.calignmentfile.PileupRead cPileupRead
 * ctypedef Insertion Insertion_t
 * ctypedef Deletion Deletion_t             # <<<<<<<<<<<<<<
 * ctypedef AbstractIndelContainer AbstractIndelContainer_t
 * ctypedef IndelQuiver IndelQuiver_t
 */
typedef struct __pyx_obj_7utilBMF_8HTSUtils_Deletion *__pyx_t_7utilBMF_8HTSUtils_Deletion_t;

/* "utilBMF/HTSUtils.pxd":22
 * ctypedef Insertion Insertion_t
 * ctypedef Deletion Deletion_t
 * ctypedef AbstractIndelContainer AbstractIndelContainer_t             # <<<<<<<<<<<<<<
 * ctypedef IndelQuiver IndelQuiver_t
 * ctypedef IDVCFLine IDVCFLine_t
 */
typedef struct __pyx_obj_7utilBMF_8HTSUtils_AbstractIndelContainer *__pyx_t_7utilBMF_8HTSUtils_AbstractIndelContainer_t;

/* "utilBMF/HTSUtils.pxd":23
 * ctypedef Deletion Deletion_t
 * ctypedef AbstractIndelContainer AbstractIndelContainer_t
 * ctypedef IndelQuiver IndelQuiver_t             # <<<<<<<<<<<<<<
 * ctypedef IDVCFLine IDVCFLine_t
 * ctypedef np.int32_t np_int32_t
 */
typedef struct __pyx_obj_7utilBMF_8HTSUtils_IndelQuiver *__pyx_t_7utilBMF_8HTSUtils_IndelQuiver_t;

/* "utilBMF/HTSUtils.pxd":24
 * ctypedef AbstractIndelContainer AbstractIndelContainer_t
 * ctypedef IndelQuiver IndelQuiver_t
 * ctypedef IDVCFLine IDVCFLine_t             # <<<<<<<<<<<<<<
 * ctypedef np.int32_t np_int32_t
 * 
 */
typedef struct __pyx_obj_7utilBMF_8HTSUtils_IDVCFLine *__pyx_t_7utilBMF_8HTSUtils_IDVCFLine_t;

/* "utilBMF/HTSUtils.pxd":143
 *     cdef int cGetFM(self)
 *     cpdef int getFM(self)
 *     cpdef cystr getSlice(self, int start=?, int end=?,             # <<<<<<<<<<<<<<
 *                          cystr addComment=?)
 * 
 */
struct __pyx_opt_args_7utilBMF_8HTSUtils_11pFastqProxy_getSlice {
  int __pyx_n;
  int start;
  int end;
  __pyx_t_7utilBMF_8HTSUtils_cystr addComment;
};

/* "utilBMF/HTSUtils.pxd":161
 * cpdef public cystr RevCmp(cystr seq)
 * 
 * cpdef public list permuteNucleotides(long maxn, object nci=?, int kmerLen=?)             # <<<<<<<<<<<<<<
 * 
 * cpdef bint ReadsOverlap(
 */
struct __pyx_opt_args_7utilBMF_8HTSUtils_permuteNucleotides {
  int __pyx_n;
  PyObject *nci;
  int kmerLen;
};

/* "utilBMF/HTSUtils.pxd":172
 *         AlignedSegment_t read2)
 * 
 * cpdef bint WritePairToHandle(ReadPair_t pair, pysam.calignmentfile.AlignmentFile handle=?)             # <<<<<<<<<<<<<<
 * cdef double cyOptStdDev_(ndarray[np.float64_t, ndim=1] a)
 * cdef cystr cGetBS(pFastqProxy_t)
 */
struct __pyx_opt_args_7utilBMF_8HTSUtils_WritePairToHandle {
  int __pyx_n;
  struct __pyx_obj_5pysam_14calignmentfile_AlignmentFile *handle;
};

/* "utilBMF/PysamUtils.pxd":4
 * cimport cython
 * from cpython cimport array
 * ctypedef array.array py_array             # <<<<<<<<<<<<<<
 * ctypedef cython.str cystr
 * 
 */
typedef arrayobject *__pyx_t_7utilBMF_10PysamUtils_py_array;

/* "utilBMF/PysamUtils.pxd":5
 * from cpython cimport array
 * ctypedef array.array py_array
 * ctypedef cython.str cystr             # <<<<<<<<<<<<<<
 * 
 * ctypedef pysam.calignmentfile.AlignedSegment AlignedSegment_t
 */
typedef PyObject *__pyx_t_7utilBMF_10PysamUtils_cystr;

/* "utilBMF/PysamUtils.pxd":7
 * ctypedef cython.str cystr
 * 
 * ctypedef pysam.calignmentfile.AlignedSegment AlignedSegment_t             # <<<<<<<<<<<<<<
 * ctypedef pysam.calignmentfile.AlignmentFile AlignmentFile_t
 * 
 */
typedef struct __pyx_obj_5pysam_14calignmentfile_AlignedSegment *__pyx_t_7utilBMF_10PysamUtils_AlignedSegment_t;

/* "utilBMF/PysamUtils.pxd":8
 * 
 * ctypedef pysam.calignmentfile.AlignedSegment AlignedSegment_t
 * ctypedef pysam.calignmentfile.AlignmentFile AlignmentFile_t             # <<<<<<<<<<<<<<
 * 
 * cdef AlignedSegment_t CopyAlignedSegment(AlignedSegment_t template)
 */
typedef struct __pyx_obj_5pysam_14calignmentfile_AlignmentFile *__pyx_t_7utilBMF_10PysamUtils_AlignmentFile_t;

/* "MawCluster/Probability.pxd":5
 * from numpy cimport ndarray
 * from cpython cimport array as c_array
 * ctypedef c_array.array py_array             # <<<<<<<<<<<<<<
 * ctypedef long double npy_float128
 * ctypedef npy_float128   float128_t
 */
typedef arrayobject *__pyx_t_10MawCluster_11Probability_py_array;

/* "MawCluster/Probability.pxd":10
 * ctypedef double npy_float64
 * ctypedef npy_float64   float64_t
 * ctypedef cython.str cystr             # <<<<<<<<<<<<<<
 * 
 * from libc.math cimport sqrt as c_sqrt, M_SQRT1_2, log as c_log
 */
typedef PyObject *__pyx_t_10MawCluster_11Probability_cystr;
struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetAgreementSlice;
struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetQualSlice;
struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetCigarStringSlice;
struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetSeqArrSlice;
struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetOperationsSlice;
struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetQualStringSlice;

/* "utilBMF/MergePairedAlignments.pxd":17
 * from utilBMF.PysamUtils cimport PysamToChrInline
 * from MawCluster.Probability cimport c_abs
 * ctypedef pysam.calignmentfile.AlignedSegment AlignedSegment_t             # <<<<<<<<<<<<<<
 * ctypedef unsigned char uchar
 * ctypedef BamTag BamTag_t
 */
typedef struct __pyx_obj_5pysam_14calignmentfile_AlignedSegment *__pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t;

/* "utilBMF/MergePairedAlignments.pxd":19
 * ctypedef pysam.calignmentfile.AlignedSegment AlignedSegment_t
 * ctypedef unsigned char uchar
 * ctypedef BamTag BamTag_t             # <<<<<<<<<<<<<<
 * ctypedef Layout Layout_t
 * ctypedef ArrayLayoutPos ArrayLayoutPos_t
 */
typedef struct __pyx_obj_7utilBMF_8HTSUtils_BamTag *__pyx_t_7utilBMF_21MergePairedAlignments_BamTag_t;

/* "utilBMF/MergePairedAlignments.pxd":20
 * ctypedef unsigned char uchar
 * ctypedef BamTag BamTag_t
 * ctypedef Layout Layout_t             # <<<<<<<<<<<<<<
 * ctypedef ArrayLayoutPos ArrayLayoutPos_t
 * ctypedef ArrayLayout ArrayLayout_t
 */
typedef struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_t_7utilBMF_21MergePairedAlignments_Layout_t;

/* "utilBMF/MergePairedAlignments.pxd":21
 * ctypedef BamTag BamTag_t
 * ctypedef Layout Layout_t
 * ctypedef ArrayLayoutPos ArrayLayoutPos_t             # <<<<<<<<<<<<<<
 * ctypedef ArrayLayout ArrayLayout_t
 * ctypedef MergeRet MergeRet_t
 */
typedef struct ArrayLayoutPos __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t;

/* "utilBMF/MergePairedAlignments.pxd":22
 * ctypedef Layout Layout_t
 * ctypedef ArrayLayoutPos ArrayLayoutPos_t
 * ctypedef ArrayLayout ArrayLayout_t             # <<<<<<<<<<<<<<
 * ctypedef MergeRet MergeRet_t
 * 
 */
typedef struct ArrayLayout __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayout_t;

/* "utilBMF/MergePairedAlignments.pxd":23
 * ctypedef ArrayLayoutPos ArrayLayoutPos_t
 * ctypedef ArrayLayout ArrayLayout_t
 * ctypedef MergeRet MergeRet_t             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef struct MergeRet __pyx_t_7utilBMF_21MergePairedAlignments_MergeRet_t;

/* "utilBMF/MergePairedAlignments.pxd":108
 * 
 *     # Slices
 *     cdef ndarray[np.int16_t, ndim=1] cGetAgreementSlice(self, size_t start=?)             # <<<<<<<<<<<<<<
 *     cdef ndarray[int, ndim=1] cGetQualSlice(self, size_t start=?)
 *     cdef cystr cGetCigarStringSlice(self, size_t start=?)
 */
struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetAgreementSlice {
  int __pyx_n;
  size_t start;
};

/* "utilBMF/MergePairedAlignments.pxd":109
 *     # Slices
 *     cdef ndarray[np.int16_t, ndim=1] cGetAgreementSlice(self, size_t start=?)
 *     cdef ndarray[int, ndim=1] cGetQualSlice(self, size_t start=?)             # <<<<<<<<<<<<<<
 *     cdef cystr cGetCigarStringSlice(self, size_t start=?)
 *     cdef ndarray[char] cGetSeqArrSlice(self, size_t start=?)
 */
struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetQualSlice {
  int __pyx_n;
  size_t start;
};

/* "utilBMF/MergePairedAlignments.pxd":110
 *     cdef ndarray[np.int16_t, ndim=1] cGetAgreementSlice(self, size_t start=?)
 *     cdef ndarray[int, ndim=1] cGetQualSlice(self, size_t start=?)
 *     cdef cystr cGetCigarStringSlice(self, size_t start=?)             # <<<<<<<<<<<<<<
 *     cdef ndarray[char] cGetSeqArrSlice(self, size_t start=?)
 *     cdef ndarray[np.int8_t, ndim=1] cGetOperationsSlice(self, size_t start=?)
 */
struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetCigarStringSlice {
  int __pyx_n;
  size_t start;
};

/* "utilBMF/MergePairedAlignments.pxd":111
 *     cdef ndarray[int, ndim=1] cGetQualSlice(self, size_t start=?)
 *     cdef cystr cGetCigarStringSlice(self, size_t start=?)
 *     cdef ndarray[char] cGetSeqArrSlice(self, size_t start=?)             # <<<<<<<<<<<<<<
 *     cdef ndarray[np.int8_t, ndim=1] cGetOperationsSlice(self, size_t start=?)
 *     cdef cystr cGetQualStringSlice(self, size_t start=?)
 */
struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetSeqArrSlice {
  int __pyx_n;
  size_t start;
};

/* "utilBMF/MergePairedAlignments.pxd":112
 *     cdef cystr cGetCigarStringSlice(self, size_t start=?)
 *     cdef ndarray[char] cGetSeqArrSlice(self, size_t start=?)
 *     cdef ndarray[np.int8_t, ndim=1] cGetOperationsSlice(self, size_t start=?)             # <<<<<<<<<<<<<<
 *     cdef cystr cGetQualStringSlice(self, size_t start=?)
 * 
 */
struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetOperationsSlice {
  int __pyx_n;
  size_t start;
};

/* "utilBMF/MergePairedAlignments.pxd":113
 *     cdef ndarray[char] cGetSeqArrSlice(self, size_t start=?)
 *     cdef ndarray[np.int8_t, ndim=1] cGetOperationsSlice(self, size_t start=?)
 *     cdef cystr cGetQualStringSlice(self, size_t start=?)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetQualStringSlice {
  int __pyx_n;
  size_t start;
};

/* "cfaidx.pxd":19
 *         char *s
 * 
 * cdef class FastaFile:             # <<<<<<<<<<<<<<
 *     cdef object _filename, _references, _lengths, reference2length
 *     cdef faidx_t* fastafile
 */
struct __pyx_obj_5pysam_6cfaidx_FastaFile {
  PyObject_HEAD
  struct __pyx_vtabstruct_5pysam_6cfaidx_FastaFile *__pyx_vtab;
  PyObject *_filename;
  PyObject *_references;
  PyObject *_lengths;
  PyObject *reference2length;
  faidx_t *fastafile;
};


/* "cfaidx.pxd":26
 * 
 * 
 * cdef class FastqProxy:             # <<<<<<<<<<<<<<
 *     cdef kseq_t * _delegate
 * 
 */
struct __pyx_obj_5pysam_6cfaidx_FastqProxy {
  PyObject_HEAD
  kseq_t *_delegate;
};


/* "cfaidx.pxd":30
 * 
 * 
 * cdef class FastxFile:             # <<<<<<<<<<<<<<
 *     cdef object _filename
 *     cdef gzFile fastqfile
 */
struct __pyx_obj_5pysam_6cfaidx_FastxFile {
  PyObject_HEAD
  struct __pyx_vtabstruct_5pysam_6cfaidx_FastxFile *__pyx_vtab;
  PyObject *_filename;
  gzFile fastqfile;
  kseq_t *entry;
};


/* "cfaidx.pxd":39
 * 
 * # Compatibility Layer for pysam 0.8.1
 * cdef class FastqFile(FastxFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_5pysam_6cfaidx_FastqFile {
  struct __pyx_obj_5pysam_6cfaidx_FastxFile __pyx_base;
};


/* "cfaidx.pxd":43
 * 
 * # Compatibility Layer for pysam < 0.8
 * cdef class Fastafile(FastaFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_5pysam_6cfaidx_Fastafile {
  struct __pyx_obj_5pysam_6cfaidx_FastaFile __pyx_base;
};


/* "cfaidx.pxd":46
 *     pass
 * 
 * cdef class Fastqfile(FastxFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_5pysam_6cfaidx_Fastqfile {
  struct __pyx_obj_5pysam_6cfaidx_FastxFile __pyx_base;
};


/* "cfaidx.pxd":49
 *     pass
 * 
 * cdef class pFastqFile:             # <<<<<<<<<<<<<<
 *     cdef public FastxFile handle
 *     cpdef close(self)
 */
struct __pyx_obj_5pysam_6cfaidx_pFastqFile {
  PyObject_HEAD
  struct __pyx_vtabstruct_5pysam_6cfaidx_pFastqFile *__pyx_vtab;
  struct __pyx_obj_5pysam_6cfaidx_FastxFile *handle;
};


/* "cfaidx.pxd":53
 *     cpdef close(self)
 * 
 * cdef class pFastqProxy:             # <<<<<<<<<<<<<<
 *     """
 *     Python container for pysam.cfaidx.FastqProxy with persistence.
 */
struct __pyx_obj_5pysam_6cfaidx_pFastqProxy {
  PyObject_HEAD
  struct __pyx_vtabstruct_5pysam_6cfaidx_pFastqProxy *__pyx_vtab;
  PyObject *comment;
  PyObject *quality;
  PyObject *sequence;
  PyObject *name;
};


/* "pysam/calignmentfile.pxd":68
 * #
 * # Note: need to declare all C fields and methods here
 * cdef class AlignedSegment:             # <<<<<<<<<<<<<<
 * 
 *     # object that this AlignedSegment represents
 */
struct __pyx_obj_5pysam_14calignmentfile_AlignedSegment {
  PyObject_HEAD
  struct __pyx_vtabstruct_5pysam_14calignmentfile_AlignedSegment *__pyx_vtab;
  bam1_t *_delegate;
};


/* "pysam/calignmentfile.pxd":84
 *     cpdef has_tag(self, tag)
 * 
 * cdef class AlignmentFile:             # <<<<<<<<<<<<<<
 * 
 *     cdef object _filename
 */
struct __pyx_obj_5pysam_14calignmentfile_AlignmentFile {
  PyObject_HEAD
  struct __pyx_vtabstruct_5pysam_14calignmentfile_AlignmentFile *__pyx_vtab;
  PyObject *_filename;
  htsFile *htsfile;
  hts_idx_t *index;
  bam_hdr_t *header;
  int is_bam;
  int is_cram;
  int is_stream;
  int is_remote;
  bam1_t *b;
  char *mode;
  int64_t start_offset;
};


/* "pysam/calignmentfile.pxd":120
 *     cdef char * _getrname(self, int tid)
 * 
 * cdef class PileupColumn:             # <<<<<<<<<<<<<<
 *     cdef bam_pileup1_t ** plp
 *     cdef int tid
 */
struct __pyx_obj_5pysam_14calignmentfile_PileupColumn {
  PyObject_HEAD
  bam_pileup1_t **plp;
  int tid;
  int pos;
  int n_pu;
};


/* "pysam/calignmentfile.pxd":126
 *     cdef int n_pu
 * 
 * cdef class PileupRead:             # <<<<<<<<<<<<<<
 *     cdef AlignedSegment _alignment
 *     cdef int32_t  _qpos
 */
struct __pyx_obj_5pysam_14calignmentfile_PileupRead {
  PyObject_HEAD
  struct __pyx_obj_5pysam_14calignmentfile_AlignedSegment *_alignment;
  int32_t _qpos;
  int _indel;
  int _level;
  uint32_t _is_del;
  uint32_t _is_head;
  uint32_t _is_tail;
  uint32_t _is_refskip;
};


/* "pysam/calignmentfile.pxd":136
 *     cdef uint32_t _is_refskip
 * 
 * cdef class IteratorRow:             # <<<<<<<<<<<<<<
 *     cdef int retval
 *     cdef bam1_t * b
 */
struct __pyx_obj_5pysam_14calignmentfile_IteratorRow {
  PyObject_HEAD
  int retval;
  bam1_t *b;
  struct __pyx_obj_5pysam_14calignmentfile_AlignmentFile *samfile;
  htsFile *htsfile;
  bam_hdr_t *header;
  int owns_samfile;
};


/* "pysam/calignmentfile.pxd":144
 *     cdef int owns_samfile
 * 
 * cdef class IteratorRowRegion(IteratorRow):             # <<<<<<<<<<<<<<
 *     cdef hts_itr_t * iter
 *     cdef bam1_t * getCurrent( self )
 */
struct __pyx_obj_5pysam_14calignmentfile_IteratorRowRegion {
  struct __pyx_obj_5pysam_14calignmentfile_IteratorRow __pyx_base;
  struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorRowRegion *__pyx_vtab;
  hts_itr_t *iter;
};


/* "pysam/calignmentfile.pxd":149
 *     cdef int cnext(self)
 * 
 * cdef class IteratorRowHead(IteratorRow):             # <<<<<<<<<<<<<<
 *     cdef int max_rows
 *     cdef int current_row
 */
struct __pyx_obj_5pysam_14calignmentfile_IteratorRowHead {
  struct __pyx_obj_5pysam_14calignmentfile_IteratorRow __pyx_base;
  struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorRowHead *__pyx_vtab;
  int max_rows;
  int current_row;
};


/* "pysam/calignmentfile.pxd":155
 *     cdef int cnext(self)
 * 
 * cdef class IteratorRowAll(IteratorRow):             # <<<<<<<<<<<<<<
 *     cdef bam1_t * getCurrent( self )
 *     cdef int cnext(self)
 */
struct __pyx_obj_5pysam_14calignmentfile_IteratorRowAll {
  struct __pyx_obj_5pysam_14calignmentfile_IteratorRow __pyx_base;
  struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorRowAll *__pyx_vtab;
};


/* "pysam/calignmentfile.pxd":159
 *     cdef int cnext(self)
 * 
 * cdef class IteratorRowAllRefs(IteratorRow):             # <<<<<<<<<<<<<<
 *     cdef int         tid
 *     cdef IteratorRowRegion rowiter
 */
struct __pyx_obj_5pysam_14calignmentfile_IteratorRowAllRefs {
  struct __pyx_obj_5pysam_14calignmentfile_IteratorRow __pyx_base;
  int tid;
  struct __pyx_obj_5pysam_14calignmentfile_IteratorRowRegion *rowiter;
};


/* "pysam/calignmentfile.pxd":163
 *     cdef IteratorRowRegion rowiter
 * 
 * cdef class IteratorRowSelection(IteratorRow):             # <<<<<<<<<<<<<<
 *     cdef int current_pos
 *     cdef positions
 */
struct __pyx_obj_5pysam_14calignmentfile_IteratorRowSelection {
  struct __pyx_obj_5pysam_14calignmentfile_IteratorRow __pyx_base;
  struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorRowSelection *__pyx_vtab;
  int current_pos;
  PyObject *positions;
};


/* "pysam/calignmentfile.pxd":169
 *     cdef int cnext(self)
 * 
 * cdef class IteratorColumn:             # <<<<<<<<<<<<<<
 * 
 *     # result of the last plbuf_push
 */
struct __pyx_obj_5pysam_14calignmentfile_IteratorColumn {
  PyObject_HEAD
  struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorColumn *__pyx_vtab;
  struct __pyx_obj_5pysam_14calignmentfile_IteratorRowRegion *iter;
  int tid;
  int pos;
  int n_plp;
  int mask;
  bam_pileup1_t *plp;
  bam_plp_t pileup_iter;
  __pyx_t_5pysam_14calignmentfile___iterdata iterdata;
  struct __pyx_obj_5pysam_14calignmentfile_AlignmentFile *samfile;
  struct __pyx_obj_5pysam_6cfaidx_Fastafile *fastafile;
  PyObject *stepper;
  int max_depth;
};


/* "pysam/calignmentfile.pxd":197
 *     cdef _free_pileup_iter(self)
 * 
 * cdef class IteratorColumnRegion(IteratorColumn):             # <<<<<<<<<<<<<<
 *     cdef int start
 *     cdef int end
 */
struct __pyx_obj_5pysam_14calignmentfile_IteratorColumnRegion {
  struct __pyx_obj_5pysam_14calignmentfile_IteratorColumn __pyx_base;
  int start;
  int end;
  int truncate;
};


/* "pysam/calignmentfile.pxd":202
 *     cdef int truncate
 * 
 * cdef class IteratorColumnAllRefs(IteratorColumn):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_5pysam_14calignmentfile_IteratorColumnAllRefs {
  struct __pyx_obj_5pysam_14calignmentfile_IteratorColumn __pyx_base;
};


/* "pysam/calignmentfile.pxd":205
 *     pass
 * 
 * cdef class IndexedReads:             # <<<<<<<<<<<<<<
 *     cdef AlignmentFile samfile
 *     cdef htsFile * htsfile
 */
struct __pyx_obj_5pysam_14calignmentfile_IndexedReads {
  PyObject_HEAD
  struct __pyx_obj_5pysam_14calignmentfile_AlignmentFile *samfile;
  htsFile *htsfile;
  PyObject *index;
  int owns_samfile;
  bam_hdr_t *header;
};


/* "pysam/TabProxies.pxd":41
 *   ctypedef int uint64_t
 * 
 * cdef class TupleProxy:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_obj_5pysam_10TabProxies_TupleProxy {
  PyObject_HEAD
  struct __pyx_vtabstruct_5pysam_10TabProxies_TupleProxy *__pyx_vtab;
  char *data;
  char **fields;
  int nfields;
  int index;
  int nbytes;
  int offset;
  int is_modified;
  PyObject *encoding;
};


/* "pysam/TabProxies.pxd":63
 *     cdef update(self, char * buffer, size_t nbytes)
 * 
 * cdef class GTFProxy(TupleProxy) :             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_obj_5pysam_10TabProxies_GTFProxy {
  struct __pyx_obj_5pysam_10TabProxies_TupleProxy __pyx_base;
  char *_attributes;
  int hasOwnAttributes;
};


/* "pysam/TabProxies.pxd":73
 *     cdef char * getAttributes( self )
 * 
 * cdef class NamedTupleProxy(TupleProxy) :             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_5pysam_10TabProxies_NamedTupleProxy {
  struct __pyx_obj_5pysam_10TabProxies_TupleProxy __pyx_base;
};


/* "pysam/TabProxies.pxd":76
 *     pass
 * 
 * cdef class BedProxy(NamedTupleProxy) :             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_obj_5pysam_10TabProxies_BedProxy {
  struct __pyx_obj_5pysam_10TabProxies_NamedTupleProxy __pyx_base;
  char *contig;
  uint32_t start;
  uint32_t end;
  int bedfields;
};


/* "pysam/TabProxies.pxd":88
 *     cdef update(self, char * buffer, size_t nbytes)
 * 
 * cdef class VCFProxy(NamedTupleProxy) :             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_obj_5pysam_10TabProxies_VCFProxy {
  struct __pyx_obj_5pysam_10TabProxies_NamedTupleProxy __pyx_base;
  char *contig;
  uint32_t pos;
};


/* "utilBMF/HTSUtils.pxd":27
 * ctypedef np.int32_t np_int32_t
 * 
 * cdef class pPileupRead:             # <<<<<<<<<<<<<<
 *     """
 *     Python container for the PileupRead proxy in pysam
 */
struct __pyx_obj_7utilBMF_8HTSUtils_pPileupRead {
  PyObject_HEAD
  struct __pyx_vtabstruct_7utilBMF_8HTSUtils_pPileupRead *__pyx_vtab;
  __pyx_t_7utilBMF_8HTSUtils_cystr BaseCall;
  int is_del;
  long level;
  long indel;
  long query_position;
  float AF;
  __pyx_t_7utilBMF_8HTSUtils_cystr name;
  __pyx_t_7utilBMF_8HTSUtils_cystr str;
  __pyx_t_7utilBMF_8HTSUtils_AlignedSegment_t alignment;
  __pyx_t_7utilBMF_8HTSUtils_np_int32_t BQ;
  __pyx_t_7utilBMF_8HTSUtils_np_int32_t FA;
  __pyx_t_7utilBMF_8HTSUtils_np_int32_t MBQ;
};


/* "utilBMF/HTSUtils.pxd":42
 *     cpdef object opt(self, cystr arg)
 * 
 * cdef class PileupReadPair:             # <<<<<<<<<<<<<<
 * 
 *     """
 */
struct __pyx_obj_7utilBMF_8HTSUtils_PileupReadPair {
  PyObject_HEAD
  __pyx_t_7utilBMF_8HTSUtils_pPileupRead_t read1;
  __pyx_t_7utilBMF_8HTSUtils_pPileupRead_t read2;
  __pyx_t_7utilBMF_8HTSUtils_ReadPair_t RP;
  int discordant;
  __pyx_t_7utilBMF_8HTSUtils_cystr discordanceString;
  __pyx_t_7utilBMF_8HTSUtils_cystr name;
};


/* "utilBMF/HTSUtils.pxd":59
 * 
 * 
 * cdef class ReadPair:             # <<<<<<<<<<<<<<
 * 
 *     """
 */
struct __pyx_obj_7utilBMF_8HTSUtils_ReadPair {
  PyObject_HEAD
  __pyx_t_7utilBMF_8HTSUtils_AlignedSegment_t read1;
  __pyx_t_7utilBMF_8HTSUtils_AlignedSegment_t read2;
  PyObject *SVTags;
  int read1_is_unmapped;
  int read1_soft_clipped;
  int read2_is_unmapped;
  int read2_soft_clipped;
  int SameContig;
  __pyx_t_7utilBMF_8HTSUtils_cystr read1_contig;
  __pyx_t_7utilBMF_8HTSUtils_cystr read2_contig;
  __pyx_t_7utilBMF_8HTSUtils_cystr ContigString;
  long insert_size;
  int read1_in_bed;
  int read2_in_bed;
  int SameStrand;
};


/* "utilBMF/HTSUtils.pxd":82
 * 
 * 
 * cdef class AbstractIndelContainer:             # <<<<<<<<<<<<<<
 *     """
 *     Base class for insertion and deletion container objects.
 */
struct __pyx_obj_7utilBMF_8HTSUtils_AbstractIndelContainer {
  PyObject_HEAD
  __pyx_t_7utilBMF_8HTSUtils_cystr contig;
  __pyx_t_7utilBMF_8HTSUtils_cystr seq;
  __pyx_t_7utilBMF_8HTSUtils_cystr uniqStr;
  long type;
  long shenwindow;
  long end;
  long start;
  float shen;
  PyObject *readnames;
  PyObject *StartStops;
  struct __pyx_obj_5pysam_6cfaidx_FastaFile *handle;
};


/* "utilBMF/HTSUtils.pxd":98
 *     cdef public pysam.cfaidx.FastaFile handle
 * 
 * cdef class Deletion(AbstractIndelContainer):             # <<<<<<<<<<<<<<
 *     """
 *     See HTSUtils.pyx for doc string.
 */
struct __pyx_obj_7utilBMF_8HTSUtils_Deletion {
  struct __pyx_obj_7utilBMF_8HTSUtils_AbstractIndelContainer __pyx_base;
};


/* "utilBMF/HTSUtils.pxd":104
 * 
 * 
 * cdef class Insertion(AbstractIndelContainer):             # <<<<<<<<<<<<<<
 *     """
 *     See HTSUtils.pyx for doc string.
 */
struct __pyx_obj_7utilBMF_8HTSUtils_Insertion {
  struct __pyx_obj_7utilBMF_8HTSUtils_AbstractIndelContainer __pyx_base;
};


/* "utilBMF/HTSUtils.pxd":109
 *     """
 * 
 * cdef class IndelQuiver(object):             # <<<<<<<<<<<<<<
 *     cdef public dict data, counts, readnames
 *     cdef public long window, minMQ, minFM, minPairs, minNumSS
 */
struct __pyx_obj_7utilBMF_8HTSUtils_IndelQuiver {
  PyObject_HEAD
  PyObject *data;
  PyObject *counts;
  PyObject *readnames;
  long window;
  long minMQ;
  long minFM;
  long minPairs;
  long minNumSS;
  struct __pyx_obj_5pysam_6cfaidx_FastaFile *fastaRef;
  struct __pyx_obj_5pysam_14calignmentfile_AlignmentFile *bam;
  float minShen;
};


/* "utilBMF/HTSUtils.pxd":117
 * 
 * 
 * cdef class IDVCFLine(object):             # <<<<<<<<<<<<<<
 * 
 *     """
 */
struct __pyx_obj_7utilBMF_8HTSUtils_IDVCFLine {
  PyObject_HEAD
  __pyx_t_7utilBMF_8HTSUtils_cystr TYPE;
  __pyx_t_7utilBMF_8HTSUtils_cystr REF;
  __pyx_t_7utilBMF_8HTSUtils_cystr ALT;
  __pyx_t_7utilBMF_8HTSUtils_cystr ID;
  __pyx_t_7utilBMF_8HTSUtils_cystr CHROM;
  __pyx_t_7utilBMF_8HTSUtils_cystr FILTER;
  __pyx_t_7utilBMF_8HTSUtils_cystr FormatStr;
  __pyx_t_7utilBMF_8HTSUtils_cystr str;
  long POS;
  long LEN;
  long NumStartStops;
  long NDPS;
  long DPA;
  float reverseStrandFraction;
  float QUAL;
  float MDP;
  int BothStrandSupport;
  PyObject *InfoFields;
  PyObject *FormatFields;
};


/* "utilBMF/HTSUtils.pxd":132
 *     cdef public dict InfoFields, FormatFields
 * 
 * cdef class pFastqProxy:             # <<<<<<<<<<<<<<
 *     """
 *     Python container for pysam.cfaidx.FastqProxy with persistence.
 */
struct __pyx_obj_7utilBMF_8HTSUtils_pFastqProxy {
  PyObject_HEAD
  struct __pyx_vtabstruct_7utilBMF_8HTSUtils_pFastqProxy *__pyx_vtab;
  __pyx_t_7utilBMF_8HTSUtils_cystr comment;
  __pyx_t_7utilBMF_8HTSUtils_cystr quality;
  __pyx_t_7utilBMF_8HTSUtils_cystr sequence;
  __pyx_t_7utilBMF_8HTSUtils_cystr name;
};


/* "utilBMF/HTSUtils.pxd":147
 * 
 * 
 * cdef class pFastqFile(object):             # <<<<<<<<<<<<<<
 *     cdef public pysam.cfaidx.FastqFile handle
 *     cpdef close(self)
 */
struct __pyx_obj_7utilBMF_8HTSUtils_pFastqFile {
  PyObject_HEAD
  struct __pyx_vtabstruct_7utilBMF_8HTSUtils_pFastqFile *__pyx_vtab;
  struct __pyx_obj_5pysam_6cfaidx_FastqFile *handle;
};


/* "utilBMF/HTSUtils.pxd":151
 *     cpdef close(self)
 * 
 * cdef class BamTag(object):             # <<<<<<<<<<<<<<
 *     """
 *     Contains a tag, a value, and a type, all of which are string objects.
 */
struct __pyx_obj_7utilBMF_8HTSUtils_BamTag {
  PyObject_HEAD
  __pyx_t_7utilBMF_8HTSUtils_cystr tag;
  __pyx_t_7utilBMF_8HTSUtils_cystr tagtype;
  PyObject *value;
};


/* "utilBMF/PysamUtils.pxd":12
 * cdef AlignedSegment_t CopyAlignedSegment(AlignedSegment_t template)
 * 
 * cdef class PairwiseAlignmentFile:             # <<<<<<<<<<<<<<
 *     cdef public AlignmentFile_t handle
 * 
 */
struct __pyx_obj_7utilBMF_10PysamUtils_PairwiseAlignmentFile {
  PyObject_HEAD
  __pyx_t_7utilBMF_10PysamUtils_AlignmentFile_t handle;
};


/* "utilBMF/MergePairedAlignments.pxd":46
 * 
 * 
 * cdef class Layout:             # <<<<<<<<<<<<<<
 *     cdef ArrayLayout_t Layout
 * 
 */
struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout {
  PyObject_HEAD
  struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *__pyx_vtab;
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayout_t Layout;
  __pyx_t_7utilBMF_21MergePairedAlignments_uchar mapq;
  int tlen;
  int pnext;
  int flag;
  int InitPos;
  int firstMapped;
  int reference_id;
  int pos;
  int rnext;
  PyObject *tagDict;
  __pyx_t_7utilBMF_8HTSUtils_cystr Name;
  int is_reverse;
  int isMerged;
  int MergeSuccess;
};


/* "utilBMF/MergePairedAlignments.pxd":122
 * cpdef cystr ALPToStr(ArrayLayoutPos_t ALP)
 * 
 * cdef class ListBool:             # <<<<<<<<<<<<<<
 *     cdef list List
 *     cdef bint Bool
 */
struct __pyx_obj_7utilBMF_21MergePairedAlignments_ListBool {
  PyObject_HEAD
  PyObject *List;
  int Bool;
};



/* "cfaidx.pxd":19
 *         char *s
 * 
 * cdef class FastaFile:             # <<<<<<<<<<<<<<
 *     cdef object _filename, _references, _lengths, reference2length
 *     cdef faidx_t* fastafile
 */

struct __pyx_vtabstruct_5pysam_6cfaidx_FastaFile {
  char *(*_fetch)(struct __pyx_obj_5pysam_6cfaidx_FastaFile *, char *, int, int, int *);
};
static struct __pyx_vtabstruct_5pysam_6cfaidx_FastaFile *__pyx_vtabptr_5pysam_6cfaidx_FastaFile;


/* "cfaidx.pxd":30
 * 
 * 
 * cdef class FastxFile:             # <<<<<<<<<<<<<<
 *     cdef object _filename
 *     cdef gzFile fastqfile
 */

struct __pyx_vtabstruct_5pysam_6cfaidx_FastxFile {
  kseq_t *(*getCurrent)(struct __pyx_obj_5pysam_6cfaidx_FastxFile *);
  int (*cnext)(struct __pyx_obj_5pysam_6cfaidx_FastxFile *);
};
static struct __pyx_vtabstruct_5pysam_6cfaidx_FastxFile *__pyx_vtabptr_5pysam_6cfaidx_FastxFile;


/* "cfaidx.pxd":39
 * 
 * # Compatibility Layer for pysam 0.8.1
 * cdef class FastqFile(FastxFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_5pysam_6cfaidx_FastqFile {
  struct __pyx_vtabstruct_5pysam_6cfaidx_FastxFile __pyx_base;
};
static struct __pyx_vtabstruct_5pysam_6cfaidx_FastqFile *__pyx_vtabptr_5pysam_6cfaidx_FastqFile;


/* "cfaidx.pxd":43
 * 
 * # Compatibility Layer for pysam < 0.8
 * cdef class Fastafile(FastaFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_5pysam_6cfaidx_Fastafile {
  struct __pyx_vtabstruct_5pysam_6cfaidx_FastaFile __pyx_base;
};
static struct __pyx_vtabstruct_5pysam_6cfaidx_Fastafile *__pyx_vtabptr_5pysam_6cfaidx_Fastafile;


/* "cfaidx.pxd":46
 *     pass
 * 
 * cdef class Fastqfile(FastxFile):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_5pysam_6cfaidx_Fastqfile {
  struct __pyx_vtabstruct_5pysam_6cfaidx_FastxFile __pyx_base;
};
static struct __pyx_vtabstruct_5pysam_6cfaidx_Fastqfile *__pyx_vtabptr_5pysam_6cfaidx_Fastqfile;


/* "cfaidx.pxd":49
 *     pass
 * 
 * cdef class pFastqFile:             # <<<<<<<<<<<<<<
 *     cdef public FastxFile handle
 *     cpdef close(self)
 */

struct __pyx_vtabstruct_5pysam_6cfaidx_pFastqFile {
  PyObject *(*close)(struct __pyx_obj_5pysam_6cfaidx_pFastqFile *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5pysam_6cfaidx_pFastqFile *__pyx_vtabptr_5pysam_6cfaidx_pFastqFile;


/* "cfaidx.pxd":53
 *     cpdef close(self)
 * 
 * cdef class pFastqProxy:             # <<<<<<<<<<<<<<
 *     """
 *     Python container for pysam.cfaidx.FastqProxy with persistence.
 */

struct __pyx_vtabstruct_5pysam_6cfaidx_pFastqProxy {
  PyObject *(*tostring)(struct __pyx_obj_5pysam_6cfaidx_pFastqProxy *);
  arrayobject *(*getQualArray)(struct __pyx_obj_5pysam_6cfaidx_pFastqProxy *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5pysam_6cfaidx_pFastqProxy *__pyx_vtabptr_5pysam_6cfaidx_pFastqProxy;


/* "pysam/calignmentfile.pxd":68
 * #
 * # Note: need to declare all C fields and methods here
 * cdef class AlignedSegment:             # <<<<<<<<<<<<<<
 * 
 *     # object that this AlignedSegment represents
 */

struct __pyx_vtabstruct_5pysam_14calignmentfile_AlignedSegment {
  PyObject *(*set_tag)(struct __pyx_obj_5pysam_14calignmentfile_AlignedSegment *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_5pysam_14calignmentfile_14AlignedSegment_set_tag *__pyx_optional_args);
  PyObject *(*get_tag)(struct __pyx_obj_5pysam_14calignmentfile_AlignedSegment *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*has_tag)(struct __pyx_obj_5pysam_14calignmentfile_AlignedSegment *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5pysam_14calignmentfile_AlignedSegment *__pyx_vtabptr_5pysam_14calignmentfile_AlignedSegment;


/* "pysam/calignmentfile.pxd":84
 *     cpdef has_tag(self, tag)
 * 
 * cdef class AlignmentFile:             # <<<<<<<<<<<<<<
 * 
 *     cdef object _filename
 */

struct __pyx_vtabstruct_5pysam_14calignmentfile_AlignmentFile {
  bam_hdr_t *(*_buildHeader)(struct __pyx_obj_5pysam_14calignmentfile_AlignmentFile *, PyObject *);
  bam1_t *(*getCurrent)(struct __pyx_obj_5pysam_14calignmentfile_AlignmentFile *);
  int (*cnext)(struct __pyx_obj_5pysam_14calignmentfile_AlignmentFile *);
  int (*write)(struct __pyx_obj_5pysam_14calignmentfile_AlignmentFile *, struct __pyx_obj_5pysam_14calignmentfile_AlignedSegment *, int __pyx_skip_dispatch);
  char *(*_getrname)(struct __pyx_obj_5pysam_14calignmentfile_AlignmentFile *, int);
};
static struct __pyx_vtabstruct_5pysam_14calignmentfile_AlignmentFile *__pyx_vtabptr_5pysam_14calignmentfile_AlignmentFile;


/* "pysam/calignmentfile.pxd":144
 *     cdef int owns_samfile
 * 
 * cdef class IteratorRowRegion(IteratorRow):             # <<<<<<<<<<<<<<
 *     cdef hts_itr_t * iter
 *     cdef bam1_t * getCurrent( self )
 */

struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorRowRegion {
  bam1_t *(*getCurrent)(struct __pyx_obj_5pysam_14calignmentfile_IteratorRowRegion *);
  int (*cnext)(struct __pyx_obj_5pysam_14calignmentfile_IteratorRowRegion *);
};
static struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorRowRegion *__pyx_vtabptr_5pysam_14calignmentfile_IteratorRowRegion;


/* "pysam/calignmentfile.pxd":149
 *     cdef int cnext(self)
 * 
 * cdef class IteratorRowHead(IteratorRow):             # <<<<<<<<<<<<<<
 *     cdef int max_rows
 *     cdef int current_row
 */

struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorRowHead {
  bam1_t *(*getCurrent)(struct __pyx_obj_5pysam_14calignmentfile_IteratorRowHead *);
  int (*cnext)(struct __pyx_obj_5pysam_14calignmentfile_IteratorRowHead *);
};
static struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorRowHead *__pyx_vtabptr_5pysam_14calignmentfile_IteratorRowHead;


/* "pysam/calignmentfile.pxd":155
 *     cdef int cnext(self)
 * 
 * cdef class IteratorRowAll(IteratorRow):             # <<<<<<<<<<<<<<
 *     cdef bam1_t * getCurrent( self )
 *     cdef int cnext(self)
 */

struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorRowAll {
  bam1_t *(*getCurrent)(struct __pyx_obj_5pysam_14calignmentfile_IteratorRowAll *);
  int (*cnext)(struct __pyx_obj_5pysam_14calignmentfile_IteratorRowAll *);
};
static struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorRowAll *__pyx_vtabptr_5pysam_14calignmentfile_IteratorRowAll;


/* "pysam/calignmentfile.pxd":163
 *     cdef IteratorRowRegion rowiter
 * 
 * cdef class IteratorRowSelection(IteratorRow):             # <<<<<<<<<<<<<<
 *     cdef int current_pos
 *     cdef positions
 */

struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorRowSelection {
  bam1_t *(*getCurrent)(struct __pyx_obj_5pysam_14calignmentfile_IteratorRowSelection *);
  int (*cnext)(struct __pyx_obj_5pysam_14calignmentfile_IteratorRowSelection *);
};
static struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorRowSelection *__pyx_vtabptr_5pysam_14calignmentfile_IteratorRowSelection;


/* "pysam/calignmentfile.pxd":169
 *     cdef int cnext(self)
 * 
 * cdef class IteratorColumn:             # <<<<<<<<<<<<<<
 * 
 *     # result of the last plbuf_push
 */

struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorColumn {
  int (*cnext)(struct __pyx_obj_5pysam_14calignmentfile_IteratorColumn *);
  char *(*getSequence)(struct __pyx_obj_5pysam_14calignmentfile_IteratorColumn *);
  PyObject *(*setMask)(struct __pyx_obj_5pysam_14calignmentfile_IteratorColumn *, PyObject *);
  PyObject *(*setupIteratorData)(struct __pyx_obj_5pysam_14calignmentfile_IteratorColumn *, int, int, int, struct __pyx_opt_args_5pysam_14calignmentfile_14IteratorColumn_setupIteratorData *__pyx_optional_args);
  PyObject *(*reset)(struct __pyx_obj_5pysam_14calignmentfile_IteratorColumn *, PyObject *, PyObject *, PyObject *);
  PyObject *(*_free_pileup_iter)(struct __pyx_obj_5pysam_14calignmentfile_IteratorColumn *);
};
static struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorColumn *__pyx_vtabptr_5pysam_14calignmentfile_IteratorColumn;


/* "pysam/calignmentfile.pxd":197
 *     cdef _free_pileup_iter(self)
 * 
 * cdef class IteratorColumnRegion(IteratorColumn):             # <<<<<<<<<<<<<<
 *     cdef int start
 *     cdef int end
 */

struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorColumnRegion {
  struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorColumn __pyx_base;
};
static struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorColumnRegion *__pyx_vtabptr_5pysam_14calignmentfile_IteratorColumnRegion;


/* "pysam/calignmentfile.pxd":202
 *     cdef int truncate
 * 
 * cdef class IteratorColumnAllRefs(IteratorColumn):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorColumnAllRefs {
  struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorColumn __pyx_base;
};
static struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorColumnAllRefs *__pyx_vtabptr_5pysam_14calignmentfile_IteratorColumnAllRefs;


/* "pysam/TabProxies.pxd":41
 *   ctypedef int uint64_t
 * 
 * cdef class TupleProxy:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_5pysam_10TabProxies_TupleProxy {
  int (*getMaxFields)(struct __pyx_obj_5pysam_10TabProxies_TupleProxy *);
  int (*getMinFields)(struct __pyx_obj_5pysam_10TabProxies_TupleProxy *);
  PyObject *(*take)(struct __pyx_obj_5pysam_10TabProxies_TupleProxy *, char *, size_t);
  PyObject *(*present)(struct __pyx_obj_5pysam_10TabProxies_TupleProxy *, char *, size_t);
  PyObject *(*copy)(struct __pyx_obj_5pysam_10TabProxies_TupleProxy *, char *, size_t);
  PyObject *(*update)(struct __pyx_obj_5pysam_10TabProxies_TupleProxy *, char *, size_t);
};
static struct __pyx_vtabstruct_5pysam_10TabProxies_TupleProxy *__pyx_vtabptr_5pysam_10TabProxies_TupleProxy;


/* "pysam/TabProxies.pxd":63
 *     cdef update(self, char * buffer, size_t nbytes)
 * 
 * cdef class GTFProxy(TupleProxy) :             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_5pysam_10TabProxies_GTFProxy {
  struct __pyx_vtabstruct_5pysam_10TabProxies_TupleProxy __pyx_base;
  char *(*getAttributes)(struct __pyx_obj_5pysam_10TabProxies_GTFProxy *);
};
static struct __pyx_vtabstruct_5pysam_10TabProxies_GTFProxy *__pyx_vtabptr_5pysam_10TabProxies_GTFProxy;


/* "pysam/TabProxies.pxd":73
 *     cdef char * getAttributes( self )
 * 
 * cdef class NamedTupleProxy(TupleProxy) :             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_5pysam_10TabProxies_NamedTupleProxy {
  struct __pyx_vtabstruct_5pysam_10TabProxies_TupleProxy __pyx_base;
};
static struct __pyx_vtabstruct_5pysam_10TabProxies_NamedTupleProxy *__pyx_vtabptr_5pysam_10TabProxies_NamedTupleProxy;


/* "pysam/TabProxies.pxd":76
 *     pass
 * 
 * cdef class BedProxy(NamedTupleProxy) :             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_5pysam_10TabProxies_BedProxy {
  struct __pyx_vtabstruct_5pysam_10TabProxies_NamedTupleProxy __pyx_base;
};
static struct __pyx_vtabstruct_5pysam_10TabProxies_BedProxy *__pyx_vtabptr_5pysam_10TabProxies_BedProxy;


/* "pysam/TabProxies.pxd":88
 *     cdef update(self, char * buffer, size_t nbytes)
 * 
 * cdef class VCFProxy(NamedTupleProxy) :             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_5pysam_10TabProxies_VCFProxy {
  struct __pyx_vtabstruct_5pysam_10TabProxies_NamedTupleProxy __pyx_base;
};
static struct __pyx_vtabstruct_5pysam_10TabProxies_VCFProxy *__pyx_vtabptr_5pysam_10TabProxies_VCFProxy;


/* "utilBMF/HTSUtils.pxd":27
 * ctypedef np.int32_t np_int32_t
 * 
 * cdef class pPileupRead:             # <<<<<<<<<<<<<<
 *     """
 *     Python container for the PileupRead proxy in pysam
 */

struct __pyx_vtabstruct_7utilBMF_8HTSUtils_pPileupRead {
  PyObject *(*opt)(struct __pyx_obj_7utilBMF_8HTSUtils_pPileupRead *, __pyx_t_7utilBMF_8HTSUtils_cystr, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7utilBMF_8HTSUtils_pPileupRead *__pyx_vtabptr_7utilBMF_8HTSUtils_pPileupRead;


/* "utilBMF/HTSUtils.pxd":132
 *     cdef public dict InfoFields, FormatFields
 * 
 * cdef class pFastqProxy:             # <<<<<<<<<<<<<<
 *     """
 *     Python container for pysam.cfaidx.FastqProxy with persistence.
 */

struct __pyx_vtabstruct_7utilBMF_8HTSUtils_pFastqProxy {
  __pyx_t_7utilBMF_8HTSUtils_cystr (*cGetBS)(struct __pyx_obj_7utilBMF_8HTSUtils_pFastqProxy *);
  __pyx_t_7utilBMF_8HTSUtils_cystr (*getBS)(struct __pyx_obj_7utilBMF_8HTSUtils_pFastqProxy *, int __pyx_skip_dispatch);
  __pyx_t_7utilBMF_8HTSUtils_cystr (*tostring)(struct __pyx_obj_7utilBMF_8HTSUtils_pFastqProxy *);
  __pyx_t_7utilBMF_8HTSUtils_py_array (*getQualArray)(struct __pyx_obj_7utilBMF_8HTSUtils_pFastqProxy *, int __pyx_skip_dispatch);
  int (*cGetFM)(struct __pyx_obj_7utilBMF_8HTSUtils_pFastqProxy *);
  int (*getFM)(struct __pyx_obj_7utilBMF_8HTSUtils_pFastqProxy *, int __pyx_skip_dispatch);
  __pyx_t_7utilBMF_8HTSUtils_cystr (*getSlice)(struct __pyx_obj_7utilBMF_8HTSUtils_pFastqProxy *, int __pyx_skip_dispatch, struct __pyx_opt_args_7utilBMF_8HTSUtils_11pFastqProxy_getSlice *__pyx_optional_args);
};
static struct __pyx_vtabstruct_7utilBMF_8HTSUtils_pFastqProxy *__pyx_vtabptr_7utilBMF_8HTSUtils_pFastqProxy;


/* "utilBMF/HTSUtils.pxd":147
 * 
 * 
 * cdef class pFastqFile(object):             # <<<<<<<<<<<<<<
 *     cdef public pysam.cfaidx.FastqFile handle
 *     cpdef close(self)
 */

struct __pyx_vtabstruct_7utilBMF_8HTSUtils_pFastqFile {
  PyObject *(*close)(struct __pyx_obj_7utilBMF_8HTSUtils_pFastqFile *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7utilBMF_8HTSUtils_pFastqFile *__pyx_vtabptr_7utilBMF_8HTSUtils_pFastqFile;


/* "utilBMF/MergePairedAlignments.pyx":81
 * 
 * 
 * cdef class Layout:             # <<<<<<<<<<<<<<
 *     """
 *     Represents a layout as an array of arrays.
 */

struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout {
  int (*getFirstAlignedRefPos)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  int (*getLastAlignedRefPos)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  int (*getFirstMappedReadPos)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  int (*getAlignmentStart)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  int (*cPosIsMapped)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int);
  int (*posIsMapped)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int, int __pyx_skip_dispatch);
  char (*MergeLayouts_in_place)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayout_t);
  PyArrayObject *(*getMergedPositions)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  PyArrayObject *(*getAgreement)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int __pyx_skip_dispatch);
  PyArrayObject *(*cGetAgreement)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  __pyx_t_7utilBMF_8HTSUtils_cystr (*getPVString)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int __pyx_skip_dispatch);
  __pyx_t_7utilBMF_8HTSUtils_cystr (*cGetPVString)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  __pyx_t_7utilBMF_8HTSUtils_cystr (*getFAString)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int __pyx_skip_dispatch);
  __pyx_t_7utilBMF_8HTSUtils_cystr (*cGetFAString)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  PyArrayObject *(*getOperations)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int __pyx_skip_dispatch);
  PyArrayObject *(*cGetOperations)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  __pyx_t_7utilBMF_8HTSUtils_cystr (*cGetCigarString)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  __pyx_t_7utilBMF_8HTSUtils_cystr (*getCigarString)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int __pyx_skip_dispatch);
  PyArrayObject *(*cGetQual)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  PyArrayObject *(*getQual)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int __pyx_skip_dispatch);
  __pyx_t_7utilBMF_8HTSUtils_cystr (*cGetQualString)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  __pyx_t_7utilBMF_8HTSUtils_cystr (*getQualString)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int __pyx_skip_dispatch);
  PyArrayObject *(*cGetSeqArr)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  PyArrayObject *(*getSeqArr)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int __pyx_skip_dispatch);
  __pyx_t_7utilBMF_8HTSUtils_cystr (*getSeq)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int __pyx_skip_dispatch);
  PyObject *(*get_merge_tags)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  PyObject *(*get_tag_string)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  PyArrayObject *(*cGetGenomicDiscordantPositions)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  PyArrayObject *(*cGetReadDiscordantPositions)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  PyArrayObject *(*getMergeAgreements)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  __pyx_t_7utilBMF_8HTSUtils_cystr (*__pyx___sam__)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, __pyx_t_7utilBMF_21MergePairedAlignments_Layout_t, int __pyx_skip_dispatch);
  __pyx_t_7utilBMF_8HTSUtils_cystr (*__pyx___csam__)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, __pyx_t_7utilBMF_21MergePairedAlignments_Layout_t);
  PyObject *(*update_read_positions)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  PyObject *(*set_merge_tags_BT)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *);
  PyArrayObject *(*cGetAgreementSlice)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetAgreementSlice *__pyx_optional_args);
  PyArrayObject *(*cGetQualSlice)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetQualSlice *__pyx_optional_args);
  __pyx_t_7utilBMF_8HTSUtils_cystr (*cGetCigarStringSlice)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetCigarStringSlice *__pyx_optional_args);
  PyArrayObject *(*cGetSeqArrSlice)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetSeqArrSlice *__pyx_optional_args);
  PyArrayObject *(*cGetOperationsSlice)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetOperationsSlice *__pyx_optional_args);
  __pyx_t_7utilBMF_8HTSUtils_cystr (*cGetQualStringSlice)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetQualStringSlice *__pyx_optional_args);
};
static struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *__pyx_vtabptr_7utilBMF_21MergePairedAlignments_Layout;

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);

static void __Pyx_RaiseBufferFallbackError(void);

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb);
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb);

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** value1, PyObject** value2,
                                             int is_tuple, int has_known_size, int decref_tuple);

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static void* __Pyx_GetVtable(PyObject *dict);

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#ifndef _ARRAYARRAY_H
#define _ARRAYARRAY_H
typedef struct arraydescr {
    int typecode;
    int itemsize;
    PyObject * (*getitem)(struct arrayobject *, Py_ssize_t);
    int (*setitem)(struct arrayobject *, Py_ssize_t, PyObject *);
#if PY_MAJOR_VERSION >= 3
    char *formats;
#endif
} arraydescr;
struct arrayobject {
    PyObject_HEAD
    Py_ssize_t ob_size;
    union {
        char *ob_item;
        float *as_floats;
        double *as_doubles;
        int *as_ints;
        unsigned int *as_uints;
        unsigned char *as_uchars;
        signed char *as_schars;
        char *as_chars;
        unsigned long *as_ulongs;
        long *as_longs;
        short *as_shorts;
        unsigned short *as_ushorts;
        Py_UNICODE *as_pyunicodes;
        void *as_voidptr;
    } data;
    Py_ssize_t allocated;
    struct arraydescr *ob_descr;
    PyObject *weakreflist;
#if PY_MAJOR_VERSION >= 3
        int ob_exports;
#endif
};
#ifndef NO_NEWARRAY_INLINE
static CYTHON_INLINE PyObject * newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr) {
    arrayobject *op;
    size_t nbytes;
    if (size < 0) {
        PyErr_BadInternalCall();
        return NULL;
    }
    nbytes = size * descr->itemsize;
    if (nbytes / descr->itemsize != (size_t)size) {
        return PyErr_NoMemory();
    }
    op = (arrayobject *) type->tp_alloc(type, 0);
    if (op == NULL) {
        return NULL;
    }
    op->ob_descr = descr;
    op->allocated = size;
    op->weakreflist = NULL;
    op->ob_size = size;
    if (size <= 0) {
        op->data.ob_item = NULL;
    }
    else {
        op->data.ob_item = PyMem_NEW(char, nbytes);
        if (op->data.ob_item == NULL) {
            Py_DECREF(op);
            return PyErr_NoMemory();
        }
    }
    return (PyObject *) op;
}
#else
PyObject* newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr);
#endif
static CYTHON_INLINE int resize(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    PyMem_Resize(items, char, (size_t)(n * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    self->ob_size = n;
    self->allocated = n;
    return 0;
}
static CYTHON_INLINE int resize_smart(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    Py_ssize_t newsize;
    if (n < self->ob_size) {
        self->ob_size = n;
        return 0;
    }
    newsize = n + (n / 2) + 1;
    if (newsize <= self->allocated) {
        PyErr_NoMemory();
        return -1;
    }
    PyMem_Resize(items, char, (size_t)(newsize * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    self->ob_size = n;
    self->allocated = newsize;
    return 0;
}
#endif

typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE uint16_t __Pyx_PyInt_As_uint16_t(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE unsigned char __Pyx_PyInt_As_unsigned_char(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint16_t(uint16_t value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value);

static PyObject* __pyx_convert__to_py_ArrayLayoutPos(struct ArrayLayoutPos s);
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_char(unsigned char value);

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if (defined(_WIN32) || defined(__clang__)) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_ExportVoidPtr(PyObject *name, void *p, const char *sig);

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static int __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cPosIsMapped(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_v_position); /* proto*/
static int __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_posIsMapped(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_v_position, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getFirstMappedReadPos(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static int __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getLastAlignedRefPos(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static int __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getFirstAlignedRefPos(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static int __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getAlignmentStart(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetQual(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetAgreementSlice(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetAgreementSlice *__pyx_optional_args); /* proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetQualSlice(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetQualSlice *__pyx_optional_args); /* proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getQual(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetQualStringSlice(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetQualStringSlice *__pyx_optional_args); /* proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetQualString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getQualString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getFAString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetFAString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getPVString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetPVString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetSeqArrSlice(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetSeqArrSlice *__pyx_optional_args); /* proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetSeqArr(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getSeqArr(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getSeq(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static char __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_MergeLayouts_in_place(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayout_t __pyx_v_pairedLayout); /* proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getMergeAgreements(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getMergedPositions(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_set_merge_tags_BT(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_get_merge_tags(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout___sam__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, __pyx_t_7utilBMF_21MergePairedAlignments_Layout_t __pyx_v_pairedLayout, int __pyx_skip_dispatch); /* proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout___csam__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, __pyx_t_7utilBMF_21MergePairedAlignments_Layout_t __pyx_v_pairedLayout); /* proto*/
static PyObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_get_tag_string(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_update_read_positions(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetGenomicDiscordantPositions(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetReadDiscordantPositions(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getAgreement(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetAgreement(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getOperations(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetOperationsSlice(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetOperationsSlice *__pyx_optional_args); /* proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetOperations(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetCigarStringSlice(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetCigarStringSlice *__pyx_optional_args); /* proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetCigarString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getCigarString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'cython.view' */

/* Module declarations from 'cython' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'array' */

/* Module declarations from 'cpython.array' */
static PyTypeObject *__pyx_ptype_7cpython_5array_array = 0;
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *, char *, Py_ssize_t); /*proto*/

/* Module declarations from 'posix.types' */

/* Module declarations from 'pysam.chtslib' */

/* Module declarations from 'pysam.cfaidx' */
static PyTypeObject *__pyx_ptype_5pysam_6cfaidx_FastaFile = 0;
static PyTypeObject *__pyx_ptype_5pysam_6cfaidx_FastqProxy = 0;
static PyTypeObject *__pyx_ptype_5pysam_6cfaidx_FastxFile = 0;
static PyTypeObject *__pyx_ptype_5pysam_6cfaidx_FastqFile = 0;
static PyTypeObject *__pyx_ptype_5pysam_6cfaidx_Fastafile = 0;
static PyTypeObject *__pyx_ptype_5pysam_6cfaidx_Fastqfile = 0;
static PyTypeObject *__pyx_ptype_5pysam_6cfaidx_pFastqFile = 0;
static PyTypeObject *__pyx_ptype_5pysam_6cfaidx_pFastqProxy = 0;

/* Module declarations from 'pysam.calignmentfile' */
static PyTypeObject *__pyx_ptype_5pysam_14calignmentfile_AlignedSegment = 0;
static PyTypeObject *__pyx_ptype_5pysam_14calignmentfile_AlignmentFile = 0;
static PyTypeObject *__pyx_ptype_5pysam_14calignmentfile_PileupColumn = 0;
static PyTypeObject *__pyx_ptype_5pysam_14calignmentfile_PileupRead = 0;
static PyTypeObject *__pyx_ptype_5pysam_14calignmentfile_IteratorRow = 0;
static PyTypeObject *__pyx_ptype_5pysam_14calignmentfile_IteratorRowRegion = 0;
static PyTypeObject *__pyx_ptype_5pysam_14calignmentfile_IteratorRowHead = 0;
static PyTypeObject *__pyx_ptype_5pysam_14calignmentfile_IteratorRowAll = 0;
static PyTypeObject *__pyx_ptype_5pysam_14calignmentfile_IteratorRowAllRefs = 0;
static PyTypeObject *__pyx_ptype_5pysam_14calignmentfile_IteratorRowSelection = 0;
static PyTypeObject *__pyx_ptype_5pysam_14calignmentfile_IteratorColumn = 0;
static PyTypeObject *__pyx_ptype_5pysam_14calignmentfile_IteratorColumnRegion = 0;
static PyTypeObject *__pyx_ptype_5pysam_14calignmentfile_IteratorColumnAllRefs = 0;
static PyTypeObject *__pyx_ptype_5pysam_14calignmentfile_IndexedReads = 0;

/* Module declarations from 'pysam.TabProxies' */
static PyTypeObject *__pyx_ptype_5pysam_10TabProxies_TupleProxy = 0;
static PyTypeObject *__pyx_ptype_5pysam_10TabProxies_GTFProxy = 0;
static PyTypeObject *__pyx_ptype_5pysam_10TabProxies_NamedTupleProxy = 0;
static PyTypeObject *__pyx_ptype_5pysam_10TabProxies_BedProxy = 0;
static PyTypeObject *__pyx_ptype_5pysam_10TabProxies_VCFProxy = 0;

/* Module declarations from 'pysam' */

/* Module declarations from 'utilBMF.Inliners' */
static CYTHON_INLINE __pyx_t_7utilBMF_8Inliners_cystr __pyx_f_7utilBMF_8Inliners_opLenToStr(char, int); /*proto*/
static CYTHON_INLINE __pyx_t_7utilBMF_8Inliners_cystr __pyx_f_7utilBMF_8Inliners_CigarStrInline(char); /*proto*/
static CYTHON_INLINE __pyx_t_7utilBMF_8Inliners_cystr __pyx_f_7utilBMF_8Inliners_RevCmpChar(__pyx_t_7utilBMF_8Inliners_cystr); /*proto*/
static CYTHON_INLINE __pyx_t_7utilBMF_8Inliners_cystr __pyx_f_7utilBMF_8Inliners_RevCmpInt(char); /*proto*/
static CYTHON_INLINE char __pyx_f_7utilBMF_8Inliners_RevCmpToChar(char); /*proto*/
static CYTHON_INLINE __pyx_t_7utilBMF_8Inliners_cystr __pyx_f_7utilBMF_8Inliners_ph2chrInline(__pyx_t_7utilBMF_8Inliners_np_int32_t); /*proto*/
static CYTHON_INLINE __pyx_t_7utilBMF_8Inliners_cystr __pyx_f_7utilBMF_8Inliners_chrInline(char); /*proto*/

/* Module declarations from 'utilBMF.cstring' */
static __pyx_t_7utilBMF_7cstring_py_array (*__pyx_f_7utilBMF_7cstring_cs_to_ia)(__pyx_t_7utilBMF_7cstring_cystr); /*proto*/
static __pyx_t_7utilBMF_7cstring_py_array (*__pyx_f_7utilBMF_7cstring_cs_to_ph)(__pyx_t_7utilBMF_7cstring_cystr); /*proto*/
static __pyx_t_7utilBMF_7cstring_cystr (*__pyx_f_7utilBMF_7cstring_RevCmpImplicit)(__pyx_t_7utilBMF_7cstring_cystr); /*proto*/

/* Module declarations from 'utilBMF.HTSUtils' */
static PyTypeObject *__pyx_ptype_7utilBMF_8HTSUtils_pPileupRead = 0;
static PyTypeObject *__pyx_ptype_7utilBMF_8HTSUtils_PileupReadPair = 0;
static PyTypeObject *__pyx_ptype_7utilBMF_8HTSUtils_ReadPair = 0;
static PyTypeObject *__pyx_ptype_7utilBMF_8HTSUtils_AbstractIndelContainer = 0;
static PyTypeObject *__pyx_ptype_7utilBMF_8HTSUtils_Deletion = 0;
static PyTypeObject *__pyx_ptype_7utilBMF_8HTSUtils_Insertion = 0;
static PyTypeObject *__pyx_ptype_7utilBMF_8HTSUtils_IndelQuiver = 0;
static PyTypeObject *__pyx_ptype_7utilBMF_8HTSUtils_IDVCFLine = 0;
static PyTypeObject *__pyx_ptype_7utilBMF_8HTSUtils_pFastqProxy = 0;
static PyTypeObject *__pyx_ptype_7utilBMF_8HTSUtils_pFastqFile = 0;
static PyTypeObject *__pyx_ptype_7utilBMF_8HTSUtils_BamTag = 0;
static PyObject **__pyx_vp_7utilBMF_8HTSUtils_PysamToChrDict = 0;
#define __pyx_v_7utilBMF_8HTSUtils_PysamToChrDict (*__pyx_vp_7utilBMF_8HTSUtils_PysamToChrDict)
static PyObject **__pyx_vp_7utilBMF_8HTSUtils_ph2chrDict = 0;
#define __pyx_v_7utilBMF_8HTSUtils_ph2chrDict (*__pyx_vp_7utilBMF_8HTSUtils_ph2chrDict)
static PyObject **__pyx_vp_7utilBMF_8HTSUtils_chr2ph = 0;
#define __pyx_v_7utilBMF_8HTSUtils_chr2ph (*__pyx_vp_7utilBMF_8HTSUtils_chr2ph)
static PyObject **__pyx_vp_7utilBMF_8HTSUtils_chr2phStr = 0;
#define __pyx_v_7utilBMF_8HTSUtils_chr2phStr (*__pyx_vp_7utilBMF_8HTSUtils_chr2phStr)
static PyObject **__pyx_vp_7utilBMF_8HTSUtils_int2Str = 0;
#define __pyx_v_7utilBMF_8HTSUtils_int2Str (*__pyx_vp_7utilBMF_8HTSUtils_int2Str)
static PyObject **__pyx_vp_7utilBMF_8HTSUtils_TagTypeDict = 0;
#define __pyx_v_7utilBMF_8HTSUtils_TagTypeDict (*__pyx_vp_7utilBMF_8HTSUtils_TagTypeDict)
static PyObject **__pyx_vp_7utilBMF_8HTSUtils_nucList = 0;
#define __pyx_v_7utilBMF_8HTSUtils_nucList (*__pyx_vp_7utilBMF_8HTSUtils_nucList)
static __pyx_t_7utilBMF_8HTSUtils_cystr (*__pyx_f_7utilBMF_8HTSUtils_RevCmp)(__pyx_t_7utilBMF_8HTSUtils_cystr, int __pyx_skip_dispatch); /*proto*/
static PyObject *(*__pyx_f_7utilBMF_8HTSUtils_permuteNucleotides)(long, int __pyx_skip_dispatch, struct __pyx_opt_args_7utilBMF_8HTSUtils_permuteNucleotides *__pyx_optional_args); /*proto*/
static int (*__pyx_f_7utilBMF_8HTSUtils_cReadsOverlap)(__pyx_t_7utilBMF_8HTSUtils_AlignedSegment_t, __pyx_t_7utilBMF_8HTSUtils_AlignedSegment_t); /*proto*/

/* Module declarations from 'utilBMF' */

/* Module declarations from 'utilBMF.PysamUtils' */
static PyTypeObject *__pyx_ptype_7utilBMF_10PysamUtils_PairwiseAlignmentFile = 0;
static __pyx_t_7utilBMF_10PysamUtils_AlignedSegment_t (*__pyx_f_7utilBMF_10PysamUtils_CopyAlignedSegment)(__pyx_t_7utilBMF_10PysamUtils_AlignedSegment_t); /*proto*/
static CYTHON_INLINE __pyx_t_7utilBMF_10PysamUtils_cystr __pyx_f_7utilBMF_10PysamUtils_PysamToChrInline(char); /*proto*/

/* Module declarations from 'libc.math' */

/* Module declarations from 'MawCluster.Probability' */
static CYTHON_INLINE double __pyx_f_10MawCluster_11Probability_c_abs(double); /*proto*/

/* Module declarations from 'utilBMF.MergePairedAlignments' */
static PyTypeObject *__pyx_ptype_7utilBMF_21MergePairedAlignments_Layout = 0;
static PyTypeObject *__pyx_ptype_7utilBMF_21MergePairedAlignments_ListBool = 0;
__PYX_EXTERN_C DL_EXPORT(PyObject) *__pyx_v_7utilBMF_21MergePairedAlignments_CigarDict;
__PYX_EXTERN_C DL_EXPORT(PyObject) *__pyx_v_7utilBMF_21MergePairedAlignments_CigarStrDict;
static PyObject *__pyx_v_7utilBMF_21MergePairedAlignments_oagtag = 0;
static PyObject *__pyx_v_7utilBMF_21MergePairedAlignments_oig0 = 0;
static PyObject *__pyx_v_7utilBMF_21MergePairedAlignments_oig1 = 0;
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_FlattenCigarString(__pyx_t_7utilBMF_8HTSUtils_cystr, int __pyx_skip_dispatch); /*proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_cFlattenCigarString(__pyx_t_7utilBMF_8HTSUtils_cystr); /*proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_ALPToStr(__pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE int __pyx_f_7utilBMF_21MergePairedAlignments_LayoutsOverlap(__pyx_t_7utilBMF_21MergePairedAlignments_Layout_t, __pyx_t_7utilBMF_21MergePairedAlignments_Layout_t); /*proto*/
static struct ArrayLayoutPos __pyx_convert__from_py_ArrayLayoutPos(PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_int = { "int", NULL, sizeof(int), { 0 }, 0, IS_UNSIGNED(int) ? 'U' : 'I', IS_UNSIGNED(int), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t = { "int32_t", NULL, sizeof(__pyx_t_5numpy_int32_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int32_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int32_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int16_t = { "int16_t", NULL, sizeof(__pyx_t_5numpy_int16_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int16_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int16_t), 0 };
#define __Pyx_MODULE_NAME "utilBMF.MergePairedAlignments"
int __pyx_module_is_main_utilBMF__MergePairedAlignments = 0;

/* Implementation of 'utilBMF.MergePairedAlignments' */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_ord;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_map;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_chr;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static int __pyx_pf_7utilBMF_21MergePairedAlignments_8ListBool___cinit__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_ListBool *__pyx_v_self, PyObject *__pyx_v_List, int __pyx_v_Bool); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_lambda1None(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_2getFirstMappedRefPos(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t __pyx_v_rec); /* proto */
static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout___cinit__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, __pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t __pyx_v_read); /* proto */
static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_2__init__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, __pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t __pyx_v_read); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4posIsMapped(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_v_position); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_6getQual(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_8getQualString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_10getFAString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_12getPVString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static void __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_14__dealloc__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_16getSeqArr(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_18getSeq(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_20__str__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_22__sam__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, __pyx_t_7utilBMF_21MergePairedAlignments_Layout_t __pyx_v_pairedLayout); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_24update(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_26getAgreement(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_28getOperations(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_30getCigarString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_32getFlag(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4mapq___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4mapq_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4tlen___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4tlen_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_5pnext___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_5pnext_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4flag___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4flag_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_7InitPos___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_7InitPos_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_11firstMapped___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_11firstMapped_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_12reference_id___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_12reference_id_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_3pos___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_3pos_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_5rnext___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_5rnext_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_7tagDict___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_7tagDict_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_7tagDict_4__del__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4Name___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4Name_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4Name_4__del__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_10is_reverse___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_10is_reverse_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_8isMerged___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_8isMerged_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_12MergeSuccess___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self); /* proto */
static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_12MergeSuccess_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_4MergePairedAlignments(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_inBAM, CYTHON_UNUSED __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_outBAM, int __pyx_v_readLength, CYTHON_UNUSED __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_outMerge); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6ALPToStr(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t __pyx_v_ALP); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_8testLayout(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_inBAM, __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_outBAM); /* proto */
static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_10FlattenCigarString(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_cigar); /* proto */
static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags); /* proto */
static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_7utilBMF_21MergePairedAlignments_Layout(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7utilBMF_21MergePairedAlignments_ListBool(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_0[] = "0";
static char __pyx_k_1[] = "1";
static char __pyx_k_2[] = "2";
static char __pyx_k_3[] = "3";
static char __pyx_k_4[] = "4";
static char __pyx_k_5[] = "5";
static char __pyx_k_6[] = "6";
static char __pyx_k_7[] = "7";
static char __pyx_k_8[] = "8";
static char __pyx_k_9[] = "9";
static char __pyx_k_A[] = "A";
static char __pyx_k_B[] = "B";
static char __pyx_k_C[] = "C";
static char __pyx_k_D[] = "D";
static char __pyx_k_E[] = "E";
static char __pyx_k_F[] = "F";
static char __pyx_k_G[] = "G";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_J[] = "J";
static char __pyx_k_K[] = "K";
static char __pyx_k_L[] = "L";
static char __pyx_k_M[] = "M";
static char __pyx_k_N[] = "N";
static char __pyx_k_O[] = "O";
static char __pyx_k_P[] = "P";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_R[] = "R";
static char __pyx_k_S[] = "S";
static char __pyx_k_T[] = "T";
static char __pyx_k_U[] = "U";
static char __pyx_k_V[] = "V";
static char __pyx_k_W[] = "W";
static char __pyx_k_X[] = "X";
static char __pyx_k_Y[] = "Y";
static char __pyx_k_Z[] = "Z";
static char __pyx_k_a[] = "a";
static char __pyx_k_b[] = "b";
static char __pyx_k_c[] = "c";
static char __pyx_k_d[] = "d";
static char __pyx_k_e[] = "e";
static char __pyx_k_f[] = "f";
static char __pyx_k_g[] = "g";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_j[] = "j";
static char __pyx_k_k[] = "k";
static char __pyx_k_l[] = "l";
static char __pyx_k_m[] = "m";
static char __pyx_k_n[] = "n";
static char __pyx_k_o[] = "o";
static char __pyx_k_p[] = "p";
static char __pyx_k_q[] = "q";
static char __pyx_k_r[] = "r";
static char __pyx_k_s[] = "\t%s";
static char __pyx_k_t[] = "t";
static char __pyx_k_u[] = "u";
static char __pyx_k_v[] = "v";
static char __pyx_k_w[] = "w";
static char __pyx_k_x[] = "x";
static char __pyx_k_y[] = "y";
static char __pyx_k_z[] = "z";
static char __pyx_k_10[] = "10";
static char __pyx_k_11[] = "11";
static char __pyx_k_12[] = "12";
static char __pyx_k_13[] = "13";
static char __pyx_k_14[] = "14";
static char __pyx_k_15[] = "15";
static char __pyx_k_16[] = "16";
static char __pyx_k_17[] = "17";
static char __pyx_k_18[] = "18";
static char __pyx_k_19[] = "19";
static char __pyx_k_20[] = "20";
static char __pyx_k_21[] = "21";
static char __pyx_k_22[] = "22";
static char __pyx_k_DG[] = "DG";
static char __pyx_k_DR[] = "DR";
static char __pyx_k_FA[] = "FA";
static char __pyx_k_FM[] = "FM";
static char __pyx_k_MA[] = "MA";
static char __pyx_k_MP[] = "MP";
static char __pyx_k_MT[] = "MT";
static char __pyx_k_PM[] = "PM";
static char __pyx_k_PV[] = "PV";
static char __pyx_k_Zd[] = "Zd";
static char __pyx_k_Zf[] = "Zf";
static char __pyx_k_Zg[] = "Zg";
static char __pyx_k__2[] = ",";
static char __pyx_k_mc[] = "mc";
static char __pyx_k_mp[] = "mp";
static char __pyx_k_np[] = "np";
static char __pyx_k_om[] = "om";
static char __pyx_k_ot[] = "ot";
static char __pyx_k_pl[] = "pl";
static char __pyx_k_rb[] = "rb";
static char __pyx_k_re[] = "re";
static char __pyx_k_sD[] = "%sD";
static char __pyx_k_sI[] = "%sI";
static char __pyx_k_sM[] = "%sM";
static char __pyx_k_sS[] = "%sS";
static char __pyx_k_wb[] = "wb";
static char __pyx_k_0_9[] = "[0-9]+";
static char __pyx_k_A_Z[] = "[A-Z]";
static char __pyx_k__11[] = "";
static char __pyx_k__12[] = "#";
static char __pyx_k__15[] = "\t";
static char __pyx_k__17[] = "-";
static char __pyx_k__20[] = "|";
static char __pyx_k__28[] = "=";
static char __pyx_k__29[] = "!";
static char __pyx_k__30[] = "\"";
static char __pyx_k__31[] = "$";
static char __pyx_k__32[] = "%";
static char __pyx_k__33[] = "&";
static char __pyx_k__34[] = "'";
static char __pyx_k__35[] = "(";
static char __pyx_k__36[] = ")";
static char __pyx_k__37[] = "*";
static char __pyx_k__38[] = "+";
static char __pyx_k__39[] = ".";
static char __pyx_k__40[] = "/";
static char __pyx_k__41[] = ":";
static char __pyx_k__42[] = ";";
static char __pyx_k__43[] = "<";
static char __pyx_k__44[] = ">";
static char __pyx_k__45[] = "?";
static char __pyx_k__46[] = "@";
static char __pyx_k__47[] = "[";
static char __pyx_k__48[] = "\\";
static char __pyx_k__49[] = "]";
static char __pyx_k__50[] = "^";
static char __pyx_k__51[] = "_";
static char __pyx_k__52[] = "`";
static char __pyx_k__53[] = "{";
static char __pyx_k__54[] = "}";
static char __pyx_k__55[] = "~";
static char __pyx_k_chr[] = "chr";
static char __pyx_k_end[] = "end";
static char __pyx_k_key[] = "key";
static char __pyx_k_map[] = "map";
static char __pyx_k_oag[] = "oag";
static char __pyx_k_oig[] = "oig";
static char __pyx_k_opt[] = "opt";
static char __pyx_k_ord[] = "ord";
static char __pyx_k_pos[] = "pos";
static char __pyx_k_re2[] = "re2";
static char __pyx_k_rec[] = "rec";
static char __pyx_k_s_2[] = "s";
static char __pyx_k_s_s[] = "\t%s\t%s";
static char __pyx_k_sam[] = "__sam__";
static char __pyx_k_seq[] = "seq";
static char __pyx_k_sum[] = "sum";
static char __pyx_k_sys[] = "sys";
static char __pyx_k_tag[] = "tag";
static char __pyx_k_zip[] = "zip";
static char __pyx_k_Bool[] = "Bool";
static char __pyx_k_List[] = "List";
static char __pyx_k_base[] = "base";
static char __pyx_k_char[] = "char";
static char __pyx_k_exit[] = "exit";
static char __pyx_k_file[] = "file";
static char __pyx_k_find[] = "find";
static char __pyx_k_flag[] = "flag";
static char __pyx_k_int8[] = "int8";
static char __pyx_k_izip[] = "izip";
static char __pyx_k_join[] = "join";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_mapq[] = "mapq";
static char __pyx_k_next[] = "next";
static char __pyx_k_oig0[] = "oig0";
static char __pyx_k_oig1[] = "oig1";
static char __pyx_k_read[] = "read";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_text[] = "text";
static char __pyx_k_tlen[] = "tlen";
static char __pyx_k_uuid[] = "uuid";
static char __pyx_k_DEBUG[] = "DEBUG";
static char __pyx_k_array[] = "array";
static char __pyx_k_build[] = "build";
static char __pyx_k_cigar[] = "cigar";
static char __pyx_k_close[] = "close";
static char __pyx_k_count[] = "count";
static char __pyx_k_dtype[] = "dtype";
static char __pyx_k_inBAM[] = "inBAM";
static char __pyx_k_int16[] = "int16";
static char __pyx_k_int32[] = "int32";
static char __pyx_k_level[] = "level";
static char __pyx_k_numpy[] = "numpy";
static char __pyx_k_oagag[] = "oagag";
static char __pyx_k_oagop[] = "oagop";
static char __pyx_k_oagsk[] = "oagsk";
static char __pyx_k_pnext[] = "pnext";
static char __pyx_k_print[] = "print";
static char __pyx_k_pysam[] = "pysam";
static char __pyx_k_range[] = "range";
static char __pyx_k_s_s_s[] = "\t%s\t%s\t%s\t";
static char __pyx_k_split[] = "split";
static char __pyx_k_value[] = "value";
static char __pyx_k_write[] = "write";
static char __pyx_k_BamTag[] = "BamTag";
static char __pyx_k_Name_s[] = "Name: %s";
static char __pyx_k_astype[] = "astype";
static char __pyx_k_getSeq[] = "getSeq";
static char __pyx_k_header[] = "header";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_layout[] = "layout";
static char __pyx_k_length[] = "length";
static char __pyx_k_maxint[] = "maxint";
static char __pyx_k_oagtag[] = "oagtag";
static char __pyx_k_outBAM[] = "outBAM";
static char __pyx_k_read_2[] = "read ";
static char __pyx_k_read_3[] = "__read__";
static char __pyx_k_rsplit[] = "rsplit";
static char __pyx_k_stdout[] = "stdout";
static char __pyx_k_update[] = "update";
static char __pyx_k_xrange[] = "xrange";
static char __pyx_k_Layout1[] = "Layout1";
static char __pyx_k_Layout2[] = "Layout2";
static char __pyx_k_MPA_RAN[] = "MPA RAN!";
static char __pyx_k_TrimExt[] = "TrimExt";
static char __pyx_k_getFlag[] = "getFlag";
static char __pyx_k_getQual[] = "getQual";
static char __pyx_k_groupby[] = "groupby";
static char __pyx_k_layouts[] = "layouts";
static char __pyx_k_logging[] = "logging";
static char __pyx_k_oagbase[] = "oagbase";
static char __pyx_k_oagqual[] = "oagqual";
static char __pyx_k_quality[] = "quality";
static char __pyx_k_readPos[] = "readPos";
static char __pyx_k_tmpName[] = "tmpName";
static char __pyx_k_tmpRead[] = "tmpRead";
static char __pyx_k_ALPToStr[] = "ALPToStr";
static char __pyx_k_KeyError[] = "KeyError";
static char __pyx_k_get_tags[] = "get_tags";
static char __pyx_k_inHandle[] = "inHandle";
static char __pyx_k_is_read1[] = "is_read1";
static char __pyx_k_is_read2[] = "is_read2";
static char __pyx_k_itemsize[] = "itemsize";
static char __pyx_k_operator[] = "operator";
static char __pyx_k_outMerge[] = "outMerge";
static char __pyx_k_printlog[] = "printlog";
static char __pyx_k_pyx_capi[] = "__pyx_capi__";
static char __pyx_k_sequence[] = "sequence";
static char __pyx_k_template[] = "template";
static char __pyx_k_tmpInt_s[] = "tmpInt: %s.";
static char __pyx_k_tostring[] = "tostring";
static char __pyx_k_CigarDict[] = "CigarDict";
static char __pyx_k_ReadIndex[] = "ReadIndex";
static char __pyx_k_TypeError[] = "TypeError";
static char __pyx_k_a_mapping[] = "a mapping";
static char __pyx_k_agreement[] = "agreement";
static char __pyx_k_fromtuple[] = "fromtuple";
static char __pyx_k_getSeqArr[] = "getSeqArr";
static char __pyx_k_itertools[] = "itertools";
static char __pyx_k_operation[] = "operation";
static char __pyx_k_outHandle[] = "outHandle";
static char __pyx_k_Didn_t_die[] = "Didn't die";
static char __pyx_k_GL000191_1[] = "GL000191.1";
static char __pyx_k_GL000192_1[] = "GL000192.1";
static char __pyx_k_GL000193_1[] = "GL000193.1";
static char __pyx_k_GL000194_1[] = "GL000194.1";
static char __pyx_k_GL000195_1[] = "GL000195.1";
static char __pyx_k_GL000196_1[] = "GL000196.1";
static char __pyx_k_GL000197_1[] = "GL000197.1";
static char __pyx_k_GL000198_1[] = "GL000198.1";
static char __pyx_k_GL000199_1[] = "GL000199.1";
static char __pyx_k_GL000200_1[] = "GL000200.1";
static char __pyx_k_GL000201_1[] = "GL000201.1";
static char __pyx_k_GL000202_1[] = "GL000202.1";
static char __pyx_k_GL000203_1[] = "GL000203.1";
static char __pyx_k_GL000204_1[] = "GL000204.1";
static char __pyx_k_GL000205_1[] = "GL000205.1";
static char __pyx_k_GL000206_1[] = "GL000206.1";
static char __pyx_k_GL000207_1[] = "GL000207.1";
static char __pyx_k_GL000208_1[] = "GL000208.1";
static char __pyx_k_GL000209_1[] = "GL000209.1";
static char __pyx_k_GL000210_1[] = "GL000210.1";
static char __pyx_k_GL000211_1[] = "GL000211.1";
static char __pyx_k_GL000212_1[] = "GL000212.1";
static char __pyx_k_GL000213_1[] = "GL000213.1";
static char __pyx_k_GL000214_1[] = "GL000214.1";
static char __pyx_k_GL000215_1[] = "GL000215.1";
static char __pyx_k_GL000216_1[] = "GL000216.1";
static char __pyx_k_GL000217_1[] = "GL000217.1";
static char __pyx_k_GL000218_1[] = "GL000218.1";
static char __pyx_k_GL000219_1[] = "GL000219.1";
static char __pyx_k_GL000220_1[] = "GL000220.1";
static char __pyx_k_GL000221_1[] = "GL000221.1";
static char __pyx_k_GL000222_1[] = "GL000222.1";
static char __pyx_k_GL000223_1[] = "GL000223.1";
static char __pyx_k_GL000224_1[] = "GL000224.1";
static char __pyx_k_GL000225_1[] = "GL000225.1";
static char __pyx_k_GL000226_1[] = "GL000226.1";
static char __pyx_k_GL000227_1[] = "GL000227.1";
static char __pyx_k_GL000228_1[] = "GL000228.1";
static char __pyx_k_GL000229_1[] = "GL000229.1";
static char __pyx_k_GL000230_1[] = "GL000230.1";
static char __pyx_k_GL000231_1[] = "GL000231.1";
static char __pyx_k_GL000232_1[] = "GL000232.1";
static char __pyx_k_GL000233_1[] = "GL000233.1";
static char __pyx_k_GL000234_1[] = "GL000234.1";
static char __pyx_k_GL000235_1[] = "GL000235.1";
static char __pyx_k_GL000236_1[] = "GL000236.1";
static char __pyx_k_GL000237_1[] = "GL000237.1";
static char __pyx_k_GL000238_1[] = "GL000238.1";
static char __pyx_k_GL000239_1[] = "GL000239.1";
static char __pyx_k_GL000240_1[] = "GL000240.1";
static char __pyx_k_GL000241_1[] = "GL000241.1";
static char __pyx_k_GL000242_1[] = "GL000242.1";
static char __pyx_k_GL000243_1[] = "GL000243.1";
static char __pyx_k_GL000244_1[] = "GL000244.1";
static char __pyx_k_GL000245_1[] = "GL000245.1";
static char __pyx_k_GL000246_1[] = "GL000246.1";
static char __pyx_k_GL000247_1[] = "GL000247.1";
static char __pyx_k_GL000248_1[] = "GL000248.1";
static char __pyx_k_GL000249_1[] = "GL000249.1";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_attrgetter[] = "attrgetter";
static char __pyx_k_check_call[] = "check_call";
static char __pyx_k_is_reverse[] = "is_reverse";
static char __pyx_k_itemgetter[] = "itemgetter";
static char __pyx_k_itervalues[] = "itervalues";
static char __pyx_k_newSamRead[] = "newSamRead";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_query_name[] = "query_name";
static char __pyx_k_readLength[] = "readLength";
static char __pyx_k_subprocess[] = "subprocess";
static char __pyx_k_testLayout[] = "testLayout";
static char __pyx_k_ImportError[] = "ImportError";
static char __pyx_k_MemoryError[] = "MemoryError";
static char __pyx_k_cigarstring[] = "cigarstring";
static char __pyx_k_firstMapped[] = "firstMapped";
static char __pyx_k_getFAString[] = "getFAString";
static char __pyx_k_getPVString[] = "getPVString";
static char __pyx_k_lambda1None[] = "lambda1None";
static char __pyx_k_mergeAgreed[] = "mergeAgreed";
static char __pyx_k_posIsMapped[] = "posIsMapped";
static char __pyx_k_CigarStrDict[] = "CigarStrDict";
static char __pyx_k_IndexedReads[] = "IndexedReads";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_getAgreement[] = "getAgreement";
static char __pyx_k_is_secondary[] = "is_secondary";
static char __pyx_k_methodcaller[] = "methodcaller";
static char __pyx_k_reference_id[] = "reference_id";
static char __pyx_k_AlignmentFile[] = "AlignmentFile";
static char __pyx_k_ThisIsMadness[] = "ThisIsMadness";
static char __pyx_k_aligned_pairs[] = "aligned_pairs";
static char __pyx_k_getOperations[] = "getOperations";
static char __pyx_k_getQualString[] = "getQualString";
static char __pyx_k_AlignedSegment[] = "AlignedSegment";
static char __pyx_k_AssertionError[] = "AssertionError";
static char __pyx_k_New_SAM_read_s[] = "New SAM read: %s";
static char __pyx_k_getCigarString[] = "getCigarString";
static char __pyx_k_is_proper_pair[] = "is_proper_pair";
static char __pyx_k_outHandleMerge[] = "outHandleMerge";
static char __pyx_k_testLayout_bam[] = ".testLayout.bam";
static char __pyx_k_Merging_Layouts[] = "Merging Layouts";
static char __pyx_k_query_qualities[] = "query_qualities";
static char __pyx_k_is_supplementary[] = "is_supplementary";
static char __pyx_k_utilBMF_HTSUtils[] = "utilBMF.HTSUtils";
static char __pyx_k_NotImplementedError[] = "NotImplementedError";
static char __pyx_k_getFirstMappedRefPos[] = "getFirstMappedRefPos";
static char __pyx_k_Expected_16s_got_200s[] = "Expected %.16s, got %.200s";
static char __pyx_k_ImproperArgumentError[] = "ImproperArgumentError";
static char __pyx_k_Making_Layout1_object[] = "Making Layout1 object.";
static char __pyx_k_MergePairedAlignments[] = "MergePairedAlignments";
static char __pyx_k_utilBMF_ErrorHandling[] = "utilBMF.ErrorHandling";
static char __pyx_k_And_neither_did_writing[] = "And neither did writing!";
static char __pyx_k_Assigning_read_to_read2[] = "Assigning read to read2";
static char __pyx_k_Watch_out_FA_tag_not_set[] = "Watch out - FA tag not set.";
static char __pyx_k_Watch_out_PV_tag_not_set[] = "Watch out - PV tag not set.";
static char __pyx_k_Str_of_BT_with_key_s_is_s[] = "Str of BT with key %s is %s";
static char __pyx_k_Tested_if_it_was_supp_2nd[] = "Tested if it was supp/2nd";
static char __pyx_k_Repr_of_read_align_pairs_s[] = "Repr of read.align_pairs: %s";
static char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static char __pyx_k_Not_a_proper_pair_continuing[] = "Not a proper pair, continuing.";
static char __pyx_k_readLength_not_set_inferring[] = "readLength not set - inferring.";
static char __pyx_k_About_to_test_if_they_overlap[] = "About to test if they overlap.";
static char __pyx_k_Begging_MergeLayouts_in_place[] = "Begging MergeLayouts_in_place";
static char __pyx_k_utilBMF_MergePairedAlignments[] = "utilBMF.MergePairedAlignments";
static char __pyx_k_is_unmapped_no_such_thing_as_a[] = " is unmapped - no such thing as a layout length!";
static char __pyx_k_Merging_didn_t_break_everything[] = "Merging didn't break everything!";
static char __pyx_k_Read_is_neither_read_1_nor_read[] = "Read is neither read 1 nor read 2: %s";
static char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_yggdrasil_workspace_BMFTools_ut[] = "/yggdrasil/workspace/BMFTools/utilBMF/MergePairedAlignments.pyx";
static char __pyx_k_ArrayLayout_has_no_M_cigar_opera[] = "ArrayLayout has no 'M' cigar operation positions. This read can't be layed out\077\077?";
static char __pyx_k_Bam_is_either_not_name_sorted_or[] = "Bam is either not name sorted or you are missing a read from the pair around read # %s in the bam.";
static char __pyx_k_Bam_record_merge_failed_write_or[] = "Bam record merge failed, write original reads to file.";
static char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_I_am_now_continuing_over_this_re[] = "I am now continuing over this record in MPA for 2nd/Supp.";
static char __pyx_k_Layouts_made_now_trying_to_merge[] = "Layouts made, now trying to merge. About to assert shared names.";
static char __pyx_k_No_value_specified_for_struct_at[] = "No value specified for struct attribute 'pos'";
static char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static char __pyx_k_Only_MIDS_cigar_operations_curre[] = "Only MIDS cigar operations currently supported. If you have an application that could use further support, please contact me.";
static char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static char __pyx_k_read1_query_name_s_read2_query_n[] = "read1.query_name: %s. read2.query_name: %s";
static char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static char __pyx_k_I_am_now_continuing_over_this_re_2[] = "I am now continuing over this record in MPA because it's read1.";
static char __pyx_k_No_value_specified_for_struct_at_2[] = "No value specified for struct attribute 'readPos'";
static char __pyx_k_No_value_specified_for_struct_at_3[] = "No value specified for struct attribute 'quality'";
static char __pyx_k_No_value_specified_for_struct_at_4[] = "No value specified for struct attribute 'agreement'";
static char __pyx_k_No_value_specified_for_struct_at_5[] = "No value specified for struct attribute 'operation'";
static char __pyx_k_No_value_specified_for_struct_at_6[] = "No value specified for struct attribute 'base'";
static char __pyx_k_No_value_specified_for_struct_at_7[] = "No value specified for struct attribute 'mergeAgreed'";
static PyObject *__pyx_kp_s_0;
static PyObject *__pyx_kp_s_0_9;
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_10;
static PyObject *__pyx_kp_s_11;
static PyObject *__pyx_kp_s_12;
static PyObject *__pyx_kp_s_13;
static PyObject *__pyx_kp_s_14;
static PyObject *__pyx_kp_s_15;
static PyObject *__pyx_kp_s_16;
static PyObject *__pyx_kp_s_17;
static PyObject *__pyx_kp_s_18;
static PyObject *__pyx_kp_s_19;
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_kp_s_20;
static PyObject *__pyx_kp_s_21;
static PyObject *__pyx_kp_s_22;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_kp_s_5;
static PyObject *__pyx_kp_s_6;
static PyObject *__pyx_kp_s_7;
static PyObject *__pyx_kp_s_8;
static PyObject *__pyx_kp_s_9;
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_n_s_ALPToStr;
static PyObject *__pyx_kp_s_A_Z;
static PyObject *__pyx_kp_s_About_to_test_if_they_overlap;
static PyObject *__pyx_n_s_AlignedSegment;
static PyObject *__pyx_n_s_AlignmentFile;
static PyObject *__pyx_kp_s_And_neither_did_writing;
static PyObject *__pyx_kp_s_ArrayLayout_has_no_M_cigar_opera;
static PyObject *__pyx_n_s_AssertionError;
static PyObject *__pyx_kp_s_Assigning_read_to_read2;
static PyObject *__pyx_n_s_B;
static PyObject *__pyx_n_s_BamTag;
static PyObject *__pyx_kp_s_Bam_is_either_not_name_sorted_or;
static PyObject *__pyx_kp_s_Bam_record_merge_failed_write_or;
static PyObject *__pyx_kp_s_Begging_MergeLayouts_in_place;
static PyObject *__pyx_n_s_Bool;
static PyObject *__pyx_n_s_C;
static PyObject *__pyx_n_s_CigarDict;
static PyObject *__pyx_n_s_CigarStrDict;
static PyObject *__pyx_n_s_D;
static PyObject *__pyx_n_s_DEBUG;
static PyObject *__pyx_n_s_DG;
static PyObject *__pyx_n_s_DR;
static PyObject *__pyx_kp_s_Didn_t_die;
static PyObject *__pyx_n_s_E;
static PyObject *__pyx_n_s_F;
static PyObject *__pyx_n_s_FA;
static PyObject *__pyx_n_s_FM;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_G;
static PyObject *__pyx_kp_s_GL000191_1;
static PyObject *__pyx_kp_s_GL000192_1;
static PyObject *__pyx_kp_s_GL000193_1;
static PyObject *__pyx_kp_s_GL000194_1;
static PyObject *__pyx_kp_s_GL000195_1;
static PyObject *__pyx_kp_s_GL000196_1;
static PyObject *__pyx_kp_s_GL000197_1;
static PyObject *__pyx_kp_s_GL000198_1;
static PyObject *__pyx_kp_s_GL000199_1;
static PyObject *__pyx_kp_s_GL000200_1;
static PyObject *__pyx_kp_s_GL000201_1;
static PyObject *__pyx_kp_s_GL000202_1;
static PyObject *__pyx_kp_s_GL000203_1;
static PyObject *__pyx_kp_s_GL000204_1;
static PyObject *__pyx_kp_s_GL000205_1;
static PyObject *__pyx_kp_s_GL000206_1;
static PyObject *__pyx_kp_s_GL000207_1;
static PyObject *__pyx_kp_s_GL000208_1;
static PyObject *__pyx_kp_s_GL000209_1;
static PyObject *__pyx_kp_s_GL000210_1;
static PyObject *__pyx_kp_s_GL000211_1;
static PyObject *__pyx_kp_s_GL000212_1;
static PyObject *__pyx_kp_s_GL000213_1;
static PyObject *__pyx_kp_s_GL000214_1;
static PyObject *__pyx_kp_s_GL000215_1;
static PyObject *__pyx_kp_s_GL000216_1;
static PyObject *__pyx_kp_s_GL000217_1;
static PyObject *__pyx_kp_s_GL000218_1;
static PyObject *__pyx_kp_s_GL000219_1;
static PyObject *__pyx_kp_s_GL000220_1;
static PyObject *__pyx_kp_s_GL000221_1;
static PyObject *__pyx_kp_s_GL000222_1;
static PyObject *__pyx_kp_s_GL000223_1;
static PyObject *__pyx_kp_s_GL000224_1;
static PyObject *__pyx_kp_s_GL000225_1;
static PyObject *__pyx_kp_s_GL000226_1;
static PyObject *__pyx_kp_s_GL000227_1;
static PyObject *__pyx_kp_s_GL000228_1;
static PyObject *__pyx_kp_s_GL000229_1;
static PyObject *__pyx_kp_s_GL000230_1;
static PyObject *__pyx_kp_s_GL000231_1;
static PyObject *__pyx_kp_s_GL000232_1;
static PyObject *__pyx_kp_s_GL000233_1;
static PyObject *__pyx_kp_s_GL000234_1;
static PyObject *__pyx_kp_s_GL000235_1;
static PyObject *__pyx_kp_s_GL000236_1;
static PyObject *__pyx_kp_s_GL000237_1;
static PyObject *__pyx_kp_s_GL000238_1;
static PyObject *__pyx_kp_s_GL000239_1;
static PyObject *__pyx_kp_s_GL000240_1;
static PyObject *__pyx_kp_s_GL000241_1;
static PyObject *__pyx_kp_s_GL000242_1;
static PyObject *__pyx_kp_s_GL000243_1;
static PyObject *__pyx_kp_s_GL000244_1;
static PyObject *__pyx_kp_s_GL000245_1;
static PyObject *__pyx_kp_s_GL000246_1;
static PyObject *__pyx_kp_s_GL000247_1;
static PyObject *__pyx_kp_s_GL000248_1;
static PyObject *__pyx_kp_s_GL000249_1;
static PyObject *__pyx_n_s_H;
static PyObject *__pyx_n_s_I;
static PyObject *__pyx_kp_s_I_am_now_continuing_over_this_re;
static PyObject *__pyx_kp_s_I_am_now_continuing_over_this_re_2;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_ImproperArgumentError;
static PyObject *__pyx_n_s_IndexedReads;
static PyObject *__pyx_n_s_J;
static PyObject *__pyx_n_s_K;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_L;
static PyObject *__pyx_n_s_Layout1;
static PyObject *__pyx_n_s_Layout2;
static PyObject *__pyx_kp_s_Layouts_made_now_trying_to_merge;
static PyObject *__pyx_n_s_List;
static PyObject *__pyx_n_s_M;
static PyObject *__pyx_n_s_MA;
static PyObject *__pyx_n_s_MP;
static PyObject *__pyx_kp_s_MPA_RAN;
static PyObject *__pyx_n_s_MT;
static PyObject *__pyx_kp_s_Making_Layout1_object;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_n_s_MergePairedAlignments;
static PyObject *__pyx_kp_s_Merging_Layouts;
static PyObject *__pyx_kp_s_Merging_didn_t_break_everything;
static PyObject *__pyx_n_s_N;
static PyObject *__pyx_kp_s_Name_s;
static PyObject *__pyx_kp_s_New_SAM_read_s;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_2;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_3;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_4;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_5;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_6;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_7;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_kp_s_Not_a_proper_pair_continuing;
static PyObject *__pyx_n_s_O;
static PyObject *__pyx_kp_s_Only_MIDS_cigar_operations_curre;
static PyObject *__pyx_n_s_P;
static PyObject *__pyx_n_s_PM;
static PyObject *__pyx_n_s_PV;
static PyObject *__pyx_n_s_Q;
static PyObject *__pyx_n_s_R;
static PyObject *__pyx_n_s_ReadIndex;
static PyObject *__pyx_kp_s_Read_is_neither_read_1_nor_read;
static PyObject *__pyx_kp_s_Repr_of_read_align_pairs_s;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_S;
static PyObject *__pyx_kp_s_Str_of_BT_with_key_s_is_s;
static PyObject *__pyx_n_s_T;
static PyObject *__pyx_kp_s_Tested_if_it_was_supp_2nd;
static PyObject *__pyx_n_s_ThisIsMadness;
static PyObject *__pyx_n_s_TrimExt;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_U;
static PyObject *__pyx_n_s_V;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_W;
static PyObject *__pyx_kp_s_Watch_out_FA_tag_not_set;
static PyObject *__pyx_kp_s_Watch_out_PV_tag_not_set;
static PyObject *__pyx_n_s_X;
static PyObject *__pyx_n_s_Y;
static PyObject *__pyx_n_s_Z;
static PyObject *__pyx_kp_s__11;
static PyObject *__pyx_kp_s__12;
static PyObject *__pyx_kp_s__15;
static PyObject *__pyx_kp_s__17;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_kp_s__20;
static PyObject *__pyx_kp_s__28;
static PyObject *__pyx_kp_s__29;
static PyObject *__pyx_kp_s__30;
static PyObject *__pyx_kp_s__31;
static PyObject *__pyx_kp_s__32;
static PyObject *__pyx_kp_s__33;
static PyObject *__pyx_kp_s__34;
static PyObject *__pyx_kp_s__35;
static PyObject *__pyx_kp_s__36;
static PyObject *__pyx_kp_s__37;
static PyObject *__pyx_kp_s__38;
static PyObject *__pyx_kp_s__39;
static PyObject *__pyx_kp_s__40;
static PyObject *__pyx_kp_s__41;
static PyObject *__pyx_kp_s__42;
static PyObject *__pyx_kp_s__43;
static PyObject *__pyx_kp_s__44;
static PyObject *__pyx_kp_s__45;
static PyObject *__pyx_kp_s__46;
static PyObject *__pyx_kp_s__47;
static PyObject *__pyx_kp_s__48;
static PyObject *__pyx_kp_s__49;
static PyObject *__pyx_kp_s__50;
static PyObject *__pyx_n_s__51;
static PyObject *__pyx_kp_s__52;
static PyObject *__pyx_kp_s__53;
static PyObject *__pyx_kp_s__54;
static PyObject *__pyx_kp_s__55;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_agreement;
static PyObject *__pyx_n_s_aligned_pairs;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_astype;
static PyObject *__pyx_n_s_attrgetter;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_build;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_char;
static PyObject *__pyx_n_s_check_call;
static PyObject *__pyx_n_s_chr;
static PyObject *__pyx_n_s_cigar;
static PyObject *__pyx_n_s_cigarstring;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_e;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_find;
static PyObject *__pyx_n_s_firstMapped;
static PyObject *__pyx_n_s_flag;
static PyObject *__pyx_n_s_fromtuple;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_getAgreement;
static PyObject *__pyx_n_s_getCigarString;
static PyObject *__pyx_n_s_getFAString;
static PyObject *__pyx_n_s_getFirstMappedRefPos;
static PyObject *__pyx_n_s_getFlag;
static PyObject *__pyx_n_s_getOperations;
static PyObject *__pyx_n_s_getPVString;
static PyObject *__pyx_n_s_getQual;
static PyObject *__pyx_n_s_getQualString;
static PyObject *__pyx_n_s_getSeq;
static PyObject *__pyx_n_s_getSeqArr;
static PyObject *__pyx_n_s_get_tags;
static PyObject *__pyx_n_s_groupby;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_n_s_header;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_inBAM;
static PyObject *__pyx_n_s_inHandle;
static PyObject *__pyx_n_s_int16;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_int8;
static PyObject *__pyx_n_s_is_proper_pair;
static PyObject *__pyx_n_s_is_read1;
static PyObject *__pyx_n_s_is_read2;
static PyObject *__pyx_n_s_is_reverse;
static PyObject *__pyx_n_s_is_secondary;
static PyObject *__pyx_n_s_is_supplementary;
static PyObject *__pyx_kp_s_is_unmapped_no_such_thing_as_a;
static PyObject *__pyx_n_s_itemgetter;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_itervalues;
static PyObject *__pyx_n_s_izip;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_l;
static PyObject *__pyx_n_s_lambda1None;
static PyObject *__pyx_n_s_layout;
static PyObject *__pyx_n_s_layouts;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_n_s_level;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_map;
static PyObject *__pyx_n_s_mapq;
static PyObject *__pyx_n_s_maxint;
static PyObject *__pyx_n_s_mc;
static PyObject *__pyx_n_s_mergeAgreed;
static PyObject *__pyx_n_s_methodcaller;
static PyObject *__pyx_n_s_mp;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_newSamRead;
static PyObject *__pyx_n_s_next;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_o;
static PyObject *__pyx_n_s_oag;
static PyObject *__pyx_n_s_oagag;
static PyObject *__pyx_n_s_oagbase;
static PyObject *__pyx_n_s_oagop;
static PyObject *__pyx_n_s_oagqual;
static PyObject *__pyx_n_s_oagsk;
static PyObject *__pyx_n_s_oagtag;
static PyObject *__pyx_n_s_oig;
static PyObject *__pyx_n_s_oig0;
static PyObject *__pyx_n_s_oig1;
static PyObject *__pyx_n_s_om;
static PyObject *__pyx_n_s_operation;
static PyObject *__pyx_n_s_operator;
static PyObject *__pyx_n_s_opt;
static PyObject *__pyx_n_s_ord;
static PyObject *__pyx_n_s_ot;
static PyObject *__pyx_n_s_outBAM;
static PyObject *__pyx_n_s_outHandle;
static PyObject *__pyx_n_s_outHandleMerge;
static PyObject *__pyx_n_s_outMerge;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_pl;
static PyObject *__pyx_n_s_pnext;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_n_s_posIsMapped;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_printlog;
static PyObject *__pyx_n_s_pysam;
static PyObject *__pyx_n_s_pyx_capi;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_q;
static PyObject *__pyx_n_s_quality;
static PyObject *__pyx_n_s_query_name;
static PyObject *__pyx_n_s_query_qualities;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rb;
static PyObject *__pyx_n_s_re;
static PyObject *__pyx_n_s_re2;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_kp_s_read1_query_name_s_read2_query_n;
static PyObject *__pyx_n_s_readLength;
static PyObject *__pyx_kp_s_readLength_not_set_inferring;
static PyObject *__pyx_n_s_readPos;
static PyObject *__pyx_kp_s_read_2;
static PyObject *__pyx_n_s_read_3;
static PyObject *__pyx_n_s_rec;
static PyObject *__pyx_n_s_reference_id;
static PyObject *__pyx_n_s_rsplit;
static PyObject *__pyx_kp_s_s;
static PyObject *__pyx_kp_s_sD;
static PyObject *__pyx_kp_s_sI;
static PyObject *__pyx_kp_s_sM;
static PyObject *__pyx_kp_s_sS;
static PyObject *__pyx_n_s_s_2;
static PyObject *__pyx_kp_s_s_s;
static PyObject *__pyx_kp_s_s_s_s;
static PyObject *__pyx_n_s_sam;
static PyObject *__pyx_n_s_seq;
static PyObject *__pyx_n_s_sequence;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_stdout;
static PyObject *__pyx_n_s_subprocess;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_tag;
static PyObject *__pyx_n_s_template;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_testLayout;
static PyObject *__pyx_kp_s_testLayout_bam;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_tlen;
static PyObject *__pyx_kp_s_tmpInt_s;
static PyObject *__pyx_n_s_tmpName;
static PyObject *__pyx_n_s_tmpRead;
static PyObject *__pyx_n_s_tostring;
static PyObject *__pyx_n_s_u;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_utilBMF_ErrorHandling;
static PyObject *__pyx_n_s_utilBMF_HTSUtils;
static PyObject *__pyx_n_s_utilBMF_MergePairedAlignments;
static PyObject *__pyx_n_s_uuid;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_wb;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_kp_s_yggdrasil_workspace_BMFTools_ut;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_7;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_61;
static PyObject *__pyx_int_68;
static PyObject *__pyx_int_72;
static PyObject *__pyx_int_73;
static PyObject *__pyx_int_77;
static PyObject *__pyx_int_78;
static PyObject *__pyx_int_80;
static PyObject *__pyx_int_83;
static PyObject *__pyx_int_88;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__21;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_codeobj__72;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__76;
static PyObject *__pyx_codeobj__78;
PyObject *__pyx_v_7utilBMF_21MergePairedAlignments_CigarDict = 0;
PyObject *__pyx_v_7utilBMF_21MergePairedAlignments_CigarStrDict = 0;

/* "utilBMF/MergePairedAlignments.pyx":60
 *     Used to strongly type return type of a list and a bool
 *     """
 *     def __cinit__(self, list List, bint Bool):             # <<<<<<<<<<<<<<
 *         self.List = List
 *         self.Bool = Bool
 */

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_8ListBool_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_8ListBool_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_List = 0;
  int __pyx_v_Bool;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_List,&__pyx_n_s_Bool,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_List)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Bool)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_List = ((PyObject*)values[0]);
    __pyx_v_Bool = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_Bool == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.ListBool.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_List), (&PyList_Type), 1, "List", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_8ListBool___cinit__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_ListBool *)__pyx_v_self), __pyx_v_List, __pyx_v_Bool);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_8ListBool___cinit__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_ListBool *__pyx_v_self, PyObject *__pyx_v_List, int __pyx_v_Bool) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "utilBMF/MergePairedAlignments.pyx":61
 *     """
 *     def __cinit__(self, list List, bint Bool):
 *         self.List = List             # <<<<<<<<<<<<<<
 *         self.Bool = Bool
 * 
 */
  __Pyx_INCREF(__pyx_v_List);
  __Pyx_GIVEREF(__pyx_v_List);
  __Pyx_GOTREF(__pyx_v_self->List);
  __Pyx_DECREF(__pyx_v_self->List);
  __pyx_v_self->List = __pyx_v_List;

  /* "utilBMF/MergePairedAlignments.pyx":62
 *     def __cinit__(self, list List, bint Bool):
 *         self.List = List
 *         self.Bool = Bool             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->Bool = __pyx_v_Bool;

  /* "utilBMF/MergePairedAlignments.pyx":60
 *     Used to strongly type return type of a list and a bool
 *     """
 *     def __cinit__(self, list List, bint Bool):             # <<<<<<<<<<<<<<
 *         self.List = List
 *         self.Bool = Bool
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":66
 * 
 * @cython.returns(bint)
 * def lambda1None(tuple i):             # <<<<<<<<<<<<<<
 *     """
 *     If a tuple in a cigar returns true for this function,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_1lambda1None(PyObject *__pyx_self, PyObject *__pyx_v_i); /*proto*/
static char __pyx_doc_7utilBMF_21MergePairedAlignments_lambda1None[] = "\n    If a tuple in a cigar returns true for this function,\n    then that base is either deleted or soft-clipped, which\n    you can tell based on whether it is in the middle or the end of a read.\n    ";
static PyMethodDef __pyx_mdef_7utilBMF_21MergePairedAlignments_1lambda1None = {"lambda1None", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_1lambda1None, METH_O, __pyx_doc_7utilBMF_21MergePairedAlignments_lambda1None};
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_1lambda1None(PyObject *__pyx_self, PyObject *__pyx_v_i) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1None (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_i), (&PyTuple_Type), 1, "i", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_lambda1None(__pyx_self, ((PyObject*)__pyx_v_i));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_lambda1None(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda1None", 0);

  /* "utilBMF/MergePairedAlignments.pyx":72
 *     you can tell based on whether it is in the middle or the end of a read.
 *     """
 *     return i[1] is None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_i == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = (PyTuple_GET_ITEM(__pyx_v_i, 1) == Py_None);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":66
 * 
 * @cython.returns(bint)
 * def lambda1None(tuple i):             # <<<<<<<<<<<<<<
 *     """
 *     If a tuple in a cigar returns true for this function,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.lambda1None", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":76
 * 
 * @cython.returns(int)
 * def getFirstMappedRefPos(AlignedSegment_t rec):             # <<<<<<<<<<<<<<
 *     cdef tuple i
 *     return [i for i in rec.aligned_pairs if i[1] is not None][0][1]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_3getFirstMappedRefPos(PyObject *__pyx_self, PyObject *__pyx_v_rec); /*proto*/
static PyMethodDef __pyx_mdef_7utilBMF_21MergePairedAlignments_3getFirstMappedRefPos = {"getFirstMappedRefPos", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_3getFirstMappedRefPos, METH_O, 0};
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_3getFirstMappedRefPos(PyObject *__pyx_self, PyObject *__pyx_v_rec) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFirstMappedRefPos (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rec), __pyx_ptype_5pysam_14calignmentfile_AlignedSegment, 1, "rec", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_2getFirstMappedRefPos(__pyx_self, ((__pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t)__pyx_v_rec));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_2getFirstMappedRefPos(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t __pyx_v_rec) {
  PyObject *__pyx_v_i = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFirstMappedRefPos", 0);

  /* "utilBMF/MergePairedAlignments.pyx":78
 * def getFirstMappedRefPos(AlignedSegment_t rec):
 *     cdef tuple i
 *     return [i for i in rec.aligned_pairs if i[1] is not None][0][1]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rec), __pyx_n_s_aligned_pairs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (!(likely(PyTuple_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_i, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;
    if (unlikely(__pyx_v_i == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_6 = (PyTuple_GET_ITEM(__pyx_v_i, 1) != Py_None);
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_v_i))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(PyList_GET_ITEM(__pyx_t_1, 0), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":76
 * 
 * @cython.returns(int)
 * def getFirstMappedRefPos(AlignedSegment_t rec):             # <<<<<<<<<<<<<<
 *     cdef tuple i
 *     return [i for i in rec.aligned_pairs if i[1] is not None][0][1]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.getFirstMappedRefPos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":101
 *     """
 * 
 *     def __cinit__(self, AlignedSegment_t read):             # <<<<<<<<<<<<<<
 *         cdef int i, x0, x1
 *         cdef LayoutLen = len(read.aligned_pairs)
 */

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t __pyx_v_read = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_read,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_read)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_read = ((__pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_read), __pyx_ptype_5pysam_14calignmentfile_AlignedSegment, 1, "read", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout___cinit__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self), __pyx_v_read);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout___cinit__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, __pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t __pyx_v_read) {
  PyObject *__pyx_v_LayoutLen = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayout_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "utilBMF/MergePairedAlignments.pyx":103
 *     def __cinit__(self, AlignedSegment_t read):
 *         cdef int i, x0, x1
 *         cdef LayoutLen = len(read.aligned_pairs)             # <<<<<<<<<<<<<<
 *         self.Layout = ArrayLayout(layouts=<ArrayLayoutPos_t *>malloc(
 *             LayoutLen * (sizeof(ArrayLayoutPos_t))), length=LayoutLen)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_aligned_pairs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_LayoutLen = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":105
 *         cdef LayoutLen = len(read.aligned_pairs)
 *         self.Layout = ArrayLayout(layouts=<ArrayLayoutPos_t *>malloc(
 *             LayoutLen * (sizeof(ArrayLayoutPos_t))), length=LayoutLen)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, AlignedSegment_t read):
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_LayoutLen, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":104
 *         cdef int i, x0, x1
 *         cdef LayoutLen = len(read.aligned_pairs)
 *         self.Layout = ArrayLayout(layouts=<ArrayLayoutPos_t *>malloc(             # <<<<<<<<<<<<<<
 *             LayoutLen * (sizeof(ArrayLayoutPos_t))), length=LayoutLen)
 * 
 */
  __pyx_t_3.layouts = ((__pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t *)malloc(__pyx_t_5));

  /* "utilBMF/MergePairedAlignments.pyx":105
 *         cdef LayoutLen = len(read.aligned_pairs)
 *         self.Layout = ArrayLayout(layouts=<ArrayLayoutPos_t *>malloc(
 *             LayoutLen * (sizeof(ArrayLayoutPos_t))), length=LayoutLen)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, AlignedSegment_t read):
 */
  __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_LayoutLen); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3.length = __pyx_t_5;

  /* "utilBMF/MergePairedAlignments.pyx":104
 *         cdef int i, x0, x1
 *         cdef LayoutLen = len(read.aligned_pairs)
 *         self.Layout = ArrayLayout(layouts=<ArrayLayoutPos_t *>malloc(             # <<<<<<<<<<<<<<
 *             LayoutLen * (sizeof(ArrayLayoutPos_t))), length=LayoutLen)
 * 
 */
  __pyx_v_self->Layout = __pyx_t_3;

  /* "utilBMF/MergePairedAlignments.pyx":101
 *     """
 * 
 *     def __cinit__(self, AlignedSegment_t read):             # <<<<<<<<<<<<<<
 *         cdef int i, x0, x1
 *         cdef LayoutLen = len(read.aligned_pairs)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_LayoutLen);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":107
 *             LayoutLen * (sizeof(ArrayLayoutPos_t))), length=LayoutLen)
 * 
 *     def __init__(self, AlignedSegment_t read):             # <<<<<<<<<<<<<<
 *         # C Definitions
 *         cdef char CigarOp, CigarOpLen
 */

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t __pyx_v_read = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_read,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_read)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_read = ((__pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_read), __pyx_ptype_5pysam_14calignmentfile_AlignedSegment, 1, "read", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_2__init__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self), __pyx_v_read);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_2__init__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, __pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t __pyx_v_read) {
  char __pyx_v_CigarOp;
  char __pyx_v_CigarOpLen;
  int __pyx_v_tmpInt;
  int __pyx_v_offset;
  int __pyx_v_readPos;
  PyArrayObject *__pyx_v_quals = 0;
  PyArrayObject *__pyx_v_agrees = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_agrees;
  __Pyx_Buffer __pyx_pybuffer_agrees;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_quals;
  __Pyx_Buffer __pyx_pybuffer_quals;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_7utilBMF_21MergePairedAlignments_uchar __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  Py_ssize_t __pyx_t_18;
  int __pyx_t_19;
  PyObject *(*__pyx_t_20)(PyObject *);
  int __pyx_t_21;
  PyObject *(*__pyx_t_22)(PyObject *);
  char __pyx_t_23;
  char __pyx_t_24;
  int __pyx_t_25;
  int __pyx_t_26;
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t __pyx_t_27;
  uint16_t __pyx_t_28;
  int __pyx_t_29;
  int __pyx_t_30;
  int __pyx_t_31;
  int __pyx_t_32;
  int __pyx_t_33;
  int __pyx_t_34;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __pyx_pybuffer_quals.pybuffer.buf = NULL;
  __pyx_pybuffer_quals.refcount = 0;
  __pyx_pybuffernd_quals.data = NULL;
  __pyx_pybuffernd_quals.rcbuffer = &__pyx_pybuffer_quals;
  __pyx_pybuffer_agrees.pybuffer.buf = NULL;
  __pyx_pybuffer_agrees.refcount = 0;
  __pyx_pybuffernd_agrees.data = NULL;
  __pyx_pybuffernd_agrees.rcbuffer = &__pyx_pybuffer_agrees;

  /* "utilBMF/MergePairedAlignments.pyx":110
 *         # C Definitions
 *         cdef char CigarOp, CigarOpLen
 *         cdef int tmpInt = 0             # <<<<<<<<<<<<<<
 *         cdef int offset = 0
 *         cdef int readPos = 0
 */
  __pyx_v_tmpInt = 0;

  /* "utilBMF/MergePairedAlignments.pyx":111
 *         cdef char CigarOp, CigarOpLen
 *         cdef int tmpInt = 0
 *         cdef int offset = 0             # <<<<<<<<<<<<<<
 *         cdef int readPos = 0
 *         cdef ndarray[int, ndim=1] quals, agrees
 */
  __pyx_v_offset = 0;

  /* "utilBMF/MergePairedAlignments.pyx":112
 *         cdef int tmpInt = 0
 *         cdef int offset = 0
 *         cdef int readPos = 0             # <<<<<<<<<<<<<<
 *         cdef ndarray[int, ndim=1] quals, agrees
 *         cdef ArrayLayoutPos_t tmpPos
 */
  __pyx_v_readPos = 0;

  /* "utilBMF/MergePairedAlignments.pyx":118
 * 
 *         # Parsing out base-by-base information.
 *         self.mapq = read.mapq             # <<<<<<<<<<<<<<
 *         self.firstMapped = -1
 *         try:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_mapq); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_char(__pyx_t_1); if (unlikely((__pyx_t_2 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->mapq = __pyx_t_2;

  /* "utilBMF/MergePairedAlignments.pyx":119
 *         # Parsing out base-by-base information.
 *         self.mapq = read.mapq
 *         self.firstMapped = -1             # <<<<<<<<<<<<<<
 *         try:
 *             quals = np.array(read.opt("PV").split(","), dtype=np.int32)
 */
  __pyx_v_self->firstMapped = -1;

  /* "utilBMF/MergePairedAlignments.pyx":120
 *         self.mapq = read.mapq
 *         self.firstMapped = -1
 *         try:             # <<<<<<<<<<<<<<
 *             quals = np.array(read.opt("PV").split(","), dtype=np.int32)
 *         except KeyError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "utilBMF/MergePairedAlignments.pyx":121
 *         self.firstMapped = -1
 *         try:
 *             quals = np.array(read.opt("PV").split(","), dtype=np.int32)             # <<<<<<<<<<<<<<
 *         except KeyError:
 *             pl("Watch out - PV tag not set.", level=logging.DEBUG)
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_opt); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_int32); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __pyx_t_10 = ((PyArrayObject *)__pyx_t_9);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_quals.rcbuffer->pybuffer);
        __pyx_t_11 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_quals.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_11 < 0)) {
          PyErr_Fetch(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_quals.rcbuffer->pybuffer, (PyObject*)__pyx_v_quals, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_14);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_12, __pyx_t_13, __pyx_t_14);
          }
        }
        __pyx_pybuffernd_quals.diminfo[0].strides = __pyx_pybuffernd_quals.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_quals.diminfo[0].shape = __pyx_pybuffernd_quals.rcbuffer->pybuffer.shape[0];
        if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      __pyx_t_10 = 0;
      __pyx_v_quals = ((PyArrayObject *)__pyx_t_9);
      __pyx_t_9 = 0;
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":122
 *         try:
 *             quals = np.array(read.opt("PV").split(","), dtype=np.int32)
 *         except KeyError:             # <<<<<<<<<<<<<<
 *             pl("Watch out - PV tag not set.", level=logging.DEBUG)
 *             quals = np.array(read.query_qualities, dtype=np.int32)
 */
    __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_11) {
      __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_7, &__pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_1);

      /* "utilBMF/MergePairedAlignments.pyx":123
 *             quals = np.array(read.opt("PV").split(","), dtype=np.int32)
 *         except KeyError:
 *             pl("Watch out - PV tag not set.", level=logging.DEBUG)             # <<<<<<<<<<<<<<
 *             quals = np.array(read.query_qualities, dtype=np.int32)
 *             # Let's make sure that these don't need reversal, too!
 */
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_pl); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_15 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_DEBUG); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_level, __pyx_t_16) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__4, __pyx_t_8); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

      /* "utilBMF/MergePairedAlignments.pyx":124
 *         except KeyError:
 *             pl("Watch out - PV tag not set.", level=logging.DEBUG)
 *             quals = np.array(read.query_qualities, dtype=np.int32)             # <<<<<<<<<<<<<<
 *             # Let's make sure that these don't need reversal, too!
 *         try:
 */
      __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_array); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_query_qualities); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_16);
      __pyx_t_16 = 0;
      __pyx_t_16 = PyDict_New(); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_15 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_int32); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_dtype, __pyx_t_17) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_6, __pyx_t_16); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      if (!(likely(((__pyx_t_17) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_17, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __pyx_t_10 = ((PyArrayObject *)__pyx_t_17);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_quals.rcbuffer->pybuffer);
        __pyx_t_11 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_quals.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_11 < 0)) {
          PyErr_Fetch(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_quals.rcbuffer->pybuffer, (PyObject*)__pyx_v_quals, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_14); Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_12);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_14, __pyx_t_13, __pyx_t_12);
          }
        }
        __pyx_pybuffernd_quals.diminfo[0].strides = __pyx_pybuffernd_quals.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_quals.diminfo[0].shape = __pyx_pybuffernd_quals.rcbuffer->pybuffer.shape[0];
        if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      }
      __pyx_t_10 = 0;
      __Pyx_XDECREF_SET(__pyx_v_quals, ((PyArrayObject *)__pyx_t_17));
      __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L10_try_end:;
  }

  /* "utilBMF/MergePairedAlignments.pyx":126
 *             quals = np.array(read.query_qualities, dtype=np.int32)
 *             # Let's make sure that these don't need reversal, too!
 *         try:             # <<<<<<<<<<<<<<
 *             agrees = np.array(read.opt("FA").split(","), dtype=np.int32)
 *         except KeyError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "utilBMF/MergePairedAlignments.pyx":127
 *             # Let's make sure that these don't need reversal, too!
 *         try:
 *             agrees = np.array(read.opt("FA").split(","), dtype=np.int32)             # <<<<<<<<<<<<<<
 *         except KeyError:
 *             pl("Watch out - FA tag not set.", level=logging.DEBUG)
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_opt); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_17 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_int32); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_16) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (!(likely(((__pyx_t_16) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_16, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      __pyx_t_10 = ((PyArrayObject *)__pyx_t_16);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_agrees.rcbuffer->pybuffer);
        __pyx_t_11 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_agrees.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_11 < 0)) {
          PyErr_Fetch(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_agrees.rcbuffer->pybuffer, (PyObject*)__pyx_v_agrees, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_14);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_12, __pyx_t_13, __pyx_t_14);
          }
        }
        __pyx_pybuffernd_agrees.diminfo[0].strides = __pyx_pybuffernd_agrees.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_agrees.diminfo[0].shape = __pyx_pybuffernd_agrees.rcbuffer->pybuffer.shape[0];
        if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
      }
      __pyx_t_10 = 0;
      __pyx_v_agrees = ((PyArrayObject *)__pyx_t_16);
      __pyx_t_16 = 0;
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L20_try_end;
    __pyx_L13_error:;
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":128
 *         try:
 *             agrees = np.array(read.opt("FA").split(","), dtype=np.int32)
 *         except KeyError:             # <<<<<<<<<<<<<<
 *             pl("Watch out - FA tag not set.", level=logging.DEBUG)
 *             agrees = np.array([1] * len(read.sequence), dtype=np.int32)
 */
    __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_11) {
      __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_16, &__pyx_t_9, &__pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_1);

      /* "utilBMF/MergePairedAlignments.pyx":129
 *             agrees = np.array(read.opt("FA").split(","), dtype=np.int32)
 *         except KeyError:
 *             pl("Watch out - FA tag not set.", level=logging.DEBUG)             # <<<<<<<<<<<<<<
 *             agrees = np.array([1] * len(read.sequence), dtype=np.int32)
 * 
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_pl); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_17 = PyDict_New(); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_DEBUG); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (PyDict_SetItem(__pyx_t_17, __pyx_n_s_level, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__7, __pyx_t_17); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "utilBMF/MergePairedAlignments.pyx":130
 *         except KeyError:
 *             pl("Watch out - FA tag not set.", level=logging.DEBUG)
 *             agrees = np.array([1] * len(read.sequence), dtype=np.int32)             # <<<<<<<<<<<<<<
 * 
 *         # Copy out original alignment information
 */
      __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_array); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_sequence); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_18 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_18 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyList_New(1 * ((__pyx_t_18<0) ? 0:__pyx_t_18)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      { Py_ssize_t __pyx_temp;
        for (__pyx_temp=0; __pyx_temp < __pyx_t_18; __pyx_temp++) {
          __Pyx_INCREF(__pyx_int_1);
          __Pyx_GIVEREF(__pyx_int_1);
          PyList_SET_ITEM(__pyx_t_8, __pyx_temp, __pyx_int_1);
        }
      }
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int32); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_15) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (!(likely(((__pyx_t_15) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_15, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      __pyx_t_10 = ((PyArrayObject *)__pyx_t_15);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_agrees.rcbuffer->pybuffer);
        __pyx_t_11 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_agrees.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_11 < 0)) {
          PyErr_Fetch(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_agrees.rcbuffer->pybuffer, (PyObject*)__pyx_v_agrees, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_14); Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_12);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_14, __pyx_t_13, __pyx_t_12);
          }
        }
        __pyx_pybuffernd_agrees.diminfo[0].strides = __pyx_pybuffernd_agrees.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_agrees.diminfo[0].shape = __pyx_pybuffernd_agrees.rcbuffer->pybuffer.shape[0];
        if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
      }
      __pyx_t_10 = 0;
      __Pyx_XDECREF_SET(__pyx_v_agrees, ((PyArrayObject *)__pyx_t_15));
      __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L14_exception_handled;
    }
    goto __pyx_L15_except_error;
    __pyx_L15_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L14_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    __pyx_L20_try_end:;
  }

  /* "utilBMF/MergePairedAlignments.pyx":133
 * 
 *         # Copy out original alignment information
 *         self.InitPos = read.pos             # <<<<<<<<<<<<<<
 *         self.pos = read.pos
 *         self.tlen = read.tlen
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_pos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->InitPos = __pyx_t_11;

  /* "utilBMF/MergePairedAlignments.pyx":134
 *         # Copy out original alignment information
 *         self.InitPos = read.pos
 *         self.pos = read.pos             # <<<<<<<<<<<<<<
 *         self.tlen = read.tlen
 *         self.pnext = read.pnext
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_pos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->pos = __pyx_t_11;

  /* "utilBMF/MergePairedAlignments.pyx":135
 *         self.InitPos = read.pos
 *         self.pos = read.pos
 *         self.tlen = read.tlen             # <<<<<<<<<<<<<<
 *         self.pnext = read.pnext
 *         self.flag = read.flag
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_tlen); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->tlen = __pyx_t_11;

  /* "utilBMF/MergePairedAlignments.pyx":136
 *         self.pos = read.pos
 *         self.tlen = read.tlen
 *         self.pnext = read.pnext             # <<<<<<<<<<<<<<
 *         self.flag = read.flag
 *         self.Name = read.query_name
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_pnext); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->pnext = __pyx_t_11;

  /* "utilBMF/MergePairedAlignments.pyx":137
 *         self.tlen = read.tlen
 *         self.pnext = read.pnext
 *         self.flag = read.flag             # <<<<<<<<<<<<<<
 *         self.Name = read.query_name
 *         self.reference_id = read.reference_id
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_flag); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->flag = __pyx_t_11;

  /* "utilBMF/MergePairedAlignments.pyx":138
 *         self.pnext = read.pnext
 *         self.flag = read.flag
 *         self.Name = read.query_name             # <<<<<<<<<<<<<<
 *         self.reference_id = read.reference_id
 *         self.is_reverse = read.is_reverse
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_query_name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->Name);
  __Pyx_DECREF(__pyx_v_self->Name);
  __pyx_v_self->Name = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":139
 *         self.flag = read.flag
 *         self.Name = read.query_name
 *         self.reference_id = read.reference_id             # <<<<<<<<<<<<<<
 *         self.is_reverse = read.is_reverse
 *         self.tagDict = {tag[0]: BamTag.fromtuple(tag) for tag
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_reference_id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->reference_id = __pyx_t_11;

  /* "utilBMF/MergePairedAlignments.pyx":140
 *         self.Name = read.query_name
 *         self.reference_id = read.reference_id
 *         self.is_reverse = read.is_reverse             # <<<<<<<<<<<<<<
 *         self.tagDict = {tag[0]: BamTag.fromtuple(tag) for tag
 *                         in read.get_tags() if tag[0] not in ["PV", "FA"]}
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_is_reverse); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->is_reverse = __pyx_t_19;

  /* "utilBMF/MergePairedAlignments.pyx":141
 *         self.reference_id = read.reference_id
 *         self.is_reverse = read.is_reverse
 *         self.tagDict = {tag[0]: BamTag.fromtuple(tag) for tag             # <<<<<<<<<<<<<<
 *                         in read.get_tags() if tag[0] not in ["PV", "FA"]}
 *         self.isMerged = (read.has_tag("MP") and read.opt("MP") == "T")
 */
  { /* enter inner scope */
    PyObject *__pyx_7genexpr__pyx_v_tag = NULL;
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
    __Pyx_GOTREF(__pyx_t_1);

    /* "utilBMF/MergePairedAlignments.pyx":142
 *         self.is_reverse = read.is_reverse
 *         self.tagDict = {tag[0]: BamTag.fromtuple(tag) for tag
 *                         in read.get_tags() if tag[0] not in ["PV", "FA"]}             # <<<<<<<<<<<<<<
 *         self.isMerged = (read.has_tag("MP") and read.opt("MP") == "T")
 * 
 */
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_get_tags); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_15 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_16))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_16);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_16, function);
      }
    }
    if (__pyx_t_15) {
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_15); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    } else {
      __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_t_16); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
    }
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
      __pyx_t_16 = __pyx_t_9; __Pyx_INCREF(__pyx_t_16); __pyx_t_18 = 0;
      __pyx_t_20 = NULL;
    } else {
      __pyx_t_18 = -1; __pyx_t_16 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_20 = Py_TYPE(__pyx_t_16)->tp_iternext; if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    for (;;) {
      if (likely(!__pyx_t_20)) {
        if (likely(PyList_CheckExact(__pyx_t_16))) {
          if (__pyx_t_18 >= PyList_GET_SIZE(__pyx_t_16)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_16, __pyx_t_18); __Pyx_INCREF(__pyx_t_9); __pyx_t_18++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_16, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          if (__pyx_t_18 >= PyTuple_GET_SIZE(__pyx_t_16)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_16, __pyx_t_18); __Pyx_INCREF(__pyx_t_9); __pyx_t_18++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_16, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        }
      } else {
        __pyx_t_9 = __pyx_t_20(__pyx_t_16);
        if (unlikely(!__pyx_t_9)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_9);
      }
      if (!(likely(PyTuple_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_9)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_tag, ((PyObject*)__pyx_t_9));
      __pyx_t_9 = 0;
      if (unlikely(__pyx_7genexpr__pyx_v_tag == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
      }
      __Pyx_INCREF(PyTuple_GET_ITEM(__pyx_7genexpr__pyx_v_tag, 0));
      __pyx_t_9 = PyTuple_GET_ITEM(__pyx_7genexpr__pyx_v_tag, 0);
      __pyx_t_21 = (__Pyx_PyString_Equals(__pyx_t_9, __pyx_n_s_PV, Py_NE)); if (unlikely(__pyx_t_21 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
      if (__pyx_t_21) {
      } else {
        __pyx_t_19 = __pyx_t_21;
        goto __pyx_L29_bool_binop_done;
      }
      __pyx_t_21 = (__Pyx_PyString_Equals(__pyx_t_9, __pyx_n_s_FA, Py_NE)); if (unlikely(__pyx_t_21 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
      __pyx_t_19 = __pyx_t_21;
      __pyx_L29_bool_binop_done:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_21 = (__pyx_t_19 != 0);
      if (__pyx_t_21) {

        /* "utilBMF/MergePairedAlignments.pyx":141
 *         self.reference_id = read.reference_id
 *         self.is_reverse = read.is_reverse
 *         self.tagDict = {tag[0]: BamTag.fromtuple(tag) for tag             # <<<<<<<<<<<<<<
 *                         in read.get_tags() if tag[0] not in ["PV", "FA"]}
 *         self.isMerged = (read.has_tag("MP") and read.opt("MP") == "T")
 */
        if (unlikely(__pyx_7genexpr__pyx_v_tag == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
        }
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)((PyObject*)__pyx_ptype_7utilBMF_8HTSUtils_BamTag)), __pyx_n_s_fromtuple); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_8 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_15))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_15);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_15, function);
          }
        }
        if (!__pyx_t_8) {
          __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_7genexpr__pyx_v_tag); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
          __Pyx_GOTREF(__pyx_t_9);
        } else {
          __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8); __pyx_t_8 = NULL;
          __Pyx_INCREF(__pyx_7genexpr__pyx_v_tag);
          __Pyx_GIVEREF(__pyx_7genexpr__pyx_v_tag);
          PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_7genexpr__pyx_v_tag);
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_7, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)PyTuple_GET_ITEM(__pyx_7genexpr__pyx_v_tag, 0), (PyObject*)__pyx_t_9))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L25_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L28;
      }
      __pyx_L28:;
    }
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_tag);
    goto __pyx_L31_exit_scope;
    __pyx_L25_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_tag);
    goto __pyx_L1_error;
    __pyx_L31_exit_scope:;
  } /* exit inner scope */
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->tagDict);
  __Pyx_DECREF(__pyx_v_self->tagDict);
  __pyx_v_self->tagDict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":143
 *         self.tagDict = {tag[0]: BamTag.fromtuple(tag) for tag
 *                         in read.get_tags() if tag[0] not in ["PV", "FA"]}
 *         self.isMerged = (read.has_tag("MP") and read.opt("MP") == "T")             # <<<<<<<<<<<<<<
 * 
 *         # Parse out the read cigar.
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5pysam_14calignmentfile_AlignedSegment *)__pyx_v_read->__pyx_vtab)->has_tag(((struct __pyx_obj_5pysam_14calignmentfile_AlignedSegment *)__pyx_v_read), __pyx_n_s_MP, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_19 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_19) {
  } else {
    __pyx_t_21 = __pyx_t_19;
    goto __pyx_L32_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_opt); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_19 = (__Pyx_PyString_Equals(__pyx_t_16, __pyx_n_s_T, Py_EQ)); if (unlikely(__pyx_t_19 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_21 = __pyx_t_19;
  __pyx_L32_bool_binop_done:;
  __pyx_v_self->isMerged = __pyx_t_21;

  /* "utilBMF/MergePairedAlignments.pyx":146
 * 
 *         # Parse out the read cigar.
 *         for CigarOp, CigarOpLen in read.cigar:             # <<<<<<<<<<<<<<
 *             for tmpInt in xrange(offset, offset + CigarOpLen):
 *                 if(CigarOp == 0):
 */
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_cigar); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  if (likely(PyList_CheckExact(__pyx_t_16)) || PyTuple_CheckExact(__pyx_t_16)) {
    __pyx_t_1 = __pyx_t_16; __Pyx_INCREF(__pyx_t_1); __pyx_t_18 = 0;
    __pyx_t_20 = NULL;
  } else {
    __pyx_t_18 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_20 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  for (;;) {
    if (likely(!__pyx_t_20)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_18 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_16 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_18); __Pyx_INCREF(__pyx_t_16); __pyx_t_18++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_16 = PySequence_ITEM(__pyx_t_1, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_16);
        #endif
      } else {
        if (__pyx_t_18 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_18); __Pyx_INCREF(__pyx_t_16); __pyx_t_18++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_16 = PySequence_ITEM(__pyx_t_1, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_16);
        #endif
      }
    } else {
      __pyx_t_16 = __pyx_t_20(__pyx_t_1);
      if (unlikely(!__pyx_t_16)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_16);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_16))) || (PyList_CheckExact(__pyx_t_16))) {
      PyObject* sequence = __pyx_t_16;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_15 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_15 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_15);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_15 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_15);
      #endif
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_22 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_22(__pyx_t_7); if (unlikely(!__pyx_t_9)) goto __pyx_L36_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_15 = __pyx_t_22(__pyx_t_7); if (unlikely(!__pyx_t_15)) goto __pyx_L36_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_15);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_22(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_22 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L37_unpacking_done;
      __pyx_L36_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_22 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L37_unpacking_done:;
    }
    __pyx_t_23 = __Pyx_PyInt_As_char(__pyx_t_9); if (unlikely((__pyx_t_23 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_24 = __Pyx_PyInt_As_char(__pyx_t_15); if (unlikely((__pyx_t_24 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_v_CigarOp = __pyx_t_23;
    __pyx_v_CigarOpLen = __pyx_t_24;

    /* "utilBMF/MergePairedAlignments.pyx":147
 *         # Parse out the read cigar.
 *         for CigarOp, CigarOpLen in read.cigar:
 *             for tmpInt in xrange(offset, offset + CigarOpLen):             # <<<<<<<<<<<<<<
 *                 if(CigarOp == 0):
 *                     """
 */
    __pyx_t_11 = (__pyx_v_offset + __pyx_v_CigarOpLen);
    for (__pyx_t_25 = __pyx_v_offset; __pyx_t_25 < __pyx_t_11; __pyx_t_25+=1) {
      __pyx_v_tmpInt = __pyx_t_25;

      /* "utilBMF/MergePairedAlignments.pyx":193
 *                         mergeAgreed=1)
 *                     readPos += 1
 *                 elif(CigarOp == 2):             # <<<<<<<<<<<<<<
 *                     """
 *                     Case: 'D'
 */
      switch (__pyx_v_CigarOp) {

        /* "utilBMF/MergePairedAlignments.pyx":148
 *         for CigarOp, CigarOpLen in read.cigar:
 *             for tmpInt in xrange(offset, offset + CigarOpLen):
 *                 if(CigarOp == 0):             # <<<<<<<<<<<<<<
 *                     """
 *                     Case: 'M'
 */
        case 0:

        /* "utilBMF/MergePairedAlignments.pyx":152
 *                     Case: 'M'
 *                     """
 *                     try:             # <<<<<<<<<<<<<<
 *                         assert read.aligned_pairs[tmpInt][1] is not None
 *                     except AssertionError:
 */
        {
          __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
          __Pyx_XGOTREF(__pyx_t_3);
          __Pyx_XGOTREF(__pyx_t_4);
          __Pyx_XGOTREF(__pyx_t_5);
          /*try:*/ {

            /* "utilBMF/MergePairedAlignments.pyx":153
 *                     """
 *                     try:
 *                         assert read.aligned_pairs[tmpInt][1] is not None             # <<<<<<<<<<<<<<
 *                     except AssertionError:
 *                         print("Repr of read.align_pairs: %s" % repr(read.aligned_pairs))
 */
            #ifndef CYTHON_WITHOUT_ASSERTIONS
            if (unlikely(!Py_OptimizeFlag)) {
              __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_aligned_pairs); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L40_error;}
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_16, __pyx_v_tmpInt, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(__pyx_t_15 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L40_error;};
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __pyx_t_16 = __Pyx_GetItemInt(__pyx_t_15, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_16 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L40_error;};
              __Pyx_GOTREF(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __pyx_t_21 = (__pyx_t_16 != Py_None);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              if (unlikely(!(__pyx_t_21 != 0))) {
                PyErr_SetNone(PyExc_AssertionError);
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L40_error;}
              }
            }
            #endif
          }
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L47_try_end;
          __pyx_L40_error:;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;

          /* "utilBMF/MergePairedAlignments.pyx":154
 *                     try:
 *                         assert read.aligned_pairs[tmpInt][1] is not None
 *                     except AssertionError:             # <<<<<<<<<<<<<<
 *                         print("Repr of read.align_pairs: %s" % repr(read.aligned_pairs))
 *                         print("tmpInt: %s." % tmpInt)
 */
          __pyx_t_26 = PyErr_ExceptionMatches(__pyx_builtin_AssertionError);
          if (__pyx_t_26) {
            __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_16, &__pyx_t_15, &__pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L42_except_error;}
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_GOTREF(__pyx_t_9);

            /* "utilBMF/MergePairedAlignments.pyx":155
 *                         assert read.aligned_pairs[tmpInt][1] is not None
 *                     except AssertionError:
 *                         print("Repr of read.align_pairs: %s" % repr(read.aligned_pairs))             # <<<<<<<<<<<<<<
 *                         print("tmpInt: %s." % tmpInt)
 *                         assert False
 */
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_aligned_pairs); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L42_except_error;}
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_8 = PyObject_Repr(__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L42_except_error;}
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Repr_of_read_align_pairs_s, __pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L42_except_error;}
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (__Pyx_PrintOne(0, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L42_except_error;}
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "utilBMF/MergePairedAlignments.pyx":156
 *                     except AssertionError:
 *                         print("Repr of read.align_pairs: %s" % repr(read.aligned_pairs))
 *                         print("tmpInt: %s." % tmpInt)             # <<<<<<<<<<<<<<
 *                         assert False
 *                     self.Layout.layouts[tmpInt] = ArrayLayoutPos(
 */
            __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_tmpInt); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L42_except_error;}
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_tmpInt_s, __pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L42_except_error;}
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (__Pyx_PrintOne(0, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L42_except_error;}
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

            /* "utilBMF/MergePairedAlignments.pyx":157
 *                         print("Repr of read.align_pairs: %s" % repr(read.aligned_pairs))
 *                         print("tmpInt: %s." % tmpInt)
 *                         assert False             # <<<<<<<<<<<<<<
 *                     self.Layout.layouts[tmpInt] = ArrayLayoutPos(
 *                         pos=read.aligned_pairs[tmpInt][1],
 */
            #ifndef CYTHON_WITHOUT_ASSERTIONS
            if (unlikely(!Py_OptimizeFlag)) {
              if (unlikely(!0)) {
                PyErr_SetNone(PyExc_AssertionError);
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L42_except_error;}
              }
            }
            #endif
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            goto __pyx_L41_exception_handled;
          }
          goto __pyx_L42_except_error;
          __pyx_L42_except_error:;
          __Pyx_XGIVEREF(__pyx_t_3);
          __Pyx_XGIVEREF(__pyx_t_4);
          __Pyx_XGIVEREF(__pyx_t_5);
          __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
          goto __pyx_L1_error;
          __pyx_L41_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_3);
          __Pyx_XGIVEREF(__pyx_t_4);
          __Pyx_XGIVEREF(__pyx_t_5);
          __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
          __pyx_L47_try_end:;
        }

        /* "utilBMF/MergePairedAlignments.pyx":159
 *                         assert False
 *                     self.Layout.layouts[tmpInt] = ArrayLayoutPos(
 *                         pos=read.aligned_pairs[tmpInt][1],             # <<<<<<<<<<<<<<
 *                         readPos=read.aligned_pairs[tmpInt][0],
 *                         operation=77, base=ord(read.seq[readPos]),
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_aligned_pairs); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_9, __pyx_v_tmpInt, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(__pyx_t_15 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_15, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_26 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_26 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_27.pos = __pyx_t_26;

        /* "utilBMF/MergePairedAlignments.pyx":160
 *                     self.Layout.layouts[tmpInt] = ArrayLayoutPos(
 *                         pos=read.aligned_pairs[tmpInt][1],
 *                         readPos=read.aligned_pairs[tmpInt][0],             # <<<<<<<<<<<<<<
 *                         operation=77, base=ord(read.seq[readPos]),
 *                         quality=quals[readPos], agreement=agrees[readPos],
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_aligned_pairs); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_9, __pyx_v_tmpInt, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(__pyx_t_15 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_15, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_28 = __Pyx_PyInt_As_uint16_t(__pyx_t_9); if (unlikely((__pyx_t_28 == (uint16_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_27.readPos = __pyx_t_28;
        __pyx_t_27.operation = 77;

        /* "utilBMF/MergePairedAlignments.pyx":161
 *                         pos=read.aligned_pairs[tmpInt][1],
 *                         readPos=read.aligned_pairs[tmpInt][0],
 *                         operation=77, base=ord(read.seq[readPos]),             # <<<<<<<<<<<<<<
 *                         quality=quals[readPos], agreement=agrees[readPos],
 *                         mergeAgreed=1)
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_seq); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_9, __pyx_v_readPos, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(__pyx_t_15 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_15);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_15);
        __pyx_t_15 = 0;
        __pyx_t_15 = __Pyx_PyObject_Call(__pyx_builtin_ord, __pyx_t_9, NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_24 = __Pyx_PyInt_As_char(__pyx_t_15); if (unlikely((__pyx_t_24 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_27.base = __pyx_t_24;

        /* "utilBMF/MergePairedAlignments.pyx":162
 *                         readPos=read.aligned_pairs[tmpInt][0],
 *                         operation=77, base=ord(read.seq[readPos]),
 *                         quality=quals[readPos], agreement=agrees[readPos],             # <<<<<<<<<<<<<<
 *                         mergeAgreed=1)
 *                     if(self.firstMapped < 0):
 */
        __pyx_t_26 = __pyx_v_readPos;
        __pyx_t_27.quality = (*__Pyx_BufPtrStrided1d(int *, __pyx_pybuffernd_quals.rcbuffer->pybuffer.buf, __pyx_t_26, __pyx_pybuffernd_quals.diminfo[0].strides));
        __pyx_t_29 = __pyx_v_readPos;
        __pyx_t_27.agreement = (*__Pyx_BufPtrStrided1d(int *, __pyx_pybuffernd_agrees.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_agrees.diminfo[0].strides));
        __pyx_t_27.mergeAgreed = 1;

        /* "utilBMF/MergePairedAlignments.pyx":158
 *                         print("tmpInt: %s." % tmpInt)
 *                         assert False
 *                     self.Layout.layouts[tmpInt] = ArrayLayoutPos(             # <<<<<<<<<<<<<<
 *                         pos=read.aligned_pairs[tmpInt][1],
 *                         readPos=read.aligned_pairs[tmpInt][0],
 */
        (__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]) = __pyx_t_27;

        /* "utilBMF/MergePairedAlignments.pyx":164
 *                         quality=quals[readPos], agreement=agrees[readPos],
 *                         mergeAgreed=1)
 *                     if(self.firstMapped < 0):             # <<<<<<<<<<<<<<
 *                         self.firstMapped = tmpInt
 *                     readPos += 1
 */
        __pyx_t_21 = ((__pyx_v_self->firstMapped < 0) != 0);
        if (__pyx_t_21) {

          /* "utilBMF/MergePairedAlignments.pyx":165
 *                         mergeAgreed=1)
 *                     if(self.firstMapped < 0):
 *                         self.firstMapped = tmpInt             # <<<<<<<<<<<<<<
 *                     readPos += 1
 *                 elif(CigarOp == 4):
 */
          __pyx_v_self->firstMapped = __pyx_v_tmpInt;
          goto __pyx_L50;
        }
        __pyx_L50:;

        /* "utilBMF/MergePairedAlignments.pyx":166
 *                     if(self.firstMapped < 0):
 *                         self.firstMapped = tmpInt
 *                     readPos += 1             # <<<<<<<<<<<<<<
 *                 elif(CigarOp == 4):
 *                     """
 */
        __pyx_v_readPos = (__pyx_v_readPos + 1);
        break;

        /* "utilBMF/MergePairedAlignments.pyx":167
 *                         self.firstMapped = tmpInt
 *                     readPos += 1
 *                 elif(CigarOp == 4):             # <<<<<<<<<<<<<<
 *                     """
 *                     Case: 'S'
 */
        case 4:

        /* "utilBMF/MergePairedAlignments.pyx":171
 *                     Case: 'S'
 *                     """
 *                     try:             # <<<<<<<<<<<<<<
 *                         assert read.aligned_pairs[tmpInt][1] is None
 *                     except AssertionError:
 */
        {
          __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
          __Pyx_XGOTREF(__pyx_t_5);
          __Pyx_XGOTREF(__pyx_t_4);
          __Pyx_XGOTREF(__pyx_t_3);
          /*try:*/ {

            /* "utilBMF/MergePairedAlignments.pyx":172
 *                     """
 *                     try:
 *                         assert read.aligned_pairs[tmpInt][1] is None             # <<<<<<<<<<<<<<
 *                     except AssertionError:
 *                         print("Repr of read.align_pairs: %s" % repr(read.aligned_pairs))
 */
            #ifndef CYTHON_WITHOUT_ASSERTIONS
            if (unlikely(!Py_OptimizeFlag)) {
              __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_aligned_pairs); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L51_error;}
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_15, __pyx_v_tmpInt, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L51_error;};
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_9, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_15 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L51_error;};
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __pyx_t_21 = (__pyx_t_15 == Py_None);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!(__pyx_t_21 != 0))) {
                PyErr_SetNone(PyExc_AssertionError);
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L51_error;}
              }
            }
            #endif
          }
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L58_try_end;
          __pyx_L51_error:;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;

          /* "utilBMF/MergePairedAlignments.pyx":173
 *                     try:
 *                         assert read.aligned_pairs[tmpInt][1] is None
 *                     except AssertionError:             # <<<<<<<<<<<<<<
 *                         print("Repr of read.align_pairs: %s" % repr(read.aligned_pairs))
 *                         print("tmpInt: %s." % tmpInt)
 */
          __pyx_t_30 = PyErr_ExceptionMatches(__pyx_builtin_AssertionError);
          if (__pyx_t_30) {
            __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_15, &__pyx_t_9, &__pyx_t_16) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L53_except_error;}
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_GOTREF(__pyx_t_16);

            /* "utilBMF/MergePairedAlignments.pyx":174
 *                         assert read.aligned_pairs[tmpInt][1] is None
 *                     except AssertionError:
 *                         print("Repr of read.align_pairs: %s" % repr(read.aligned_pairs))             # <<<<<<<<<<<<<<
 *                         print("tmpInt: %s." % tmpInt)
 *                         assert False
 */
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_aligned_pairs); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L53_except_error;}
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_7 = PyObject_Repr(__pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L53_except_error;}
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_Repr_of_read_align_pairs_s, __pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L53_except_error;}
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (__Pyx_PrintOne(0, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L53_except_error;}
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

            /* "utilBMF/MergePairedAlignments.pyx":175
 *                     except AssertionError:
 *                         print("Repr of read.align_pairs: %s" % repr(read.aligned_pairs))
 *                         print("tmpInt: %s." % tmpInt)             # <<<<<<<<<<<<<<
 *                         assert False
 *                     self.Layout.layouts[tmpInt] = ArrayLayoutPos(
 */
            __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_tmpInt); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L53_except_error;}
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_tmpInt_s, __pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L53_except_error;}
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (__Pyx_PrintOne(0, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L53_except_error;}
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "utilBMF/MergePairedAlignments.pyx":176
 *                         print("Repr of read.align_pairs: %s" % repr(read.aligned_pairs))
 *                         print("tmpInt: %s." % tmpInt)
 *                         assert False             # <<<<<<<<<<<<<<
 *                     self.Layout.layouts[tmpInt] = ArrayLayoutPos(
 *                         pos=-1 * read.pos, readPos=read.aligned_pairs[tmpInt][0],
 */
            #ifndef CYTHON_WITHOUT_ASSERTIONS
            if (unlikely(!Py_OptimizeFlag)) {
              if (unlikely(!0)) {
                PyErr_SetNone(PyExc_AssertionError);
                {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L53_except_error;}
              }
            }
            #endif
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            goto __pyx_L52_exception_handled;
          }
          goto __pyx_L53_except_error;
          __pyx_L53_except_error:;
          __Pyx_XGIVEREF(__pyx_t_5);
          __Pyx_XGIVEREF(__pyx_t_4);
          __Pyx_XGIVEREF(__pyx_t_3);
          __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
          goto __pyx_L1_error;
          __pyx_L52_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_5);
          __Pyx_XGIVEREF(__pyx_t_4);
          __Pyx_XGIVEREF(__pyx_t_3);
          __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
          __pyx_L58_try_end:;
        }

        /* "utilBMF/MergePairedAlignments.pyx":178
 *                         assert False
 *                     self.Layout.layouts[tmpInt] = ArrayLayoutPos(
 *                         pos=-1 * read.pos, readPos=read.aligned_pairs[tmpInt][0],             # <<<<<<<<<<<<<<
 *                         operation=83, base=ord(read.seq[readPos]),
 *                         quality=quals[readPos], agreement=agrees[readPos],
 */
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_pos); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_9 = PyNumber_Multiply(__pyx_int_neg_1, __pyx_t_16); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_30 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_30 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_27.pos = __pyx_t_30;
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_aligned_pairs); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_16 = __Pyx_GetItemInt(__pyx_t_9, __pyx_v_tmpInt, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(__pyx_t_16 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_16, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_28 = __Pyx_PyInt_As_uint16_t(__pyx_t_9); if (unlikely((__pyx_t_28 == (uint16_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_27.readPos = __pyx_t_28;
        __pyx_t_27.operation = 83;

        /* "utilBMF/MergePairedAlignments.pyx":179
 *                     self.Layout.layouts[tmpInt] = ArrayLayoutPos(
 *                         pos=-1 * read.pos, readPos=read.aligned_pairs[tmpInt][0],
 *                         operation=83, base=ord(read.seq[readPos]),             # <<<<<<<<<<<<<<
 *                         quality=quals[readPos], agreement=agrees[readPos],
 *                         mergeAgreed=1)
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_seq); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_16 = __Pyx_GetItemInt(__pyx_t_9, __pyx_v_readPos, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(__pyx_t_16 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_16);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_16);
        __pyx_t_16 = 0;
        __pyx_t_16 = __Pyx_PyObject_Call(__pyx_builtin_ord, __pyx_t_9, NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_24 = __Pyx_PyInt_As_char(__pyx_t_16); if (unlikely((__pyx_t_24 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_27.base = __pyx_t_24;

        /* "utilBMF/MergePairedAlignments.pyx":180
 *                         pos=-1 * read.pos, readPos=read.aligned_pairs[tmpInt][0],
 *                         operation=83, base=ord(read.seq[readPos]),
 *                         quality=quals[readPos], agreement=agrees[readPos],             # <<<<<<<<<<<<<<
 *                         mergeAgreed=1)
 *                     readPos += 1
 */
        __pyx_t_30 = __pyx_v_readPos;
        __pyx_t_27.quality = (*__Pyx_BufPtrStrided1d(int *, __pyx_pybuffernd_quals.rcbuffer->pybuffer.buf, __pyx_t_30, __pyx_pybuffernd_quals.diminfo[0].strides));
        __pyx_t_31 = __pyx_v_readPos;
        __pyx_t_27.agreement = (*__Pyx_BufPtrStrided1d(int *, __pyx_pybuffernd_agrees.rcbuffer->pybuffer.buf, __pyx_t_31, __pyx_pybuffernd_agrees.diminfo[0].strides));
        __pyx_t_27.mergeAgreed = 1;

        /* "utilBMF/MergePairedAlignments.pyx":177
 *                         print("tmpInt: %s." % tmpInt)
 *                         assert False
 *                     self.Layout.layouts[tmpInt] = ArrayLayoutPos(             # <<<<<<<<<<<<<<
 *                         pos=-1 * read.pos, readPos=read.aligned_pairs[tmpInt][0],
 *                         operation=83, base=ord(read.seq[readPos]),
 */
        (__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]) = __pyx_t_27;

        /* "utilBMF/MergePairedAlignments.pyx":182
 *                         quality=quals[readPos], agreement=agrees[readPos],
 *                         mergeAgreed=1)
 *                     readPos += 1             # <<<<<<<<<<<<<<
 *                 elif(CigarOp == 1):
 *                     """
 */
        __pyx_v_readPos = (__pyx_v_readPos + 1);
        break;

        /* "utilBMF/MergePairedAlignments.pyx":183
 *                         mergeAgreed=1)
 *                     readPos += 1
 *                 elif(CigarOp == 1):             # <<<<<<<<<<<<<<
 *                     """
 *                     Case: 'I'
 */
        case 1:

        /* "utilBMF/MergePairedAlignments.pyx":187
 *                     Case: 'I'
 *                     """
 *                     self.Layout.layouts[tmpInt] = ArrayLayoutPos(             # <<<<<<<<<<<<<<
 *                         pos=-1, readPos=read.aligned_pairs[tmpInt][0],
 *                         operation=73, base=ord(read.seq[readPos]),
 */
        __pyx_t_27.pos = -1;

        /* "utilBMF/MergePairedAlignments.pyx":188
 *                     """
 *                     self.Layout.layouts[tmpInt] = ArrayLayoutPos(
 *                         pos=-1, readPos=read.aligned_pairs[tmpInt][0],             # <<<<<<<<<<<<<<
 *                         operation=73, base=ord(read.seq[readPos]),
 *                         quality=quals[readPos], agreement=agrees[readPos],
 */
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_aligned_pairs); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_16, __pyx_v_tmpInt, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_16 = __Pyx_GetItemInt(__pyx_t_9, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_16 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_28 = __Pyx_PyInt_As_uint16_t(__pyx_t_16); if (unlikely((__pyx_t_28 == (uint16_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_27.readPos = __pyx_t_28;
        __pyx_t_27.operation = 73;

        /* "utilBMF/MergePairedAlignments.pyx":189
 *                     self.Layout.layouts[tmpInt] = ArrayLayoutPos(
 *                         pos=-1, readPos=read.aligned_pairs[tmpInt][0],
 *                         operation=73, base=ord(read.seq[readPos]),             # <<<<<<<<<<<<<<
 *                         quality=quals[readPos], agreement=agrees[readPos],
 *                         mergeAgreed=1)
 */
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_seq); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_16, __pyx_v_readPos, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_16 = PyTuple_New(1); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ord, __pyx_t_16, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_24 = __Pyx_PyInt_As_char(__pyx_t_9); if (unlikely((__pyx_t_24 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_27.base = __pyx_t_24;

        /* "utilBMF/MergePairedAlignments.pyx":190
 *                         pos=-1, readPos=read.aligned_pairs[tmpInt][0],
 *                         operation=73, base=ord(read.seq[readPos]),
 *                         quality=quals[readPos], agreement=agrees[readPos],             # <<<<<<<<<<<<<<
 *                         mergeAgreed=1)
 *                     readPos += 1
 */
        __pyx_t_32 = __pyx_v_readPos;
        __pyx_t_27.quality = (*__Pyx_BufPtrStrided1d(int *, __pyx_pybuffernd_quals.rcbuffer->pybuffer.buf, __pyx_t_32, __pyx_pybuffernd_quals.diminfo[0].strides));
        __pyx_t_33 = __pyx_v_readPos;
        __pyx_t_27.agreement = (*__Pyx_BufPtrStrided1d(int *, __pyx_pybuffernd_agrees.rcbuffer->pybuffer.buf, __pyx_t_33, __pyx_pybuffernd_agrees.diminfo[0].strides));
        __pyx_t_27.mergeAgreed = 1;

        /* "utilBMF/MergePairedAlignments.pyx":187
 *                     Case: 'I'
 *                     """
 *                     self.Layout.layouts[tmpInt] = ArrayLayoutPos(             # <<<<<<<<<<<<<<
 *                         pos=-1, readPos=read.aligned_pairs[tmpInt][0],
 *                         operation=73, base=ord(read.seq[readPos]),
 */
        (__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]) = __pyx_t_27;

        /* "utilBMF/MergePairedAlignments.pyx":192
 *                         quality=quals[readPos], agreement=agrees[readPos],
 *                         mergeAgreed=1)
 *                     readPos += 1             # <<<<<<<<<<<<<<
 *                 elif(CigarOp == 2):
 *                     """
 */
        __pyx_v_readPos = (__pyx_v_readPos + 1);
        break;

        /* "utilBMF/MergePairedAlignments.pyx":193
 *                         mergeAgreed=1)
 *                     readPos += 1
 *                 elif(CigarOp == 2):             # <<<<<<<<<<<<<<
 *                     """
 *                     Case: 'D'
 */
        case 2:

        /* "utilBMF/MergePairedAlignments.pyx":198
 *                     """
 *                     self.Layout.layouts[tmpInt] = ArrayLayoutPos(
 *                         pos=read.aligned_pairs[tmpInt][1],             # <<<<<<<<<<<<<<
 *                         readPos=-1,
 *                         operation=68, base=68,
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_aligned_pairs); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_16 = __Pyx_GetItemInt(__pyx_t_9, __pyx_v_tmpInt, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(__pyx_t_16 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_16, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_34 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_34 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_27.pos = __pyx_t_34;
        __pyx_t_27.readPos = -1;
        __pyx_t_27.operation = 68;
        __pyx_t_27.base = 68;
        __pyx_t_27.quality = -1;
        __pyx_t_27.agreement = -1;
        __pyx_t_27.mergeAgreed = 1;

        /* "utilBMF/MergePairedAlignments.pyx":197
 *                     Case: 'D'
 *                     """
 *                     self.Layout.layouts[tmpInt] = ArrayLayoutPos(             # <<<<<<<<<<<<<<
 *                         pos=read.aligned_pairs[tmpInt][1],
 *                         readPos=-1,
 */
        (__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]) = __pyx_t_27;
        break;
        default:

        /* "utilBMF/MergePairedAlignments.pyx":203
 *                         quality=-1, agreement=-1, mergeAgreed=1)
 *                 else:
 *                     raise NotImplementedError(             # <<<<<<<<<<<<<<
 *                         "Only MIDS cigar operations currently supported. If "
 *                         "you have an application that could use further "
 */
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_Raise(__pyx_t_9, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
    }

    /* "utilBMF/MergePairedAlignments.pyx":207
 *                         "you have an application that could use further "
 *                         "support, please contact me.")
 *             offset += CigarOpLen             # <<<<<<<<<<<<<<
 * 
 *     cdef bint cPosIsMapped(self, int position):
 */
    __pyx_v_offset = (__pyx_v_offset + __pyx_v_CigarOpLen);

    /* "utilBMF/MergePairedAlignments.pyx":146
 * 
 *         # Parse out the read cigar.
 *         for CigarOp, CigarOpLen in read.cigar:             # <<<<<<<<<<<<<<
 *             for tmpInt in xrange(offset, offset + CigarOpLen):
 *                 if(CigarOp == 0):
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":107
 *             LayoutLen * (sizeof(ArrayLayoutPos_t))), length=LayoutLen)
 * 
 *     def __init__(self, AlignedSegment_t read):             # <<<<<<<<<<<<<<
 *         # C Definitions
 *         cdef char CigarOp, CigarOpLen
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_agrees.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_quals.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_agrees.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_quals.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_quals);
  __Pyx_XDECREF((PyObject *)__pyx_v_agrees);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":209
 *             offset += CigarOpLen
 * 
 *     cdef bint cPosIsMapped(self, int position):             # <<<<<<<<<<<<<<
 *         return self.Layout.layouts[position].operation == 77  # == "M"
 * 
 */

static int __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cPosIsMapped(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_v_position) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cPosIsMapped", 0);

  /* "utilBMF/MergePairedAlignments.pyx":210
 * 
 *     cdef bint cPosIsMapped(self, int position):
 *         return self.Layout.layouts[position].operation == 77  # == "M"             # <<<<<<<<<<<<<<
 * 
 *     cpdef bint posIsMapped(self, int position):
 */
  __pyx_r = ((__pyx_v_self->Layout.layouts[__pyx_v_position]).operation == 77);
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":209
 *             offset += CigarOpLen
 * 
 *     cdef bint cPosIsMapped(self, int position):             # <<<<<<<<<<<<<<
 *         return self.Layout.layouts[position].operation == 77  # == "M"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":212
 *         return self.Layout.layouts[position].operation == 77  # == "M"
 * 
 *     cpdef bint posIsMapped(self, int position):             # <<<<<<<<<<<<<<
 *         return self.cPosIsMapped(position)
 * 
 */

static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_5posIsMapped(PyObject *__pyx_v_self, PyObject *__pyx_arg_position); /*proto*/
static int __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_posIsMapped(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_v_position, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("posIsMapped", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_posIsMapped); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_5posIsMapped)) {
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_position); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_7;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "utilBMF/MergePairedAlignments.pyx":213
 * 
 *     cpdef bint posIsMapped(self, int position):
 *         return self.cPosIsMapped(position)             # <<<<<<<<<<<<<<
 * 
 *     cdef int getFirstMappedReadPos(self):
 */
  __pyx_r = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cPosIsMapped(__pyx_v_self, __pyx_v_position);
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":212
 *         return self.Layout.layouts[position].operation == 77  # == "M"
 * 
 *     cpdef bint posIsMapped(self, int position):             # <<<<<<<<<<<<<<
 *         return self.cPosIsMapped(position)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("utilBMF.MergePairedAlignments.Layout.posIsMapped", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_5posIsMapped(PyObject *__pyx_v_self, PyObject *__pyx_arg_position); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_5posIsMapped(PyObject *__pyx_v_self, PyObject *__pyx_arg_position) {
  int __pyx_v_position;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("posIsMapped (wrapper)", 0);
  assert(__pyx_arg_position); {
    __pyx_v_position = __Pyx_PyInt_As_int(__pyx_arg_position); if (unlikely((__pyx_v_position == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.posIsMapped", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4posIsMapped(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self), ((int)__pyx_v_position));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4posIsMapped(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_v_position) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("posIsMapped", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_posIsMapped(__pyx_v_self, __pyx_v_position, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.posIsMapped", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":215
 *         return self.cPosIsMapped(position)
 * 
 *     cdef int getFirstMappedReadPos(self):             # <<<<<<<<<<<<<<
 *         cdef size_t i
 *         for i in range(self.Layout.length):
 */

static int __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getFirstMappedReadPos(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  size_t __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("getFirstMappedReadPos", 0);

  /* "utilBMF/MergePairedAlignments.pyx":217
 *     cdef int getFirstMappedReadPos(self):
 *         cdef size_t i
 *         for i in range(self.Layout.length):             # <<<<<<<<<<<<<<
 *             if(self.Layout.layouts[i].operation == 77):
 *                 return i
 */
  __pyx_t_1 = __pyx_v_self->Layout.length;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "utilBMF/MergePairedAlignments.pyx":218
 *         cdef size_t i
 *         for i in range(self.Layout.length):
 *             if(self.Layout.layouts[i].operation == 77):             # <<<<<<<<<<<<<<
 *                 return i
 * 
 */
    __pyx_t_3 = (((__pyx_v_self->Layout.layouts[__pyx_v_i]).operation == 77) != 0);
    if (__pyx_t_3) {

      /* "utilBMF/MergePairedAlignments.pyx":219
 *         for i in range(self.Layout.length):
 *             if(self.Layout.layouts[i].operation == 77):
 *                 return i             # <<<<<<<<<<<<<<
 * 
 *     cdef int getLastAlignedRefPos(self):
 */
      __pyx_r = __pyx_v_i;
      goto __pyx_L0;
    }
  }

  /* "utilBMF/MergePairedAlignments.pyx":215
 *         return self.cPosIsMapped(position)
 * 
 *     cdef int getFirstMappedReadPos(self):             # <<<<<<<<<<<<<<
 *         cdef size_t i
 *         for i in range(self.Layout.length):
 */

  /* function exit code */
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":221
 *                 return i
 * 
 *     cdef int getLastAlignedRefPos(self):             # <<<<<<<<<<<<<<
 *         cdef size_t i, counter
 *         counter = 0
 */

static int __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getLastAlignedRefPos(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  size_t __pyx_v_i;
  size_t __pyx_v_counter;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("getLastAlignedRefPos", 0);

  /* "utilBMF/MergePairedAlignments.pyx":223
 *     cdef int getLastAlignedRefPos(self):
 *         cdef size_t i, counter
 *         counter = 0             # <<<<<<<<<<<<<<
 *         for i from self.Layout.length > i >= 0:
 *             if(self.Layout.layouts[i].operation == 77):
 */
  __pyx_v_counter = 0;

  /* "utilBMF/MergePairedAlignments.pyx":224
 *         cdef size_t i, counter
 *         counter = 0
 *         for i from self.Layout.length > i >= 0:             # <<<<<<<<<<<<<<
 *             if(self.Layout.layouts[i].operation == 77):
 *                 return self.Layout.layouts[i].pos + counter
 */
  for (__pyx_v_i = __pyx_v_self->Layout.length-1 + 1; __pyx_v_i >= 0 + 1; ) { __pyx_v_i--;

    /* "utilBMF/MergePairedAlignments.pyx":225
 *         counter = 0
 *         for i from self.Layout.length > i >= 0:
 *             if(self.Layout.layouts[i].operation == 77):             # <<<<<<<<<<<<<<
 *                 return self.Layout.layouts[i].pos + counter
 *             counter += 1
 */
    __pyx_t_1 = (((__pyx_v_self->Layout.layouts[__pyx_v_i]).operation == 77) != 0);
    if (__pyx_t_1) {

      /* "utilBMF/MergePairedAlignments.pyx":226
 *         for i from self.Layout.length > i >= 0:
 *             if(self.Layout.layouts[i].operation == 77):
 *                 return self.Layout.layouts[i].pos + counter             # <<<<<<<<<<<<<<
 *             counter += 1
 * 
 */
      __pyx_r = ((__pyx_v_self->Layout.layouts[__pyx_v_i]).pos + __pyx_v_counter);
      goto __pyx_L0;
    }

    /* "utilBMF/MergePairedAlignments.pyx":227
 *             if(self.Layout.layouts[i].operation == 77):
 *                 return self.Layout.layouts[i].pos + counter
 *             counter += 1             # <<<<<<<<<<<<<<
 * 
 *     cdef int getFirstAlignedRefPos(self):
 */
    __pyx_v_counter = (__pyx_v_counter + 1);
  }

  /* "utilBMF/MergePairedAlignments.pyx":221
 *                 return i
 * 
 *     cdef int getLastAlignedRefPos(self):             # <<<<<<<<<<<<<<
 *         cdef size_t i, counter
 *         counter = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":229
 *             counter += 1
 * 
 *     cdef int getFirstAlignedRefPos(self):             # <<<<<<<<<<<<<<
 *         return getFirstAlignedRefPos(self.Layout)
 * 
 */

static int __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getFirstAlignedRefPos(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFirstAlignedRefPos", 0);

  /* "utilBMF/MergePairedAlignments.pyx":230
 * 
 *     cdef int getFirstAlignedRefPos(self):
 *         return getFirstAlignedRefPos(self.Layout)             # <<<<<<<<<<<<<<
 * 
 *     cdef int getAlignmentStart(self):
 */
  __pyx_r = getFirstAlignedRefPos(__pyx_v_self->Layout);
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":229
 *             counter += 1
 * 
 *     cdef int getFirstAlignedRefPos(self):             # <<<<<<<<<<<<<<
 *         return getFirstAlignedRefPos(self.Layout)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":232
 *         return getFirstAlignedRefPos(self.Layout)
 * 
 *     cdef int getAlignmentStart(self):             # <<<<<<<<<<<<<<
 *         cdef int tmpInt
 *         for tmpInt in range(self.Layout.length):
 */

static int __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getAlignmentStart(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  int __pyx_v_tmpInt;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getAlignmentStart", 0);

  /* "utilBMF/MergePairedAlignments.pyx":234
 *     cdef int getAlignmentStart(self):
 *         cdef int tmpInt
 *         for tmpInt in range(self.Layout.length):             # <<<<<<<<<<<<<<
 *             if(self.Layout.layouts[tmpInt].operation == 77):
 *                 return self.Layout.layouts[tmpInt].pos
 */
  __pyx_t_1 = __pyx_v_self->Layout.length;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_tmpInt = __pyx_t_2;

    /* "utilBMF/MergePairedAlignments.pyx":235
 *         cdef int tmpInt
 *         for tmpInt in range(self.Layout.length):
 *             if(self.Layout.layouts[tmpInt].operation == 77):             # <<<<<<<<<<<<<<
 *                 return self.Layout.layouts[tmpInt].pos
 *             # Operation is M, returns the ref position.
 */
    __pyx_t_3 = (((__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]).operation == 77) != 0);
    if (__pyx_t_3) {

      /* "utilBMF/MergePairedAlignments.pyx":236
 *         for tmpInt in range(self.Layout.length):
 *             if(self.Layout.layouts[tmpInt].operation == 77):
 *                 return self.Layout.layouts[tmpInt].pos             # <<<<<<<<<<<<<<
 *             # Operation is M, returns the ref position.
 *         raise ImproperArgumentError(
 */
      __pyx_r = (__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]).pos;
      goto __pyx_L0;
    }
  }

  /* "utilBMF/MergePairedAlignments.pyx":238
 *                 return self.Layout.layouts[tmpInt].pos
 *             # Operation is M, returns the ref position.
 *         raise ImproperArgumentError(             # <<<<<<<<<<<<<<
 *             "ArrayLayout has no 'M' cigar operation positions. "
 *             "This read can't be layed out???")
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_ImproperArgumentError); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_5, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "utilBMF/MergePairedAlignments.pyx":232
 *         return getFirstAlignedRefPos(self.Layout)
 * 
 *     cdef int getAlignmentStart(self):             # <<<<<<<<<<<<<<
 *         cdef int tmpInt
 *         for tmpInt in range(self.Layout.length):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("utilBMF.MergePairedAlignments.Layout.getAlignmentStart", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":242
 *             "This read can't be layed out???")
 * 
 *     cdef ndarray[int, ndim=1] cGetQual(self):             # <<<<<<<<<<<<<<
 *         # Ask if >= 0. My tests say it's ~1% faster to ask (> -1) than (>= 0).
 *         # pos.base == 66 for "B", which is a blank spot.
 */

static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetQual(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  int __pyx_v_tmpInt;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cGetQual", 0);

  /* "utilBMF/MergePairedAlignments.pyx":246
 *         # pos.base == 66 for "B", which is a blank spot.
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].quality for             # <<<<<<<<<<<<<<
 *                          tmpInt in range(self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].operation != 68],
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":247
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].quality for
 *                          tmpInt in range(self.Layout.length) if             # <<<<<<<<<<<<<<
 *                          self.Layout.layouts[tmpInt].operation != 68],
 *                         dtype=np.int32)
 */
  __pyx_t_3 = __pyx_v_self->Layout.length;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_tmpInt = __pyx_t_4;

    /* "utilBMF/MergePairedAlignments.pyx":248
 *         return np.array([self.Layout.layouts[tmpInt].quality for
 *                          tmpInt in range(self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].operation != 68],             # <<<<<<<<<<<<<<
 *                         dtype=np.int32)
 * 
 */
    __pyx_t_5 = (((__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]).operation != 68) != 0);
    if (__pyx_t_5) {

      /* "utilBMF/MergePairedAlignments.pyx":246
 *         # pos.base == 66 for "B", which is a blank spot.
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].quality for             # <<<<<<<<<<<<<<
 *                          tmpInt in range(self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].operation != 68],
 */
      __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]).quality); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
  }
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":249
 *                          tmpInt in range(self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].operation != 68],
 *                         dtype=np.int32)             # <<<<<<<<<<<<<<
 * 
 *     cdef ndarray[np.int16_t, ndim=1] cGetAgreementSlice(self, size_t start=0):
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int32); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":246
 *         # pos.base == 66 for "B", which is a blank spot.
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].quality for             # <<<<<<<<<<<<<<
 *                          tmpInt in range(self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].operation != 68],
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":242
 *             "This read can't be layed out???")
 * 
 *     cdef ndarray[int, ndim=1] cGetQual(self):             # <<<<<<<<<<<<<<
 *         # Ask if >= 0. My tests say it's ~1% faster to ask (> -1) than (>= 0).
 *         # pos.base == 66 for "B", which is a blank spot.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.cGetQual", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":251
 *                         dtype=np.int32)
 * 
 *     cdef ndarray[np.int16_t, ndim=1] cGetAgreementSlice(self, size_t start=0):             # <<<<<<<<<<<<<<
 *         return np.array([self.Layout.layouts[tmpInt].agreement for tmpInt
 *                          in range(start, self.Layout.length) if
 */

static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetAgreementSlice(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetAgreementSlice *__pyx_optional_args) {
  size_t __pyx_v_start = ((size_t)0);
  size_t __pyx_v_tmpInt;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cGetAgreementSlice", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_start = __pyx_optional_args->start;
    }
  }

  /* "utilBMF/MergePairedAlignments.pyx":252
 * 
 *     cdef ndarray[np.int16_t, ndim=1] cGetAgreementSlice(self, size_t start=0):
 *         return np.array([self.Layout.layouts[tmpInt].agreement for tmpInt             # <<<<<<<<<<<<<<
 *                          in range(start, self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].operation != 68],
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":253
 *     cdef ndarray[np.int16_t, ndim=1] cGetAgreementSlice(self, size_t start=0):
 *         return np.array([self.Layout.layouts[tmpInt].agreement for tmpInt
 *                          in range(start, self.Layout.length) if             # <<<<<<<<<<<<<<
 *                          self.Layout.layouts[tmpInt].operation != 68],
 *                         dtype=np.int16)
 */
  __pyx_t_3 = __pyx_v_self->Layout.length;
  for (__pyx_t_4 = __pyx_v_start; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_tmpInt = __pyx_t_4;

    /* "utilBMF/MergePairedAlignments.pyx":254
 *         return np.array([self.Layout.layouts[tmpInt].agreement for tmpInt
 *                          in range(start, self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].operation != 68],             # <<<<<<<<<<<<<<
 *                         dtype=np.int16)
 * 
 */
    __pyx_t_5 = (((__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]).operation != 68) != 0);
    if (__pyx_t_5) {

      /* "utilBMF/MergePairedAlignments.pyx":252
 * 
 *     cdef ndarray[np.int16_t, ndim=1] cGetAgreementSlice(self, size_t start=0):
 *         return np.array([self.Layout.layouts[tmpInt].agreement for tmpInt             # <<<<<<<<<<<<<<
 *                          in range(start, self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].operation != 68],
 */
      __pyx_t_6 = __Pyx_PyInt_From_uint16_t((__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]).agreement); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
  }
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":255
 *                          in range(start, self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].operation != 68],
 *                         dtype=np.int16)             # <<<<<<<<<<<<<<
 * 
 *     cdef ndarray[int, ndim=1] cGetQualSlice(self, size_t start=0):
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int16); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":252
 * 
 *     cdef ndarray[np.int16_t, ndim=1] cGetAgreementSlice(self, size_t start=0):
 *         return np.array([self.Layout.layouts[tmpInt].agreement for tmpInt             # <<<<<<<<<<<<<<
 *                          in range(start, self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].operation != 68],
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":251
 *                         dtype=np.int32)
 * 
 *     cdef ndarray[np.int16_t, ndim=1] cGetAgreementSlice(self, size_t start=0):             # <<<<<<<<<<<<<<
 *         return np.array([self.Layout.layouts[tmpInt].agreement for tmpInt
 *                          in range(start, self.Layout.length) if
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.cGetAgreementSlice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":257
 *                         dtype=np.int16)
 * 
 *     cdef ndarray[int, ndim=1] cGetQualSlice(self, size_t start=0):             # <<<<<<<<<<<<<<
 *         return np.array([self.Layout.layouts[tmpInt].quality for tmpInt
 *                          in range(start, self.Layout.length) if
 */

static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetQualSlice(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetQualSlice *__pyx_optional_args) {
  size_t __pyx_v_start = ((size_t)0);
  size_t __pyx_v_tmpInt;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cGetQualSlice", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_start = __pyx_optional_args->start;
    }
  }

  /* "utilBMF/MergePairedAlignments.pyx":258
 * 
 *     cdef ndarray[int, ndim=1] cGetQualSlice(self, size_t start=0):
 *         return np.array([self.Layout.layouts[tmpInt].quality for tmpInt             # <<<<<<<<<<<<<<
 *                          in range(start, self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].operation != 68],
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":259
 *     cdef ndarray[int, ndim=1] cGetQualSlice(self, size_t start=0):
 *         return np.array([self.Layout.layouts[tmpInt].quality for tmpInt
 *                          in range(start, self.Layout.length) if             # <<<<<<<<<<<<<<
 *                          self.Layout.layouts[tmpInt].operation != 68],
 *                         dtype=np.int32)
 */
  __pyx_t_3 = __pyx_v_self->Layout.length;
  for (__pyx_t_4 = __pyx_v_start; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_tmpInt = __pyx_t_4;

    /* "utilBMF/MergePairedAlignments.pyx":260
 *         return np.array([self.Layout.layouts[tmpInt].quality for tmpInt
 *                          in range(start, self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].operation != 68],             # <<<<<<<<<<<<<<
 *                         dtype=np.int32)
 * 
 */
    __pyx_t_5 = (((__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]).operation != 68) != 0);
    if (__pyx_t_5) {

      /* "utilBMF/MergePairedAlignments.pyx":258
 * 
 *     cdef ndarray[int, ndim=1] cGetQualSlice(self, size_t start=0):
 *         return np.array([self.Layout.layouts[tmpInt].quality for tmpInt             # <<<<<<<<<<<<<<
 *                          in range(start, self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].operation != 68],
 */
      __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]).quality); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
  }
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":261
 *                          in range(start, self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].operation != 68],
 *                         dtype=np.int32)             # <<<<<<<<<<<<<<
 * 
 *     cpdef ndarray[int, ndim=1] getQual(self):
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int32); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":258
 * 
 *     cdef ndarray[int, ndim=1] cGetQualSlice(self, size_t start=0):
 *         return np.array([self.Layout.layouts[tmpInt].quality for tmpInt             # <<<<<<<<<<<<<<
 *                          in range(start, self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].operation != 68],
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":257
 *                         dtype=np.int16)
 * 
 *     cdef ndarray[int, ndim=1] cGetQualSlice(self, size_t start=0):             # <<<<<<<<<<<<<<
 *         return np.array([self.Layout.layouts[tmpInt].quality for tmpInt
 *                          in range(start, self.Layout.length) if
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.cGetQualSlice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":263
 *                         dtype=np.int32)
 * 
 *     cpdef ndarray[int, ndim=1] getQual(self):             # <<<<<<<<<<<<<<
 *         return self.cGetQual()
 * 
 */

static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7getQual(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getQual(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_skip_dispatch) {
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getQual", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getQual); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7getQual)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((PyArrayObject *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "utilBMF/MergePairedAlignments.pyx":264
 * 
 *     cpdef ndarray[int, ndim=1] getQual(self):
 *         return self.cGetQual()             # <<<<<<<<<<<<<<
 * 
 *     cdef cystr cGetQualStringSlice(self, size_t start=0):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetQual(__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":263
 *                         dtype=np.int32)
 * 
 *     cpdef ndarray[int, ndim=1] getQual(self):             # <<<<<<<<<<<<<<
 *         return self.cGetQual()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getQual", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7getQual(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7getQual(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getQual (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_6getQual(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_6getQual(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getQual", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getQual(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getQual", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":266
 *         return self.cGetQual()
 * 
 *     cdef cystr cGetQualStringSlice(self, size_t start=0):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         return "".join([ph2chrInline(i) for i
 */

static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetQualStringSlice(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetQualStringSlice *__pyx_optional_args) {
  size_t __pyx_v_start = ((size_t)0);
  int __pyx_v_i;
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetQualSlice __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cGetQualStringSlice", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_start = __pyx_optional_args->start;
    }
  }

  /* "utilBMF/MergePairedAlignments.pyx":268
 *     cdef cystr cGetQualStringSlice(self, size_t start=0):
 *         cdef int i
 *         return "".join([ph2chrInline(i) for i             # <<<<<<<<<<<<<<
 *                         in self.cGetQualSlice(start)])
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":269
 *         cdef int i
 *         return "".join([ph2chrInline(i) for i
 *                         in self.cGetQualSlice(start)])             # <<<<<<<<<<<<<<
 * 
 *     cdef cystr cGetQualString(self):
 */
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.start = __pyx_v_start;
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetQualSlice(__pyx_v_self, &__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_i = __pyx_t_7;

    /* "utilBMF/MergePairedAlignments.pyx":268
 *     cdef cystr cGetQualStringSlice(self, size_t start=0):
 *         cdef int i
 *         return "".join([ph2chrInline(i) for i             # <<<<<<<<<<<<<<
 *                         in self.cGetQualSlice(start)])
 * 
 */
    __pyx_t_2 = __pyx_f_7utilBMF_8Inliners_ph2chrInline(__pyx_v_i); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyString_Join(__pyx_kp_s__11, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_4)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":266
 *         return self.cGetQual()
 * 
 *     cdef cystr cGetQualStringSlice(self, size_t start=0):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         return "".join([ph2chrInline(i) for i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.cGetQualStringSlice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":271
 *                         in self.cGetQualSlice(start)])
 * 
 *     cdef cystr cGetQualString(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         return "".join([ph2chrInline(i) for i in self.cGetQual()])
 */

static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetQualString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  int __pyx_v_i;
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cGetQualString", 0);

  /* "utilBMF/MergePairedAlignments.pyx":273
 *     cdef cystr cGetQualString(self):
 *         cdef int i
 *         return "".join([ph2chrInline(i) for i in self.cGetQual()])             # <<<<<<<<<<<<<<
 * 
 *     cpdef cystr getQualString(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetQual(__pyx_v_self)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_i = __pyx_t_6;
    __pyx_t_2 = __pyx_f_7utilBMF_8Inliners_ph2chrInline(__pyx_v_i); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s__11, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":271
 *                         in self.cGetQualSlice(start)])
 * 
 *     cdef cystr cGetQualString(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         return "".join([ph2chrInline(i) for i in self.cGetQual()])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.cGetQualString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":275
 *         return "".join([ph2chrInline(i) for i in self.cGetQual()])
 * 
 *     cpdef cystr getQualString(self):             # <<<<<<<<<<<<<<
 *         return self.cGetQualString()
 * 
 */

static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_9getQualString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getQualString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_skip_dispatch) {
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getQualString", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getQualString); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_9getQualString)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "utilBMF/MergePairedAlignments.pyx":276
 * 
 *     cpdef cystr getQualString(self):
 *         return self.cGetQualString()             # <<<<<<<<<<<<<<
 * 
 *     cpdef cystr getFAString(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetQualString(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":275
 *         return "".join([ph2chrInline(i) for i in self.cGetQual()])
 * 
 *     cpdef cystr getQualString(self):             # <<<<<<<<<<<<<<
 *         return self.cGetQualString()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getQualString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_9getQualString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_9getQualString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getQualString (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_8getQualString(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_8getQualString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getQualString", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getQualString(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getQualString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":278
 *         return self.cGetQualString()
 * 
 *     cpdef cystr getFAString(self):             # <<<<<<<<<<<<<<
 *         return self.cGetFAString()
 * 
 */

static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_11getFAString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getFAString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_skip_dispatch) {
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFAString", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getFAString); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_11getFAString)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "utilBMF/MergePairedAlignments.pyx":279
 * 
 *     cpdef cystr getFAString(self):
 *         return self.cGetFAString()             # <<<<<<<<<<<<<<
 * 
 *     cdef cystr cGetFAString(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetFAString(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":278
 *         return self.cGetQualString()
 * 
 *     cpdef cystr getFAString(self):             # <<<<<<<<<<<<<<
 *         return self.cGetFAString()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getFAString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_11getFAString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_11getFAString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFAString (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_10getFAString(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_10getFAString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFAString", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getFAString(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getFAString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":281
 *         return self.cGetFAString()
 * 
 *     cdef cystr cGetFAString(self):             # <<<<<<<<<<<<<<
 *         return ",".join(self.cGetAgreement().astype(str))
 * 
 */

static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetFAString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cGetFAString", 0);

  /* "utilBMF/MergePairedAlignments.pyx":282
 * 
 *     cdef cystr cGetFAString(self):
 *         return ",".join(self.cGetAgreement().astype(str))             # <<<<<<<<<<<<<<
 * 
 *     cpdef cystr getPVString(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetAgreement(__pyx_v_self)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_astype); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)((PyObject*)(&PyString_Type)))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyString_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyString_Type))));
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)((PyObject*)(&PyString_Type))));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s__2, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":281
 *         return self.cGetFAString()
 * 
 *     cdef cystr cGetFAString(self):             # <<<<<<<<<<<<<<
 *         return ",".join(self.cGetAgreement().astype(str))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.cGetFAString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":284
 *         return ",".join(self.cGetAgreement().astype(str))
 * 
 *     cpdef cystr getPVString(self):             # <<<<<<<<<<<<<<
 *         return self.cGetPVString()
 * 
 */

static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_13getPVString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getPVString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_skip_dispatch) {
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPVString", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getPVString); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_13getPVString)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "utilBMF/MergePairedAlignments.pyx":285
 * 
 *     cpdef cystr getPVString(self):
 *         return self.cGetPVString()             # <<<<<<<<<<<<<<
 * 
 *     cdef cystr cGetPVString(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetPVString(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":284
 *         return ",".join(self.cGetAgreement().astype(str))
 * 
 *     cpdef cystr getPVString(self):             # <<<<<<<<<<<<<<
 *         return self.cGetPVString()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getPVString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_13getPVString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_13getPVString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPVString (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_12getPVString(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_12getPVString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPVString", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getPVString(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getPVString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":287
 *         return self.cGetPVString()
 * 
 *     cdef cystr cGetPVString(self):             # <<<<<<<<<<<<<<
 *         return ",".join(self.cGetQual().astype(str))
 * 
 */

static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetPVString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cGetPVString", 0);

  /* "utilBMF/MergePairedAlignments.pyx":288
 * 
 *     cdef cystr cGetPVString(self):
 *         return ",".join(self.cGetQual().astype(str))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetQual(__pyx_v_self)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_astype); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)((PyObject*)(&PyString_Type)))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyString_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyString_Type))));
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)((PyObject*)(&PyString_Type))));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s__2, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":287
 *         return self.cGetPVString()
 * 
 *     cdef cystr cGetPVString(self):             # <<<<<<<<<<<<<<
 *         return ",".join(self.cGetQual().astype(str))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.cGetPVString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":290
 *         return ",".join(self.cGetQual().astype(str))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free(self.Layout.layouts)
 * 
 */

/* Python wrapper */
static void __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_15__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_15__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_14__dealloc__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_14__dealloc__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "utilBMF/MergePairedAlignments.pyx":291
 * 
 *     def __dealloc__(self):
 *         free(self.Layout.layouts)             # <<<<<<<<<<<<<<
 * 
 *     cdef ndarray[char] cGetSeqArrSlice(self, size_t start=0):
 */
  free(__pyx_v_self->Layout.layouts);

  /* "utilBMF/MergePairedAlignments.pyx":290
 *         return ",".join(self.cGetQual().astype(str))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free(self.Layout.layouts)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "utilBMF/MergePairedAlignments.pyx":293
 *         free(self.Layout.layouts)
 * 
 *     cdef ndarray[char] cGetSeqArrSlice(self, size_t start=0):             # <<<<<<<<<<<<<<
 *         """Returns a character array of the base calls
 *         if the operations aren't "D" (68)
 */

static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetSeqArrSlice(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetSeqArrSlice *__pyx_optional_args) {
  size_t __pyx_v_start = ((size_t)0);
  size_t __pyx_v_i;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cGetSeqArrSlice", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_start = __pyx_optional_args->start;
    }
  }

  /* "utilBMF/MergePairedAlignments.pyx":298
 *         """
 *         cdef size_t i
 *         return np.char.array([chrInline(self.Layout.layouts[i].base)             # <<<<<<<<<<<<<<
 *                               for i in xrange(start, self.Layout.length) if
 *                               self.Layout.layouts[i].operation != 68],
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_char); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "utilBMF/MergePairedAlignments.pyx":299
 *         cdef size_t i
 *         return np.char.array([chrInline(self.Layout.layouts[i].base)
 *                               for i in xrange(start, self.Layout.length) if             # <<<<<<<<<<<<<<
 *                               self.Layout.layouts[i].operation != 68],
 *                              itemsize=1)
 */
  __pyx_t_3 = __pyx_v_self->Layout.length;
  for (__pyx_t_4 = __pyx_v_start; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "utilBMF/MergePairedAlignments.pyx":300
 *         return np.char.array([chrInline(self.Layout.layouts[i].base)
 *                               for i in xrange(start, self.Layout.length) if
 *                               self.Layout.layouts[i].operation != 68],             # <<<<<<<<<<<<<<
 *                              itemsize=1)
 * 
 */
    __pyx_t_5 = (((__pyx_v_self->Layout.layouts[__pyx_v_i]).operation != 68) != 0);
    if (__pyx_t_5) {

      /* "utilBMF/MergePairedAlignments.pyx":298
 *         """
 *         cdef size_t i
 *         return np.char.array([chrInline(self.Layout.layouts[i].base)             # <<<<<<<<<<<<<<
 *                               for i in xrange(start, self.Layout.length) if
 *                               self.Layout.layouts[i].operation != 68],
 */
      __pyx_t_6 = __pyx_f_7utilBMF_8Inliners_chrInline((__pyx_v_self->Layout.layouts[__pyx_v_i]).base); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
  }
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_itemsize, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":293
 *         free(self.Layout.layouts)
 * 
 *     cdef ndarray[char] cGetSeqArrSlice(self, size_t start=0):             # <<<<<<<<<<<<<<
 *         """Returns a character array of the base calls
 *         if the operations aren't "D" (68)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.cGetSeqArrSlice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":303
 *                              itemsize=1)
 * 
 *     cdef ndarray[char] cGetSeqArr(self):             # <<<<<<<<<<<<<<
 *         """Returns a character array of the base calls
 *         if the operations aren't "D" (68)
 */

static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetSeqArr(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  size_t __pyx_v_i;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cGetSeqArr", 0);

  /* "utilBMF/MergePairedAlignments.pyx":308
 *         """
 *         cdef size_t i
 *         return np.char.array([chrInline(self.Layout.layouts[i].base)             # <<<<<<<<<<<<<<
 *                               for i in xrange(self.Layout.length) if
 *                               self.Layout.layouts[i].operation != 68],
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_char); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "utilBMF/MergePairedAlignments.pyx":309
 *         cdef size_t i
 *         return np.char.array([chrInline(self.Layout.layouts[i].base)
 *                               for i in xrange(self.Layout.length) if             # <<<<<<<<<<<<<<
 *                               self.Layout.layouts[i].operation != 68],
 *                              itemsize=1)
 */
  __pyx_t_3 = __pyx_v_self->Layout.length;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "utilBMF/MergePairedAlignments.pyx":310
 *         return np.char.array([chrInline(self.Layout.layouts[i].base)
 *                               for i in xrange(self.Layout.length) if
 *                               self.Layout.layouts[i].operation != 68],             # <<<<<<<<<<<<<<
 *                              itemsize=1)
 * 
 */
    __pyx_t_5 = (((__pyx_v_self->Layout.layouts[__pyx_v_i]).operation != 68) != 0);
    if (__pyx_t_5) {

      /* "utilBMF/MergePairedAlignments.pyx":308
 *         """
 *         cdef size_t i
 *         return np.char.array([chrInline(self.Layout.layouts[i].base)             # <<<<<<<<<<<<<<
 *                               for i in xrange(self.Layout.length) if
 *                               self.Layout.layouts[i].operation != 68],
 */
      __pyx_t_6 = __pyx_f_7utilBMF_8Inliners_chrInline((__pyx_v_self->Layout.layouts[__pyx_v_i]).base); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
  }
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_itemsize, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":303
 *                              itemsize=1)
 * 
 *     cdef ndarray[char] cGetSeqArr(self):             # <<<<<<<<<<<<<<
 *         """Returns a character array of the base calls
 *         if the operations aren't "D" (68)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.cGetSeqArr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":313
 *                              itemsize=1)
 * 
 *     cpdef ndarray[char] getSeqArr(self):             # <<<<<<<<<<<<<<
 *         return self.cGetSeqArr()
 * 
 */

static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_17getSeqArr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getSeqArr(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_skip_dispatch) {
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSeqArr", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getSeqArr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_17getSeqArr)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((PyArrayObject *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "utilBMF/MergePairedAlignments.pyx":314
 * 
 *     cpdef ndarray[char] getSeqArr(self):
 *         return self.cGetSeqArr()             # <<<<<<<<<<<<<<
 * 
 *     cpdef cystr getSeq(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetSeqArr(__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":313
 *                              itemsize=1)
 * 
 *     cpdef ndarray[char] getSeqArr(self):             # <<<<<<<<<<<<<<
 *         return self.cGetSeqArr()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getSeqArr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_17getSeqArr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_17getSeqArr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSeqArr (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_16getSeqArr(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_16getSeqArr(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSeqArr", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getSeqArr(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getSeqArr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":316
 *         return self.cGetSeqArr()
 * 
 *     cpdef cystr getSeq(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         return "".join([chrInline(self.Layout.layouts[i].base) for i in
 */

static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_19getSeq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getSeq(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSeq", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getSeq); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_19getSeq)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "utilBMF/MergePairedAlignments.pyx":318
 *     cpdef cystr getSeq(self):
 *         cdef int i
 *         return "".join([chrInline(self.Layout.layouts[i].base) for i in             # <<<<<<<<<<<<<<
 *                         xrange(self.Layout.length) if
 *                         self.Layout.layouts[i].operation != 68])
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":319
 *         cdef int i
 *         return "".join([chrInline(self.Layout.layouts[i].base) for i in
 *                         xrange(self.Layout.length) if             # <<<<<<<<<<<<<<
 *                         self.Layout.layouts[i].operation != 68])
 * 
 */
  __pyx_t_5 = __pyx_v_self->Layout.length;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "utilBMF/MergePairedAlignments.pyx":320
 *         return "".join([chrInline(self.Layout.layouts[i].base) for i in
 *                         xrange(self.Layout.length) if
 *                         self.Layout.layouts[i].operation != 68])             # <<<<<<<<<<<<<<
 * 
 *     @cython.returns(cystr)
 */
    __pyx_t_7 = (((__pyx_v_self->Layout.layouts[__pyx_v_i]).operation != 68) != 0);
    if (__pyx_t_7) {

      /* "utilBMF/MergePairedAlignments.pyx":318
 *     cpdef cystr getSeq(self):
 *         cdef int i
 *         return "".join([chrInline(self.Layout.layouts[i].base) for i in             # <<<<<<<<<<<<<<
 *                         xrange(self.Layout.length) if
 *                         self.Layout.layouts[i].operation != 68])
 */
      __pyx_t_2 = __pyx_f_7utilBMF_8Inliners_chrInline((__pyx_v_self->Layout.layouts[__pyx_v_i]).base); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
  }
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s__11, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":316
 *         return self.cGetSeqArr()
 * 
 *     cpdef cystr getSeq(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         return "".join([chrInline(self.Layout.layouts[i].base) for i in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getSeq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_19getSeq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_19getSeq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSeq (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_18getSeq(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_18getSeq(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSeq", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getSeq(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getSeq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":323
 * 
 *     @cython.returns(cystr)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         cdef ArrayLayoutPos_t tmpALP
 *         return "#".join(map(ALPToStr, [ALP for ALP in
 */

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_21__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_21__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_20__str__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_20__str__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t __pyx_v_ALP;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t *__pyx_t_3;
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t *__pyx_t_4;
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "utilBMF/MergePairedAlignments.pyx":325
 *     def __str__(self):
 *         cdef ArrayLayoutPos_t tmpALP
 *         return "#".join(map(ALPToStr, [ALP for ALP in             # <<<<<<<<<<<<<<
 *                                        self.Layout.layouts[:self.Layout.length]
 *                                        ]))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ALPToStr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "utilBMF/MergePairedAlignments.pyx":326
 *         cdef ArrayLayoutPos_t tmpALP
 *         return "#".join(map(ALPToStr, [ALP for ALP in
 *                                        self.Layout.layouts[:self.Layout.length]             # <<<<<<<<<<<<<<
 *                                        ]))
 *     '''
 */
  __pyx_t_4 = (__pyx_v_self->Layout.layouts + __pyx_v_self->Layout.length);
  for (__pyx_t_5 = __pyx_v_self->Layout.layouts; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;

    /* "utilBMF/MergePairedAlignments.pyx":325
 *     def __str__(self):
 *         cdef ArrayLayoutPos_t tmpALP
 *         return "#".join(map(ALPToStr, [ALP for ALP in             # <<<<<<<<<<<<<<
 *                                        self.Layout.layouts[:self.Layout.length]
 *                                        ]))
 */
    __pyx_v_ALP = (__pyx_t_3[0]);
    __pyx_t_6 = __pyx_convert__to_py_ArrayLayoutPos(__pyx_v_ALP); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyString_Join(__pyx_kp_s__12, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":323
 * 
 *     @cython.returns(cystr)
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         cdef ArrayLayoutPos_t tmpALP
 *         return "#".join(map(ALPToStr, [ALP for ALP in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":357
 *     '''
 * 
 *     cdef char MergeLayouts_in_place(self, ArrayLayout_t pairedLayout):             # <<<<<<<<<<<<<<
 *         print("Begging MergeLayouts_in_place")
 *         cdef char offset
 */

static char __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_MergeLayouts_in_place(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayout_t __pyx_v_pairedLayout) {
  char __pyx_v_offset;
  int __pyx_v_tmpInt;
  char __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("MergeLayouts_in_place", 0);

  /* "utilBMF/MergePairedAlignments.pyx":358
 * 
 *     cdef char MergeLayouts_in_place(self, ArrayLayout_t pairedLayout):
 *         print("Begging MergeLayouts_in_place")             # <<<<<<<<<<<<<<
 *         cdef char offset
 *         offset = MergeOverlappedLayouts(self.Layout, pairedLayout)
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_Begging_MergeLayouts_in_place) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "utilBMF/MergePairedAlignments.pyx":360
 *         print("Begging MergeLayouts_in_place")
 *         cdef char offset
 *         offset = MergeOverlappedLayouts(self.Layout, pairedLayout)             # <<<<<<<<<<<<<<
 *         cdef int tmpInt
 *         self.MergeSuccess = True
 */
  __pyx_v_offset = MergeOverlappedLayouts(__pyx_v_self->Layout, __pyx_v_pairedLayout);

  /* "utilBMF/MergePairedAlignments.pyx":362
 *         offset = MergeOverlappedLayouts(self.Layout, pairedLayout)
 *         cdef int tmpInt
 *         self.MergeSuccess = True             # <<<<<<<<<<<<<<
 *         for tmpInt in range(self.Layout.length):
 *             if(self.Layout.layouts[tmpInt].mergeAgreed < 0):
 */
  __pyx_v_self->MergeSuccess = 1;

  /* "utilBMF/MergePairedAlignments.pyx":363
 *         cdef int tmpInt
 *         self.MergeSuccess = True
 *         for tmpInt in range(self.Layout.length):             # <<<<<<<<<<<<<<
 *             if(self.Layout.layouts[tmpInt].mergeAgreed < 0):
 *                 self.MergeSuccess = False
 */
  __pyx_t_1 = __pyx_v_self->Layout.length;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_tmpInt = __pyx_t_2;

    /* "utilBMF/MergePairedAlignments.pyx":364
 *         self.MergeSuccess = True
 *         for tmpInt in range(self.Layout.length):
 *             if(self.Layout.layouts[tmpInt].mergeAgreed < 0):             # <<<<<<<<<<<<<<
 *                 self.MergeSuccess = False
 *         self.update()
 */
    __pyx_t_3 = (((__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]).mergeAgreed < 0) != 0);
    if (__pyx_t_3) {

      /* "utilBMF/MergePairedAlignments.pyx":365
 *         for tmpInt in range(self.Layout.length):
 *             if(self.Layout.layouts[tmpInt].mergeAgreed < 0):
 *                 self.MergeSuccess = False             # <<<<<<<<<<<<<<
 *         self.update()
 *         self.isMerged = True
 */
      __pyx_v_self->MergeSuccess = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
  }

  /* "utilBMF/MergePairedAlignments.pyx":366
 *             if(self.Layout.layouts[tmpInt].mergeAgreed < 0):
 *                 self.MergeSuccess = False
 *         self.update()             # <<<<<<<<<<<<<<
 *         self.isMerged = True
 *         return offset
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":367
 *                 self.MergeSuccess = False
 *         self.update()
 *         self.isMerged = True             # <<<<<<<<<<<<<<
 *         return offset
 * 
 */
  __pyx_v_self->isMerged = 1;

  /* "utilBMF/MergePairedAlignments.pyx":368
 *         self.update()
 *         self.isMerged = True
 *         return offset             # <<<<<<<<<<<<<<
 * 
 *     cdef ndarray[np.int16_t, ndim=1] getMergeAgreements(self):
 */
  __pyx_r = __pyx_v_offset;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":357
 *     '''
 * 
 *     cdef char MergeLayouts_in_place(self, ArrayLayout_t pairedLayout):             # <<<<<<<<<<<<<<
 *         print("Begging MergeLayouts_in_place")
 *         cdef char offset
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("utilBMF.MergePairedAlignments.Layout.MergeLayouts_in_place", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":370
 *         return offset
 * 
 *     cdef ndarray[np.int16_t, ndim=1] getMergeAgreements(self):             # <<<<<<<<<<<<<<
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].readPos for tmpInt
 */

static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getMergeAgreements(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  int __pyx_v_tmpInt;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMergeAgreements", 0);

  /* "utilBMF/MergePairedAlignments.pyx":372
 *     cdef ndarray[np.int16_t, ndim=1] getMergeAgreements(self):
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].readPos for tmpInt             # <<<<<<<<<<<<<<
 *                          in range(self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].mergeAgreed == 2],
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":373
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].readPos for tmpInt
 *                          in range(self.Layout.length) if             # <<<<<<<<<<<<<<
 *                          self.Layout.layouts[tmpInt].mergeAgreed == 2],
 *                         dtype=np.int16)
 */
  __pyx_t_3 = __pyx_v_self->Layout.length;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_tmpInt = __pyx_t_4;

    /* "utilBMF/MergePairedAlignments.pyx":374
 *         return np.array([self.Layout.layouts[tmpInt].readPos for tmpInt
 *                          in range(self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].mergeAgreed == 2],             # <<<<<<<<<<<<<<
 *                         dtype=np.int16)
 * 
 */
    __pyx_t_5 = (((__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]).mergeAgreed == 2) != 0);
    if (__pyx_t_5) {

      /* "utilBMF/MergePairedAlignments.pyx":372
 *     cdef ndarray[np.int16_t, ndim=1] getMergeAgreements(self):
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].readPos for tmpInt             # <<<<<<<<<<<<<<
 *                          in range(self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].mergeAgreed == 2],
 */
      __pyx_t_6 = __Pyx_PyInt_From_uint16_t((__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]).readPos); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
  }
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":375
 *                          in range(self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].mergeAgreed == 2],
 *                         dtype=np.int16)             # <<<<<<<<<<<<<<
 * 
 *     cdef ndarray[np.int16_t, ndim=1] getMergedPositions(self):
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int16); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":372
 *     cdef ndarray[np.int16_t, ndim=1] getMergeAgreements(self):
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].readPos for tmpInt             # <<<<<<<<<<<<<<
 *                          in range(self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].mergeAgreed == 2],
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":370
 *         return offset
 * 
 *     cdef ndarray[np.int16_t, ndim=1] getMergeAgreements(self):             # <<<<<<<<<<<<<<
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].readPos for tmpInt
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getMergeAgreements", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":377
 *                         dtype=np.int16)
 * 
 *     cdef ndarray[np.int16_t, ndim=1] getMergedPositions(self):             # <<<<<<<<<<<<<<
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].readPos for tmpInt
 */

static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getMergedPositions(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  int __pyx_v_tmpInt;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMergedPositions", 0);

  /* "utilBMF/MergePairedAlignments.pyx":379
 *     cdef ndarray[np.int16_t, ndim=1] getMergedPositions(self):
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].readPos for tmpInt             # <<<<<<<<<<<<<<
 *                          in range(self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].mergeAgreed != 1],
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":380
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].readPos for tmpInt
 *                          in range(self.Layout.length) if             # <<<<<<<<<<<<<<
 *                          self.Layout.layouts[tmpInt].mergeAgreed != 1],
 *                         dtype=np.int16)
 */
  __pyx_t_3 = __pyx_v_self->Layout.length;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_tmpInt = __pyx_t_4;

    /* "utilBMF/MergePairedAlignments.pyx":381
 *         return np.array([self.Layout.layouts[tmpInt].readPos for tmpInt
 *                          in range(self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].mergeAgreed != 1],             # <<<<<<<<<<<<<<
 *                         dtype=np.int16)
 * 
 */
    __pyx_t_5 = (((__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]).mergeAgreed != 1) != 0);
    if (__pyx_t_5) {

      /* "utilBMF/MergePairedAlignments.pyx":379
 *     cdef ndarray[np.int16_t, ndim=1] getMergedPositions(self):
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].readPos for tmpInt             # <<<<<<<<<<<<<<
 *                          in range(self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].mergeAgreed != 1],
 */
      __pyx_t_6 = __Pyx_PyInt_From_uint16_t((__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]).readPos); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
  }
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":382
 *                          in range(self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].mergeAgreed != 1],
 *                         dtype=np.int16)             # <<<<<<<<<<<<<<
 * 
 *     cdef set_merge_tags_BT(self):
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int16); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":379
 *     cdef ndarray[np.int16_t, ndim=1] getMergedPositions(self):
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].readPos for tmpInt             # <<<<<<<<<<<<<<
 *                          in range(self.Layout.length) if
 *                          self.Layout.layouts[tmpInt].mergeAgreed != 1],
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":377
 *                         dtype=np.int16)
 * 
 *     cdef ndarray[np.int16_t, ndim=1] getMergedPositions(self):             # <<<<<<<<<<<<<<
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].readPos for tmpInt
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getMergedPositions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":384
 *                         dtype=np.int16)
 * 
 *     cdef set_merge_tags_BT(self):             # <<<<<<<<<<<<<<
 *         cdef cystr tag
 *         cdef object value
 */

static PyObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_set_merge_tags_BT(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_tag = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_merge_tags_BT", 0);

  /* "utilBMF/MergePairedAlignments.pyx":387
 *         cdef cystr tag
 *         cdef object value
 *         for tag, value in self.get_merge_tags():             # <<<<<<<<<<<<<<
 *             self.tagDict[tag] = BamTag.fromtuple((tag, value))
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->get_merge_tags(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
      index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_7 = NULL;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L6_unpacking_done:;
    }
    if (!(likely(PyString_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_4)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_tag, ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_4));
    __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":388
 *         cdef object value
 *         for tag, value in self.get_merge_tags():
 *             self.tagDict[tag] = BamTag.fromtuple((tag, value))             # <<<<<<<<<<<<<<
 * 
 *     cdef list get_merge_tags(self):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)((PyObject*)__pyx_ptype_7utilBMF_8HTSUtils_BamTag)), __pyx_n_s_fromtuple); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_tag);
    __Pyx_GIVEREF(__pyx_v_tag);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_tag);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_value);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v_self->tagDict == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (unlikely(PyDict_SetItem(__pyx_v_self->tagDict, __pyx_v_tag, __pyx_t_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":387
 *         cdef cystr tag
 *         cdef object value
 *         for tag, value in self.get_merge_tags():             # <<<<<<<<<<<<<<
 *             self.tagDict[tag] = BamTag.fromtuple((tag, value))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":384
 *                         dtype=np.int16)
 * 
 *     cdef set_merge_tags_BT(self):             # <<<<<<<<<<<<<<
 *         cdef cystr tag
 *         cdef object value
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.set_merge_tags_BT", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tag);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":390
 *             self.tagDict[tag] = BamTag.fromtuple((tag, value))
 * 
 *     cdef list get_merge_tags(self):             # <<<<<<<<<<<<<<
 *         cdef ndarray[np.int32_t, ndim=1] GenDiscPos
 *         cdef ndarray[np.int16_t, ndim=1] ReadDiscPos
 */

static PyObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_get_merge_tags(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyArrayObject *__pyx_v_GenDiscPos = 0;
  PyArrayObject *__pyx_v_ReadDiscPos = 0;
  PyObject *__pyx_v_PMStr = 0;
  PyObject *__pyx_v_MAStr = 0;
  PyObject *__pyx_v_DGStr = 0;
  PyObject *__pyx_v_DRStr = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_GenDiscPos;
  __Pyx_Buffer __pyx_pybuffer_GenDiscPos;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_ReadDiscPos;
  __Pyx_Buffer __pyx_pybuffer_ReadDiscPos;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_merge_tags", 0);
  __pyx_pybuffer_GenDiscPos.pybuffer.buf = NULL;
  __pyx_pybuffer_GenDiscPos.refcount = 0;
  __pyx_pybuffernd_GenDiscPos.data = NULL;
  __pyx_pybuffernd_GenDiscPos.rcbuffer = &__pyx_pybuffer_GenDiscPos;
  __pyx_pybuffer_ReadDiscPos.pybuffer.buf = NULL;
  __pyx_pybuffer_ReadDiscPos.refcount = 0;
  __pyx_pybuffernd_ReadDiscPos.data = NULL;
  __pyx_pybuffernd_ReadDiscPos.rcbuffer = &__pyx_pybuffer_ReadDiscPos;

  /* "utilBMF/MergePairedAlignments.pyx":395
 *         cdef str PMStr, MAStr, DGStr, DRStr
 * 
 *         assert self.isMerged             # <<<<<<<<<<<<<<
 * 
 *         GenDiscPos = self.cGetGenomicDiscordantPositions()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(__pyx_v_self->isMerged != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "utilBMF/MergePairedAlignments.pyx":397
 *         assert self.isMerged
 * 
 *         GenDiscPos = self.cGetGenomicDiscordantPositions()             # <<<<<<<<<<<<<<
 *         ReadDiscPos = self.cGetReadDiscordantPositions()
 *         PMStr = ",".join(self.getMergedPositions().astype(str))
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetGenomicDiscordantPositions(__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_GenDiscPos.rcbuffer->pybuffer);
    __pyx_t_2 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_GenDiscPos.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_2 < 0)) {
      PyErr_Fetch(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_GenDiscPos.rcbuffer->pybuffer, (PyObject*)__pyx_v_GenDiscPos, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_3); Py_XDECREF(__pyx_t_4); Py_XDECREF(__pyx_t_5);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      }
    }
    __pyx_pybuffernd_GenDiscPos.diminfo[0].strides = __pyx_pybuffernd_GenDiscPos.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_GenDiscPos.diminfo[0].shape = __pyx_pybuffernd_GenDiscPos.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_GenDiscPos = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":398
 * 
 *         GenDiscPos = self.cGetGenomicDiscordantPositions()
 *         ReadDiscPos = self.cGetReadDiscordantPositions()             # <<<<<<<<<<<<<<
 *         PMStr = ",".join(self.getMergedPositions().astype(str))
 *         MAStr = ",".join(self.getMergeAgreements().astype(str))
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetReadDiscordantPositions(__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ReadDiscPos.rcbuffer->pybuffer);
    __pyx_t_2 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ReadDiscPos.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_int16_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_2 < 0)) {
      PyErr_Fetch(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ReadDiscPos.rcbuffer->pybuffer, (PyObject*)__pyx_v_ReadDiscPos, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int16_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_5); Py_XDECREF(__pyx_t_4); Py_XDECREF(__pyx_t_3);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_5, __pyx_t_4, __pyx_t_3);
      }
    }
    __pyx_pybuffernd_ReadDiscPos.diminfo[0].strides = __pyx_pybuffernd_ReadDiscPos.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_ReadDiscPos.diminfo[0].shape = __pyx_pybuffernd_ReadDiscPos.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ReadDiscPos = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":399
 *         GenDiscPos = self.cGetGenomicDiscordantPositions()
 *         ReadDiscPos = self.cGetReadDiscordantPositions()
 *         PMStr = ",".join(self.getMergedPositions().astype(str))             # <<<<<<<<<<<<<<
 *         MAStr = ",".join(self.getMergeAgreements().astype(str))
 *         DGStr = ",".join(GenDiscPos.astype(str))
 */
  __pyx_t_6 = ((PyObject *)((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->getMergedPositions(__pyx_v_self)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_astype); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, ((PyObject *)((PyObject*)(&PyString_Type)))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyString_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyString_Type))));
    PyTuple_SET_ITEM(__pyx_t_8, 0+1, ((PyObject *)((PyObject*)(&PyString_Type))));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyString_Join(__pyx_kp_s__2, __pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_7)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_PMStr = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":400
 *         ReadDiscPos = self.cGetReadDiscordantPositions()
 *         PMStr = ",".join(self.getMergedPositions().astype(str))
 *         MAStr = ",".join(self.getMergeAgreements().astype(str))             # <<<<<<<<<<<<<<
 *         DGStr = ",".join(GenDiscPos.astype(str))
 *         DRStr = ",".join(ReadDiscPos.astype(str))
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->getMergeAgreements(__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_astype); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, ((PyObject *)((PyObject*)(&PyString_Type)))); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1); __pyx_t_1 = NULL;
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyString_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyString_Type))));
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, ((PyObject *)((PyObject*)(&PyString_Type))));
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyString_Join(__pyx_kp_s__2, __pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_8))||((__pyx_t_8) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_8)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_MAStr = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":401
 *         PMStr = ",".join(self.getMergedPositions().astype(str))
 *         MAStr = ",".join(self.getMergeAgreements().astype(str))
 *         DGStr = ",".join(GenDiscPos.astype(str))             # <<<<<<<<<<<<<<
 *         DRStr = ",".join(ReadDiscPos.astype(str))
 *         if(len(GenDiscPos) > 0):
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_GenDiscPos), __pyx_n_s_astype); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_7, ((PyObject *)((PyObject*)(&PyString_Type)))); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
  } else {
    __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyString_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyString_Type))));
    PyTuple_SET_ITEM(__pyx_t_1, 0+1, ((PyObject *)((PyObject*)(&PyString_Type))));
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyString_Join(__pyx_kp_s__2, __pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_7)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_DGStr = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":402
 *         MAStr = ",".join(self.getMergeAgreements().astype(str))
 *         DGStr = ",".join(GenDiscPos.astype(str))
 *         DRStr = ",".join(ReadDiscPos.astype(str))             # <<<<<<<<<<<<<<
 *         if(len(GenDiscPos) > 0):
 *             return [("PM", PMStr), ("MA", MAStr),
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ReadDiscPos), __pyx_n_s_astype); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, ((PyObject *)((PyObject*)(&PyString_Type)))); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1); __pyx_t_1 = NULL;
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyString_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyString_Type))));
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, ((PyObject *)((PyObject*)(&PyString_Type))));
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyString_Join(__pyx_kp_s__2, __pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_8))||((__pyx_t_8) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_8)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_DRStr = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":403
 *         DGStr = ",".join(GenDiscPos.astype(str))
 *         DRStr = ",".join(ReadDiscPos.astype(str))
 *         if(len(GenDiscPos) > 0):             # <<<<<<<<<<<<<<
 *             return [("PM", PMStr), ("MA", MAStr),
 *                     ("ot", self.tlen), ("mp", self.pnext),
 */
  __pyx_t_9 = PyObject_Length(((PyObject *)__pyx_v_GenDiscPos)); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_10 = ((__pyx_t_9 > 0) != 0);
  if (__pyx_t_10) {

    /* "utilBMF/MergePairedAlignments.pyx":404
 *         DRStr = ",".join(ReadDiscPos.astype(str))
 *         if(len(GenDiscPos) > 0):
 *             return [("PM", PMStr), ("MA", MAStr),             # <<<<<<<<<<<<<<
 *                     ("ot", self.tlen), ("mp", self.pnext),
 *                     ("om", self.mapq), ("MP", "T"),
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_n_s_PM);
    __Pyx_GIVEREF(__pyx_n_s_PM);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_PM);
    __Pyx_INCREF(__pyx_v_PMStr);
    __Pyx_GIVEREF(__pyx_v_PMStr);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_PMStr);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_n_s_MA);
    __Pyx_GIVEREF(__pyx_n_s_MA);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_MA);
    __Pyx_INCREF(__pyx_v_MAStr);
    __Pyx_GIVEREF(__pyx_v_MAStr);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_MAStr);

    /* "utilBMF/MergePairedAlignments.pyx":405
 *         if(len(GenDiscPos) > 0):
 *             return [("PM", PMStr), ("MA", MAStr),
 *                     ("ot", self.tlen), ("mp", self.pnext),             # <<<<<<<<<<<<<<
 *                     ("om", self.mapq), ("MP", "T"),
 *                     ("DG", DGStr), ("DR", DRStr),
 */
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->tlen); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_ot);
    __Pyx_GIVEREF(__pyx_n_s_ot);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ot);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_self->pnext); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_n_s_mp);
    __Pyx_GIVEREF(__pyx_n_s_mp);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_n_s_mp);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":406
 *             return [("PM", PMStr), ("MA", MAStr),
 *                     ("ot", self.tlen), ("mp", self.pnext),
 *                     ("om", self.mapq), ("MP", "T"),             # <<<<<<<<<<<<<<
 *                     ("DG", DGStr), ("DR", DRStr),
 *                     ("PV", self.cGetPVString()),
 */
    __pyx_t_6 = __Pyx_PyInt_From_unsigned_char(__pyx_v_self->mapq); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_INCREF(__pyx_n_s_om);
    __Pyx_GIVEREF(__pyx_n_s_om);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_n_s_om);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":407
 *                     ("ot", self.tlen), ("mp", self.pnext),
 *                     ("om", self.mapq), ("MP", "T"),
 *                     ("DG", DGStr), ("DR", DRStr),             # <<<<<<<<<<<<<<
 *                     ("PV", self.cGetPVString()),
 *                     ("FA", self.cGetFAString())]
 */
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_n_s_DG);
    __Pyx_GIVEREF(__pyx_n_s_DG);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_DG);
    __Pyx_INCREF(__pyx_v_DGStr);
    __Pyx_GIVEREF(__pyx_v_DGStr);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_DGStr);
    __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_INCREF(__pyx_n_s_DR);
    __Pyx_GIVEREF(__pyx_n_s_DR);
    PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_n_s_DR);
    __Pyx_INCREF(__pyx_v_DRStr);
    __Pyx_GIVEREF(__pyx_v_DRStr);
    PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_v_DRStr);

    /* "utilBMF/MergePairedAlignments.pyx":408
 *                     ("om", self.mapq), ("MP", "T"),
 *                     ("DG", DGStr), ("DR", DRStr),
 *                     ("PV", self.cGetPVString()),             # <<<<<<<<<<<<<<
 *                     ("FA", self.cGetFAString())]
 *         else:
 */
    __pyx_t_14 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetPVString(__pyx_v_self); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_INCREF(__pyx_n_s_PV);
    __Pyx_GIVEREF(__pyx_n_s_PV);
    PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_n_s_PV);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_14);
    __pyx_t_14 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":409
 *                     ("DG", DGStr), ("DR", DRStr),
 *                     ("PV", self.cGetPVString()),
 *                     ("FA", self.cGetFAString())]             # <<<<<<<<<<<<<<
 *         else:
 *             return [("PM", PMStr), ("MA", MAStr),
 */
    __pyx_t_14 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetFAString(__pyx_v_self); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_INCREF(__pyx_n_s_FA);
    __Pyx_GIVEREF(__pyx_n_s_FA);
    PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_n_s_FA);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_14);
    __pyx_t_14 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":404
 *         DRStr = ",".join(ReadDiscPos.astype(str))
 *         if(len(GenDiscPos) > 0):
 *             return [("PM", PMStr), ("MA", MAStr),             # <<<<<<<<<<<<<<
 *                     ("ot", self.tlen), ("mp", self.pnext),
 *                     ("om", self.mapq), ("MP", "T"),
 */
    __pyx_t_14 = PyList_New(10); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_14, 1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_14, 2, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_11);
    PyList_SET_ITEM(__pyx_t_14, 3, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_12);
    PyList_SET_ITEM(__pyx_t_14, 4, __pyx_t_12);
    __Pyx_INCREF(__pyx_tuple__13);
    __Pyx_GIVEREF(__pyx_tuple__13);
    PyList_SET_ITEM(__pyx_t_14, 5, __pyx_tuple__13);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_14, 6, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_13);
    PyList_SET_ITEM(__pyx_t_14, 7, __pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_15);
    PyList_SET_ITEM(__pyx_t_14, 8, __pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_16);
    PyList_SET_ITEM(__pyx_t_14, 9, __pyx_t_16);
    __pyx_t_8 = 0;
    __pyx_t_7 = 0;
    __pyx_t_1 = 0;
    __pyx_t_11 = 0;
    __pyx_t_12 = 0;
    __pyx_t_6 = 0;
    __pyx_t_13 = 0;
    __pyx_t_15 = 0;
    __pyx_t_16 = 0;
    __pyx_r = ((PyObject*)__pyx_t_14);
    __pyx_t_14 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "utilBMF/MergePairedAlignments.pyx":411
 *                     ("FA", self.cGetFAString())]
 *         else:
 *             return [("PM", PMStr), ("MA", MAStr),             # <<<<<<<<<<<<<<
 *                     ("ot", self.tlen), ("mp", self.pnext),
 *                     ("om", self.mapq), ("MP", "T"),
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_INCREF(__pyx_n_s_PM);
    __Pyx_GIVEREF(__pyx_n_s_PM);
    PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_n_s_PM);
    __Pyx_INCREF(__pyx_v_PMStr);
    __Pyx_GIVEREF(__pyx_v_PMStr);
    PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_v_PMStr);
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_INCREF(__pyx_n_s_MA);
    __Pyx_GIVEREF(__pyx_n_s_MA);
    PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_n_s_MA);
    __Pyx_INCREF(__pyx_v_MAStr);
    __Pyx_GIVEREF(__pyx_v_MAStr);
    PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_v_MAStr);

    /* "utilBMF/MergePairedAlignments.pyx":412
 *         else:
 *             return [("PM", PMStr), ("MA", MAStr),
 *                     ("ot", self.tlen), ("mp", self.pnext),             # <<<<<<<<<<<<<<
 *                     ("om", self.mapq), ("MP", "T"),
 *                     ("PV", self.cGetPVString()),
 */
    __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_v_self->tlen); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_INCREF(__pyx_n_s_ot);
    __Pyx_GIVEREF(__pyx_n_s_ot);
    PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_n_s_ot);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_15);
    __pyx_t_15 = 0;
    __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_v_self->pnext); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_n_s_mp);
    __Pyx_GIVEREF(__pyx_n_s_mp);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_mp);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_15);
    __pyx_t_15 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":413
 *             return [("PM", PMStr), ("MA", MAStr),
 *                     ("ot", self.tlen), ("mp", self.pnext),
 *                     ("om", self.mapq), ("MP", "T"),             # <<<<<<<<<<<<<<
 *                     ("PV", self.cGetPVString()),
 *                     ("FA", self.cGetFAString())]
 */
    __pyx_t_15 = __Pyx_PyInt_From_unsigned_char(__pyx_v_self->mapq); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_INCREF(__pyx_n_s_om);
    __Pyx_GIVEREF(__pyx_n_s_om);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_n_s_om);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_15);
    __pyx_t_15 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":414
 *                     ("ot", self.tlen), ("mp", self.pnext),
 *                     ("om", self.mapq), ("MP", "T"),
 *                     ("PV", self.cGetPVString()),             # <<<<<<<<<<<<<<
 *                     ("FA", self.cGetFAString())]
 * 
 */
    __pyx_t_15 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetPVString(__pyx_v_self); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_n_s_PV);
    __Pyx_GIVEREF(__pyx_n_s_PV);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_n_s_PV);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_15);
    __pyx_t_15 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":415
 *                     ("om", self.mapq), ("MP", "T"),
 *                     ("PV", self.cGetPVString()),
 *                     ("FA", self.cGetFAString())]             # <<<<<<<<<<<<<<
 * 
 *     cpdef cystr __sam__(self, Layout_t pairedLayout):
 */
    __pyx_t_15 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetFAString(__pyx_v_self); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_FA);
    __Pyx_GIVEREF(__pyx_n_s_FA);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_FA);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_15);
    __pyx_t_15 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":411
 *                     ("FA", self.cGetFAString())]
 *         else:
 *             return [("PM", PMStr), ("MA", MAStr),             # <<<<<<<<<<<<<<
 *                     ("ot", self.tlen), ("mp", self.pnext),
 *                     ("om", self.mapq), ("MP", "T"),
 */
    __pyx_t_15 = PyList_New(8); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_14);
    PyList_SET_ITEM(__pyx_t_15, 0, __pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_16);
    PyList_SET_ITEM(__pyx_t_15, 1, __pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_13);
    PyList_SET_ITEM(__pyx_t_15, 2, __pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_15, 3, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_12);
    PyList_SET_ITEM(__pyx_t_15, 4, __pyx_t_12);
    __Pyx_INCREF(__pyx_tuple__14);
    __Pyx_GIVEREF(__pyx_tuple__14);
    PyList_SET_ITEM(__pyx_t_15, 5, __pyx_tuple__14);
    __Pyx_GIVEREF(__pyx_t_11);
    PyList_SET_ITEM(__pyx_t_15, 6, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_15, 7, __pyx_t_1);
    __pyx_t_14 = 0;
    __pyx_t_16 = 0;
    __pyx_t_13 = 0;
    __pyx_t_6 = 0;
    __pyx_t_12 = 0;
    __pyx_t_11 = 0;
    __pyx_t_1 = 0;
    __pyx_r = ((PyObject*)__pyx_t_15);
    __pyx_t_15 = 0;
    goto __pyx_L0;
  }

  /* "utilBMF/MergePairedAlignments.pyx":390
 *             self.tagDict[tag] = BamTag.fromtuple((tag, value))
 * 
 *     cdef list get_merge_tags(self):             # <<<<<<<<<<<<<<
 *         cdef ndarray[np.int32_t, ndim=1] GenDiscPos
 *         cdef ndarray[np.int16_t, ndim=1] ReadDiscPos
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_GenDiscPos.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ReadDiscPos.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.get_merge_tags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_GenDiscPos.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ReadDiscPos.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_GenDiscPos);
  __Pyx_XDECREF((PyObject *)__pyx_v_ReadDiscPos);
  __Pyx_XDECREF(__pyx_v_PMStr);
  __Pyx_XDECREF(__pyx_v_MAStr);
  __Pyx_XDECREF(__pyx_v_DGStr);
  __Pyx_XDECREF(__pyx_v_DRStr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":417
 *                     ("FA", self.cGetFAString())]
 * 
 *     cpdef cystr __sam__(self, Layout_t pairedLayout):             # <<<<<<<<<<<<<<
 *         return self.__csam__(pairedLayout)
 * 
 */

static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_23__sam__(PyObject *__pyx_v_self, PyObject *__pyx_v_pairedLayout); /*proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout___sam__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, __pyx_t_7utilBMF_21MergePairedAlignments_Layout_t __pyx_v_pairedLayout, int __pyx_skip_dispatch) {
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sam__", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sam); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_23__sam__)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_pairedLayout)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_pairedLayout));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_pairedLayout));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_pairedLayout));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "utilBMF/MergePairedAlignments.pyx":418
 * 
 *     cpdef cystr __sam__(self, Layout_t pairedLayout):
 *         return self.__csam__(pairedLayout)             # <<<<<<<<<<<<<<
 * 
 *     cdef cystr __csam__(self, Layout_t pairedLayout):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->__pyx___csam__(__pyx_v_self, __pyx_v_pairedLayout); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":417
 *                     ("FA", self.cGetFAString())]
 * 
 *     cpdef cystr __sam__(self, Layout_t pairedLayout):             # <<<<<<<<<<<<<<
 *         return self.__csam__(pairedLayout)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.__sam__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_23__sam__(PyObject *__pyx_v_self, PyObject *__pyx_v_pairedLayout); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_23__sam__(PyObject *__pyx_v_self, PyObject *__pyx_v_pairedLayout) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sam__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pairedLayout), __pyx_ptype_7utilBMF_21MergePairedAlignments_Layout, 1, "pairedLayout", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_22__sam__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self), ((__pyx_t_7utilBMF_21MergePairedAlignments_Layout_t)__pyx_v_pairedLayout));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_22__sam__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, __pyx_t_7utilBMF_21MergePairedAlignments_Layout_t __pyx_v_pairedLayout) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sam__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7utilBMF_21MergePairedAlignments_6Layout___sam__(__pyx_v_self, __pyx_v_pairedLayout, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.__sam__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":420
 *         return self.__csam__(pairedLayout)
 * 
 *     cdef cystr __csam__(self, Layout_t pairedLayout):             # <<<<<<<<<<<<<<
 *         """
 *         Converts the record into a SAM record.
 */

static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout___csam__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, __pyx_t_7utilBMF_21MergePairedAlignments_Layout_t __pyx_v_pairedLayout) {
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_NewCigarString = 0;
  int __pyx_v_offset;
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetQualSlice __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetAgreementSlice __pyx_t_13;
  struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetCigarStringSlice __pyx_t_14;
  struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetSeqArrSlice __pyx_t_15;
  struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetQualStringSlice __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__csam__", 0);

  /* "utilBMF/MergePairedAlignments.pyx":428
 *         cdef cystr NewCigarString
 *         cdef int offset
 *         offset = self.MergeLayouts_in_place(pairedLayout.Layout)             # <<<<<<<<<<<<<<
 *         if(self.MergeSuccess is False):
 *             return None
 */
  __pyx_v_offset = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->MergeLayouts_in_place(__pyx_v_self, __pyx_v_pairedLayout->Layout);

  /* "utilBMF/MergePairedAlignments.pyx":429
 *         cdef int offset
 *         offset = self.MergeLayouts_in_place(pairedLayout.Layout)
 *         if(self.MergeSuccess is False):             # <<<<<<<<<<<<<<
 *             return None
 *         self.update()
 */
  __pyx_t_1 = ((__pyx_v_self->MergeSuccess == 0) != 0);
  if (__pyx_t_1) {

    /* "utilBMF/MergePairedAlignments.pyx":430
 *         offset = self.MergeLayouts_in_place(pairedLayout.Layout)
 *         if(self.MergeSuccess is False):
 *             return None             # <<<<<<<<<<<<<<
 *         self.update()
 *         try:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)Py_None);
    goto __pyx_L0;
  }

  /* "utilBMF/MergePairedAlignments.pyx":431
 *         if(self.MergeSuccess is False):
 *             return None
 *         self.update()             # <<<<<<<<<<<<<<
 *         try:
 *             self.tagDict["PV"]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":432
 *             return None
 *         self.update()
 *         try:             # <<<<<<<<<<<<<<
 *             self.tagDict["PV"]
 *             pass
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "utilBMF/MergePairedAlignments.pyx":433
 *         self.update()
 *         try:
 *             self.tagDict["PV"]             # <<<<<<<<<<<<<<
 *             pass
 *         except KeyError:
 */
      if (unlikely(__pyx_v_self->tagDict == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
      }
      __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_self->tagDict, __pyx_n_s_PV); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L4_error;};
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L11_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":435
 *             self.tagDict["PV"]
 *             pass
 *         except KeyError:             # <<<<<<<<<<<<<<
 *             print(repr(self.tagDict))
 *             raise KeyError
 */
    __pyx_t_8 = PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.__csam__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_4);

      /* "utilBMF/MergePairedAlignments.pyx":436
 *             pass
 *         except KeyError:
 *             print(repr(self.tagDict))             # <<<<<<<<<<<<<<
 *             raise KeyError
 *         self.tagDict["PV"].value += (
 */
      __pyx_t_9 = __pyx_v_self->tagDict;
      __Pyx_INCREF(__pyx_t_9);
      __pyx_t_10 = PyObject_Repr(__pyx_t_9); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_10) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "utilBMF/MergePairedAlignments.pyx":437
 *         except KeyError:
 *             print(repr(self.tagDict))
 *             raise KeyError             # <<<<<<<<<<<<<<
 *         self.tagDict["PV"].value += (
 *             "," + ",".join(self.cGetQualSlice(offset).astype(str)))
 */
      __Pyx_Raise(__pyx_builtin_KeyError, 0, 0, 0);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L11_try_end:;
  }

  /* "utilBMF/MergePairedAlignments.pyx":438
 *             print(repr(self.tagDict))
 *             raise KeyError
 *         self.tagDict["PV"].value += (             # <<<<<<<<<<<<<<
 *             "," + ",".join(self.cGetQualSlice(offset).astype(str)))
 *         self.tagDict["FA"].value += (
 */
  if (unlikely(__pyx_v_self->tagDict == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_self->tagDict, __pyx_n_s_PV); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "utilBMF/MergePairedAlignments.pyx":439
 *             raise KeyError
 *         self.tagDict["PV"].value += (
 *             "," + ",".join(self.cGetQualSlice(offset).astype(str)))             # <<<<<<<<<<<<<<
 *         self.tagDict["FA"].value += (
 *             "," + ",".join(self.cGetAgreementSlice(offset).astype(str)))
 */
  __pyx_t_11.__pyx_n = 1;
  __pyx_t_11.start = __pyx_v_offset;
  __pyx_t_10 = ((PyObject *)((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetQualSlice(__pyx_v_self, &__pyx_t_11)); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_astype); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  if (!__pyx_t_10) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_9, ((PyObject *)((PyObject*)(&PyString_Type)))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10); __pyx_t_10 = NULL;
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyString_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyString_Type))));
    PyTuple_SET_ITEM(__pyx_t_12, 0+1, ((PyObject *)((PyObject*)(&PyString_Type))));
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_12, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyString_Join(__pyx_kp_s__2, __pyx_t_2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_kp_s__2, __pyx_t_9); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":438
 *             print(repr(self.tagDict))
 *             raise KeyError
 *         self.tagDict["PV"].value += (             # <<<<<<<<<<<<<<
 *             "," + ",".join(self.cGetQualSlice(offset).astype(str)))
 *         self.tagDict["FA"].value += (
 */
  __pyx_t_9 = PyNumber_InPlaceAdd(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_4, __pyx_n_s_value, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":440
 *         self.tagDict["PV"].value += (
 *             "," + ",".join(self.cGetQualSlice(offset).astype(str)))
 *         self.tagDict["FA"].value += (             # <<<<<<<<<<<<<<
 *             "," + ",".join(self.cGetAgreementSlice(offset).astype(str)))
 *         self.tagDict["FM"].value *= 2
 */
  if (unlikely(__pyx_v_self->tagDict == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_self->tagDict, __pyx_n_s_FA); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_value); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);

  /* "utilBMF/MergePairedAlignments.pyx":441
 *             "," + ",".join(self.cGetQualSlice(offset).astype(str)))
 *         self.tagDict["FA"].value += (
 *             "," + ",".join(self.cGetAgreementSlice(offset).astype(str)))             # <<<<<<<<<<<<<<
 *         self.tagDict["FM"].value *= 2
 *         # Double the number of "family members" to describe merging.
 */
  __pyx_t_13.__pyx_n = 1;
  __pyx_t_13.start = __pyx_v_offset;
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetAgreementSlice(__pyx_v_self, &__pyx_t_13)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_astype); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_12, ((PyObject *)((PyObject*)(&PyString_Type)))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(((PyObject *)((PyObject*)(&PyString_Type))));
    __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyString_Type))));
    PyTuple_SET_ITEM(__pyx_t_10, 0+1, ((PyObject *)((PyObject*)(&PyString_Type))));
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyString_Join(__pyx_kp_s__2, __pyx_t_2); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_kp_s__2, __pyx_t_12); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":440
 *         self.tagDict["PV"].value += (
 *             "," + ",".join(self.cGetQualSlice(offset).astype(str)))
 *         self.tagDict["FA"].value += (             # <<<<<<<<<<<<<<
 *             "," + ",".join(self.cGetAgreementSlice(offset).astype(str)))
 *         self.tagDict["FM"].value *= 2
 */
  __pyx_t_12 = PyNumber_InPlaceAdd(__pyx_t_9, __pyx_t_2); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_4, __pyx_n_s_value, __pyx_t_12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":442
 *         self.tagDict["FA"].value += (
 *             "," + ",".join(self.cGetAgreementSlice(offset).astype(str)))
 *         self.tagDict["FM"].value *= 2             # <<<<<<<<<<<<<<
 *         # Double the number of "family members" to describe merging.
 *         NewCigarString = FlattenCigarString(
 */
  if (unlikely(__pyx_v_self->tagDict == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_self->tagDict, __pyx_n_s_FM); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_value); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_2 = PyNumber_InPlaceMultiply(__pyx_t_12, __pyx_int_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_4, __pyx_n_s_value, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":445
 *         # Double the number of "family members" to describe merging.
 *         NewCigarString = FlattenCigarString(
 *             self.getCigarString() +             # <<<<<<<<<<<<<<
 *             pairedLayout.cGetCigarStringSlice(offset))
 *         '''
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->getCigarString(__pyx_v_self, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "utilBMF/MergePairedAlignments.pyx":446
 *         NewCigarString = FlattenCigarString(
 *             self.getCigarString() +
 *             pairedLayout.cGetCigarStringSlice(offset))             # <<<<<<<<<<<<<<
 *         '''
 *         return "\t".join(map(
 */
  __pyx_t_14.__pyx_n = 1;
  __pyx_t_14.start = __pyx_v_offset;
  __pyx_t_2 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_pairedLayout->__pyx_vtab)->cGetCigarStringSlice(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_pairedLayout), &__pyx_t_14); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "utilBMF/MergePairedAlignments.pyx":445
 *         # Double the number of "family members" to describe merging.
 *         NewCigarString = FlattenCigarString(
 *             self.getCigarString() +             # <<<<<<<<<<<<<<
 *             pairedLayout.cGetCigarStringSlice(offset))
 *         '''
 */
  __pyx_t_12 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":444
 *         self.tagDict["FM"].value *= 2
 *         # Double the number of "family members" to describe merging.
 *         NewCigarString = FlattenCigarString(             # <<<<<<<<<<<<<<
 *             self.getCigarString() +
 *             pairedLayout.cGetCigarStringSlice(offset))
 */
  __pyx_t_2 = __pyx_f_7utilBMF_21MergePairedAlignments_FlattenCigarString(((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_12), 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_v_NewCigarString = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":455
 *                 self.get_tag_string()))
 *         '''
 *         return (self.Name + "\t%s" % self.getFlag() + "\t" +             # <<<<<<<<<<<<<<
 *                 PysamToChrInline(self.reference_id) +
 *                 "\t%s\t%s" % (self.getAlignmentStart() + 1, self.mapq) +
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getFlag); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_12); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyString_Format(__pyx_kp_s_s, __pyx_t_2); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_v_self->Name, __pyx_t_12); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__15); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":456
 *         '''
 *         return (self.Name + "\t%s" % self.getFlag() + "\t" +
 *                 PysamToChrInline(self.reference_id) +             # <<<<<<<<<<<<<<
 *                 "\t%s\t%s" % (self.getAlignmentStart() + 1, self.mapq) +
 *                 "\t" + NewCigarString +
 */
  __pyx_t_2 = __pyx_f_7utilBMF_10PysamUtils_PysamToChrInline(__pyx_v_self->reference_id); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "utilBMF/MergePairedAlignments.pyx":455
 *                 self.get_tag_string()))
 *         '''
 *         return (self.Name + "\t%s" % self.getFlag() + "\t" +             # <<<<<<<<<<<<<<
 *                 PysamToChrInline(self.reference_id) +
 *                 "\t%s\t%s" % (self.getAlignmentStart() + 1, self.mapq) +
 */
  __pyx_t_4 = PyNumber_Add(__pyx_t_12, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":457
 *         return (self.Name + "\t%s" % self.getFlag() + "\t" +
 *                 PysamToChrInline(self.reference_id) +
 *                 "\t%s\t%s" % (self.getAlignmentStart() + 1, self.mapq) +             # <<<<<<<<<<<<<<
 *                 "\t" + NewCigarString +
 *                 "\t%s\t%s\t%s\t" % (self.rnext, self.pnext + 1, self.tlen) +
 */
  __pyx_t_2 = __Pyx_PyInt_From_long((((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->getAlignmentStart(__pyx_v_self) + 1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_12 = __Pyx_PyInt_From_unsigned_char(__pyx_v_self->mapq); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_12);
  __pyx_t_2 = 0;
  __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_9); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":456
 *         '''
 *         return (self.Name + "\t%s" % self.getFlag() + "\t" +
 *                 PysamToChrInline(self.reference_id) +             # <<<<<<<<<<<<<<
 *                 "\t%s\t%s" % (self.getAlignmentStart() + 1, self.mapq) +
 *                 "\t" + NewCigarString +
 */
  __pyx_t_9 = PyNumber_Add(__pyx_t_4, __pyx_t_12); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":457
 *         return (self.Name + "\t%s" % self.getFlag() + "\t" +
 *                 PysamToChrInline(self.reference_id) +
 *                 "\t%s\t%s" % (self.getAlignmentStart() + 1, self.mapq) +             # <<<<<<<<<<<<<<
 *                 "\t" + NewCigarString +
 *                 "\t%s\t%s\t%s\t" % (self.rnext, self.pnext + 1, self.tlen) +
 */
  __pyx_t_12 = PyNumber_Add(__pyx_t_9, __pyx_kp_s__15); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":458
 *                 PysamToChrInline(self.reference_id) +
 *                 "\t%s\t%s" % (self.getAlignmentStart() + 1, self.mapq) +
 *                 "\t" + NewCigarString +             # <<<<<<<<<<<<<<
 *                 "\t%s\t%s\t%s\t" % (self.rnext, self.pnext + 1, self.tlen) +
 *                 self.getSeq() +
 */
  __pyx_t_9 = PyNumber_Add(__pyx_t_12, __pyx_v_NewCigarString); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":459
 *                 "\t%s\t%s" % (self.getAlignmentStart() + 1, self.mapq) +
 *                 "\t" + NewCigarString +
 *                 "\t%s\t%s\t%s\t" % (self.rnext, self.pnext + 1, self.tlen) +             # <<<<<<<<<<<<<<
 *                 self.getSeq() +
 *                 pairedLayout.cGetSeqArrSlice(offset).tostring() + "\t" +
 */
  __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_self->rnext); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_4 = __Pyx_PyInt_From_long((__pyx_v_self->pnext + 1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->tlen); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_2);
  __pyx_t_12 = 0;
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_s_s_s, __pyx_t_10); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":458
 *                 PysamToChrInline(self.reference_id) +
 *                 "\t%s\t%s" % (self.getAlignmentStart() + 1, self.mapq) +
 *                 "\t" + NewCigarString +             # <<<<<<<<<<<<<<
 *                 "\t%s\t%s\t%s\t" % (self.rnext, self.pnext + 1, self.tlen) +
 *                 self.getSeq() +
 */
  __pyx_t_10 = PyNumber_Add(__pyx_t_9, __pyx_t_2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":460
 *                 "\t" + NewCigarString +
 *                 "\t%s\t%s\t%s\t" % (self.rnext, self.pnext + 1, self.tlen) +
 *                 self.getSeq() +             # <<<<<<<<<<<<<<
 *                 pairedLayout.cGetSeqArrSlice(offset).tostring() + "\t" +
 *                 self.getQualString() +
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->getSeq(__pyx_v_self, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "utilBMF/MergePairedAlignments.pyx":459
 *                 "\t%s\t%s" % (self.getAlignmentStart() + 1, self.mapq) +
 *                 "\t" + NewCigarString +
 *                 "\t%s\t%s\t%s\t" % (self.rnext, self.pnext + 1, self.tlen) +             # <<<<<<<<<<<<<<
 *                 self.getSeq() +
 *                 pairedLayout.cGetSeqArrSlice(offset).tostring() + "\t" +
 */
  __pyx_t_9 = PyNumber_Add(__pyx_t_10, __pyx_t_2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":461
 *                 "\t%s\t%s\t%s\t" % (self.rnext, self.pnext + 1, self.tlen) +
 *                 self.getSeq() +
 *                 pairedLayout.cGetSeqArrSlice(offset).tostring() + "\t" +             # <<<<<<<<<<<<<<
 *                 self.getQualString() +
 *                 pairedLayout.cGetQualStringSlice(offset) + "\t" +
 */
  __pyx_t_15.__pyx_n = 1;
  __pyx_t_15.start = __pyx_v_offset;
  __pyx_t_10 = ((PyObject *)((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_pairedLayout->__pyx_vtab)->cGetSeqArrSlice(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_pairedLayout), &__pyx_t_15)); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_tostring); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_10) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_10); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":460
 *                 "\t" + NewCigarString +
 *                 "\t%s\t%s\t%s\t" % (self.rnext, self.pnext + 1, self.tlen) +
 *                 self.getSeq() +             # <<<<<<<<<<<<<<
 *                 pairedLayout.cGetSeqArrSlice(offset).tostring() + "\t" +
 *                 self.getQualString() +
 */
  __pyx_t_4 = PyNumber_Add(__pyx_t_9, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":461
 *                 "\t%s\t%s\t%s\t" % (self.rnext, self.pnext + 1, self.tlen) +
 *                 self.getSeq() +
 *                 pairedLayout.cGetSeqArrSlice(offset).tostring() + "\t" +             # <<<<<<<<<<<<<<
 *                 self.getQualString() +
 *                 pairedLayout.cGetQualStringSlice(offset) + "\t" +
 */
  __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_kp_s__15); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":462
 *                 self.getSeq() +
 *                 pairedLayout.cGetSeqArrSlice(offset).tostring() + "\t" +
 *                 self.getQualString() +             # <<<<<<<<<<<<<<
 *                 pairedLayout.cGetQualStringSlice(offset) + "\t" +
 *                 self.get_tag_string())
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->getQualString(__pyx_v_self, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "utilBMF/MergePairedAlignments.pyx":461
 *                 "\t%s\t%s\t%s\t" % (self.rnext, self.pnext + 1, self.tlen) +
 *                 self.getSeq() +
 *                 pairedLayout.cGetSeqArrSlice(offset).tostring() + "\t" +             # <<<<<<<<<<<<<<
 *                 self.getQualString() +
 *                 pairedLayout.cGetQualStringSlice(offset) + "\t" +
 */
  __pyx_t_9 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":463
 *                 pairedLayout.cGetSeqArrSlice(offset).tostring() + "\t" +
 *                 self.getQualString() +
 *                 pairedLayout.cGetQualStringSlice(offset) + "\t" +             # <<<<<<<<<<<<<<
 *                 self.get_tag_string())
 * 
 */
  __pyx_t_16.__pyx_n = 1;
  __pyx_t_16.start = __pyx_v_offset;
  __pyx_t_4 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_pairedLayout->__pyx_vtab)->cGetQualStringSlice(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_pairedLayout), &__pyx_t_16); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);

  /* "utilBMF/MergePairedAlignments.pyx":462
 *                 self.getSeq() +
 *                 pairedLayout.cGetSeqArrSlice(offset).tostring() + "\t" +
 *                 self.getQualString() +             # <<<<<<<<<<<<<<
 *                 pairedLayout.cGetQualStringSlice(offset) + "\t" +
 *                 self.get_tag_string())
 */
  __pyx_t_2 = PyNumber_Add(__pyx_t_9, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":463
 *                 pairedLayout.cGetSeqArrSlice(offset).tostring() + "\t" +
 *                 self.getQualString() +
 *                 pairedLayout.cGetQualStringSlice(offset) + "\t" +             # <<<<<<<<<<<<<<
 *                 self.get_tag_string())
 * 
 */
  __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__15); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":464
 *                 self.getQualString() +
 *                 pairedLayout.cGetQualStringSlice(offset) + "\t" +
 *                 self.get_tag_string())             # <<<<<<<<<<<<<<
 * 
 *     cdef get_tag_string(self):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->get_tag_string(__pyx_v_self); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "utilBMF/MergePairedAlignments.pyx":463
 *                 pairedLayout.cGetSeqArrSlice(offset).tostring() + "\t" +
 *                 self.getQualString() +
 *                 pairedLayout.cGetQualStringSlice(offset) + "\t" +             # <<<<<<<<<<<<<<
 *                 self.get_tag_string())
 * 
 */
  __pyx_t_9 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_9)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_9);
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":420
 *         return self.__csam__(pairedLayout)
 * 
 *     cdef cystr __csam__(self, Layout_t pairedLayout):             # <<<<<<<<<<<<<<
 *         """
 *         Converts the record into a SAM record.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.__csam__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_NewCigarString);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":466
 *                 self.get_tag_string())
 * 
 *     cdef get_tag_string(self):             # <<<<<<<<<<<<<<
 *         cdef BamTag_t BT
 *         try:
 */

static PyObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_get_tag_string(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  __pyx_t_7utilBMF_21MergePairedAlignments_BamTag_t __pyx_v_BT = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_tag_string", 0);

  /* "utilBMF/MergePairedAlignments.pyx":468
 *     cdef get_tag_string(self):
 *         cdef BamTag_t BT
 *         try:             # <<<<<<<<<<<<<<
 *             return "\t".join([str(BT) for BT in self.tagDict.itervalues()])
 *         except TypeError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "utilBMF/MergePairedAlignments.pyx":469
 *         cdef BamTag_t BT
 *         try:
 *             return "\t".join([str(BT) for BT in self.tagDict.itervalues()])             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             for BT in self.tagDict.itervalues():
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = 0;
      if (unlikely(__pyx_v_self->tagDict == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "itervalues");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      __pyx_t_9 = __Pyx_dict_iterator(__pyx_v_self->tagDict, 1, __pyx_n_s_itervalues, (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_5);
      __pyx_t_5 = __pyx_t_9;
      __pyx_t_9 = 0;
      while (1) {
        __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_5, __pyx_t_7, &__pyx_t_6, NULL, &__pyx_t_9, NULL, __pyx_t_8);
        if (unlikely(__pyx_t_10 == 0)) break;
        if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_GOTREF(__pyx_t_9);
        if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_7utilBMF_8HTSUtils_BamTag))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_XDECREF_SET(__pyx_v_BT, ((__pyx_t_7utilBMF_21MergePairedAlignments_BamTag_t)__pyx_t_9));
        __pyx_t_9 = 0;
        __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_INCREF(((PyObject *)__pyx_v_BT));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_BT));
        PyTuple_SET_ITEM(__pyx_t_9, 0, ((PyObject *)__pyx_v_BT));
        __pyx_t_11 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_9, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_11))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyString_Join(__pyx_kp_s__15, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L7_try_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":470
 *         try:
 *             return "\t".join([str(BT) for BT in self.tagDict.itervalues()])
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             for BT in self.tagDict.itervalues():
 *                 print("Str of BT with key %s is %s" % (BT.tag, str(BT)))
 */
    __pyx_t_8 = PyErr_ExceptionMatches(__pyx_builtin_TypeError);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.get_tag_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_11);

      /* "utilBMF/MergePairedAlignments.pyx":471
 *             return "\t".join([str(BT) for BT in self.tagDict.itervalues()])
 *         except TypeError:
 *             for BT in self.tagDict.itervalues():             # <<<<<<<<<<<<<<
 *                 print("Str of BT with key %s is %s" % (BT.tag, str(BT)))
 *             raise ThisIsMadness
 */
      __pyx_t_7 = 0;
      if (unlikely(__pyx_v_self->tagDict == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "itervalues");
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      }
      __pyx_t_12 = __Pyx_dict_iterator(__pyx_v_self->tagDict, 1, __pyx_n_s_itervalues, (&__pyx_t_6), (&__pyx_t_8)); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_XDECREF(__pyx_t_9);
      __pyx_t_9 = __pyx_t_12;
      __pyx_t_12 = 0;
      while (1) {
        __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_9, __pyx_t_6, &__pyx_t_7, NULL, &__pyx_t_12, NULL, __pyx_t_8);
        if (unlikely(__pyx_t_10 == 0)) break;
        if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        if (!(likely(((__pyx_t_12) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_12, __pyx_ptype_7utilBMF_8HTSUtils_BamTag))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        __Pyx_XDECREF_SET(__pyx_v_BT, ((__pyx_t_7utilBMF_21MergePairedAlignments_BamTag_t)__pyx_t_12));
        __pyx_t_12 = 0;

        /* "utilBMF/MergePairedAlignments.pyx":472
 *         except TypeError:
 *             for BT in self.tagDict.itervalues():
 *                 print("Str of BT with key %s is %s" % (BT.tag, str(BT)))             # <<<<<<<<<<<<<<
 *             raise ThisIsMadness
 * 
 */
        __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_INCREF(((PyObject *)__pyx_v_BT));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_BT));
        PyTuple_SET_ITEM(__pyx_t_12, 0, ((PyObject *)__pyx_v_BT));
        __pyx_t_13 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_12, NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_INCREF(__pyx_v_BT->tag);
        __Pyx_GIVEREF(__pyx_v_BT->tag);
        PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_BT->tag);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_13);
        __pyx_t_13 = 0;
        __pyx_t_13 = __Pyx_PyString_Format(__pyx_kp_s_Str_of_BT_with_key_s_is_s, __pyx_t_12); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (__Pyx_PrintOne(0, __pyx_t_13) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "utilBMF/MergePairedAlignments.pyx":473
 *             for BT in self.tagDict.itervalues():
 *                 print("Str of BT with key %s is %s" % (BT.tag, str(BT)))
 *             raise ThisIsMadness             # <<<<<<<<<<<<<<
 * 
 *     cdef update_read_positions(self):
 */
      __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_ThisIsMadness); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "utilBMF/MergePairedAlignments.pyx":466
 *                 self.get_tag_string())
 * 
 *     cdef get_tag_string(self):             # <<<<<<<<<<<<<<
 *         cdef BamTag_t BT
 *         try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.get_tag_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_BT);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":475
 *             raise ThisIsMadness
 * 
 *     cdef update_read_positions(self):             # <<<<<<<<<<<<<<
 *         cdef ArrayLayoutPos_t tmpALP
 *         cdef int tmpInt
 */

static PyObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_update_read_positions(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t __pyx_v_tmpALP;
  int __pyx_v_tmpInt;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t *__pyx_t_1;
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t *__pyx_t_2;
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t *__pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("update_read_positions", 0);

  /* "utilBMF/MergePairedAlignments.pyx":478
 *         cdef ArrayLayoutPos_t tmpALP
 *         cdef int tmpInt
 *         for tmpALP in self.Layout.layouts[:self.Layout.length]:             # <<<<<<<<<<<<<<
 *             tmpALP.readPos = tmpInt if(tmpALP.operation != 68) else -1
 *             tmpInt += 1
 */
  __pyx_t_2 = (__pyx_v_self->Layout.layouts + __pyx_v_self->Layout.length);
  for (__pyx_t_3 = __pyx_v_self->Layout.layouts; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_tmpALP = (__pyx_t_1[0]);

    /* "utilBMF/MergePairedAlignments.pyx":479
 *         cdef int tmpInt
 *         for tmpALP in self.Layout.layouts[:self.Layout.length]:
 *             tmpALP.readPos = tmpInt if(tmpALP.operation != 68) else -1             # <<<<<<<<<<<<<<
 *             tmpInt += 1
 * 
 */
    if (((__pyx_v_tmpALP.operation != 68) != 0)) {
      __pyx_t_4 = __pyx_v_tmpInt;
    } else {
      __pyx_t_4 = -1;
    }
    __pyx_v_tmpALP.readPos = __pyx_t_4;

    /* "utilBMF/MergePairedAlignments.pyx":480
 *         for tmpALP in self.Layout.layouts[:self.Layout.length]:
 *             tmpALP.readPos = tmpInt if(tmpALP.operation != 68) else -1
 *             tmpInt += 1             # <<<<<<<<<<<<<<
 * 
 *     def update(self):
 */
    __pyx_v_tmpInt = (__pyx_v_tmpInt + 1);
  }

  /* "utilBMF/MergePairedAlignments.pyx":475
 *             raise ThisIsMadness
 * 
 *     cdef update_read_positions(self):             # <<<<<<<<<<<<<<
 *         cdef ArrayLayoutPos_t tmpALP
 *         cdef int tmpInt
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":482
 *             tmpInt += 1
 * 
 *     def update(self):             # <<<<<<<<<<<<<<
 *         cdef int count
 *         if(self.isMerged):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_25update(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_25update(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_24update(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_24update(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update", 0);

  /* "utilBMF/MergePairedAlignments.pyx":484
 *     def update(self):
 *         cdef int count
 *         if(self.isMerged):             # <<<<<<<<<<<<<<
 *             self.set_merge_tags_BT()
 *             self.tlen = len(self.getSeqArr())
 */
  __pyx_t_1 = (__pyx_v_self->isMerged != 0);
  if (__pyx_t_1) {

    /* "utilBMF/MergePairedAlignments.pyx":485
 *         cdef int count
 *         if(self.isMerged):
 *             self.set_merge_tags_BT()             # <<<<<<<<<<<<<<
 *             self.tlen = len(self.getSeqArr())
 *             self.pnext = 0
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->set_merge_tags_BT(__pyx_v_self); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":486
 *         if(self.isMerged):
 *             self.set_merge_tags_BT()
 *             self.tlen = len(self.getSeqArr())             # <<<<<<<<<<<<<<
 *             self.pnext = 0
 *             self.rnext = self.reference_id
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->getSeqArr(__pyx_v_self, 0)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->tlen = __pyx_t_3;

    /* "utilBMF/MergePairedAlignments.pyx":487
 *             self.set_merge_tags_BT()
 *             self.tlen = len(self.getSeqArr())
 *             self.pnext = 0             # <<<<<<<<<<<<<<
 *             self.rnext = self.reference_id
 *             # Only change the original mapq to -1 if the tagDict entry om is
 */
    __pyx_v_self->pnext = 0;

    /* "utilBMF/MergePairedAlignments.pyx":488
 *             self.tlen = len(self.getSeqArr())
 *             self.pnext = 0
 *             self.rnext = self.reference_id             # <<<<<<<<<<<<<<
 *             # Only change the original mapq to -1 if the tagDict entry om is
 *             # present. (Original Mapping)
 */
    __pyx_t_4 = __pyx_v_self->reference_id;
    __pyx_v_self->rnext = __pyx_t_4;

    /* "utilBMF/MergePairedAlignments.pyx":491
 *             # Only change the original mapq to -1 if the tagDict entry om is
 *             # present. (Original Mapping)
 *             try:             # <<<<<<<<<<<<<<
 *                 self.tagDict["om"]
 *                 self.mapq = 255
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "utilBMF/MergePairedAlignments.pyx":492
 *             # present. (Original Mapping)
 *             try:
 *                 self.tagDict["om"]             # <<<<<<<<<<<<<<
 *                 self.mapq = 255
 *             except KeyError:
 */
        if (unlikely(__pyx_v_self->tagDict == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        }
        __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_self->tagDict, __pyx_n_s_om); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L4_error;};
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "utilBMF/MergePairedAlignments.pyx":493
 *             try:
 *                 self.tagDict["om"]
 *                 self.mapq = 255             # <<<<<<<<<<<<<<
 *             except KeyError:
 *                 pass
 */
        __pyx_v_self->mapq = 255;
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "utilBMF/MergePairedAlignments.pyx":494
 *                 self.tagDict["om"]
 *                 self.mapq = 255
 *             except KeyError:             # <<<<<<<<<<<<<<
 *                 pass
 *             self.flag = 2 + (16 if(self.is_reverse) else 32)
 */
      __pyx_t_4 = PyErr_ExceptionMatches(__pyx_builtin_KeyError);
      if (__pyx_t_4) {
        PyErr_Restore(0,0,0);
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_L11_try_end:;
    }

    /* "utilBMF/MergePairedAlignments.pyx":496
 *             except KeyError:
 *                 pass
 *             self.flag = 2 + (16 if(self.is_reverse) else 32)             # <<<<<<<<<<<<<<
 *             self.update_read_positions()
 *         # self.update_read()
 */
    if ((__pyx_v_self->is_reverse != 0)) {
      __pyx_t_8 = 16;
    } else {
      __pyx_t_8 = 32;
    }
    __pyx_v_self->flag = (2 + __pyx_t_8);

    /* "utilBMF/MergePairedAlignments.pyx":497
 *                 pass
 *             self.flag = 2 + (16 if(self.is_reverse) else 32)
 *             self.update_read_positions()             # <<<<<<<<<<<<<<
 *         # self.update_read()
 * 
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->update_read_positions(__pyx_v_self); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "utilBMF/MergePairedAlignments.pyx":482
 *             tmpInt += 1
 * 
 *     def update(self):             # <<<<<<<<<<<<<<
 *         cdef int count
 *         if(self.isMerged):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":520
 *     '''
 * 
 *     cdef ndarray[int, ndim=1] cGetGenomicDiscordantPositions(self):             # <<<<<<<<<<<<<<
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         return np.array([tmpLayoutPos.pos for tmpLayoutPos in
 */

static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetGenomicDiscordantPositions(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t __pyx_v_tmpLayoutPos;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t *__pyx_t_3;
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t *__pyx_t_4;
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t *__pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cGetGenomicDiscordantPositions", 0);

  /* "utilBMF/MergePairedAlignments.pyx":522
 *     cdef ndarray[int, ndim=1] cGetGenomicDiscordantPositions(self):
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         return np.array([tmpLayoutPos.pos for tmpLayoutPos in             # <<<<<<<<<<<<<<
 *                          self.Layout.layouts[:self.Layout.length] if
 *                          tmpLayoutPos.mergeAgreed == 0 and
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":523
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         return np.array([tmpLayoutPos.pos for tmpLayoutPos in
 *                          self.Layout.layouts[:self.Layout.length] if             # <<<<<<<<<<<<<<
 *                          tmpLayoutPos.mergeAgreed == 0 and
 *                          tmpLayoutPos.operation != 66],
 */
  __pyx_t_4 = (__pyx_v_self->Layout.layouts + __pyx_v_self->Layout.length);
  for (__pyx_t_5 = __pyx_v_self->Layout.layouts; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;

    /* "utilBMF/MergePairedAlignments.pyx":522
 *     cdef ndarray[int, ndim=1] cGetGenomicDiscordantPositions(self):
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         return np.array([tmpLayoutPos.pos for tmpLayoutPos in             # <<<<<<<<<<<<<<
 *                          self.Layout.layouts[:self.Layout.length] if
 *                          tmpLayoutPos.mergeAgreed == 0 and
 */
    __pyx_v_tmpLayoutPos = (__pyx_t_3[0]);

    /* "utilBMF/MergePairedAlignments.pyx":524
 *         return np.array([tmpLayoutPos.pos for tmpLayoutPos in
 *                          self.Layout.layouts[:self.Layout.length] if
 *                          tmpLayoutPos.mergeAgreed == 0 and             # <<<<<<<<<<<<<<
 *                          tmpLayoutPos.operation != 66],
 *                         dtype=np.int32)
 */
    __pyx_t_7 = ((__pyx_v_tmpLayoutPos.mergeAgreed == 0) != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }

    /* "utilBMF/MergePairedAlignments.pyx":525
 *                          self.Layout.layouts[:self.Layout.length] if
 *                          tmpLayoutPos.mergeAgreed == 0 and
 *                          tmpLayoutPos.operation != 66],             # <<<<<<<<<<<<<<
 *                         dtype=np.int32)
 * 
 */
    __pyx_t_7 = ((__pyx_v_tmpLayoutPos.operation != 66) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_6) {

      /* "utilBMF/MergePairedAlignments.pyx":522
 *     cdef ndarray[int, ndim=1] cGetGenomicDiscordantPositions(self):
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         return np.array([tmpLayoutPos.pos for tmpLayoutPos in             # <<<<<<<<<<<<<<
 *                          self.Layout.layouts[:self.Layout.length] if
 *                          tmpLayoutPos.mergeAgreed == 0 and
 */
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_tmpLayoutPos.pos); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_8))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
  }
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":526
 *                          tmpLayoutPos.mergeAgreed == 0 and
 *                          tmpLayoutPos.operation != 66],
 *                         dtype=np.int32)             # <<<<<<<<<<<<<<
 * 
 *     cdef ndarray[np.int16_t, ndim=1] cGetReadDiscordantPositions(self):
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int32); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_10) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":522
 *     cdef ndarray[int, ndim=1] cGetGenomicDiscordantPositions(self):
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         return np.array([tmpLayoutPos.pos for tmpLayoutPos in             # <<<<<<<<<<<<<<
 *                          self.Layout.layouts[:self.Layout.length] if
 *                          tmpLayoutPos.mergeAgreed == 0 and
 */
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, __pyx_t_1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((PyArrayObject *)__pyx_t_10);
  __pyx_t_10 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":520
 *     '''
 * 
 *     cdef ndarray[int, ndim=1] cGetGenomicDiscordantPositions(self):             # <<<<<<<<<<<<<<
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         return np.array([tmpLayoutPos.pos for tmpLayoutPos in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.cGetGenomicDiscordantPositions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":528
 *                         dtype=np.int32)
 * 
 *     cdef ndarray[np.int16_t, ndim=1] cGetReadDiscordantPositions(self):             # <<<<<<<<<<<<<<
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         return np.array([tmpLayoutPos.readPos for tmpLayoutPos in
 */

static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetReadDiscordantPositions(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t __pyx_v_tmpLayoutPos;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t *__pyx_t_3;
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t *__pyx_t_4;
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t *__pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cGetReadDiscordantPositions", 0);

  /* "utilBMF/MergePairedAlignments.pyx":530
 *     cdef ndarray[np.int16_t, ndim=1] cGetReadDiscordantPositions(self):
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         return np.array([tmpLayoutPos.readPos for tmpLayoutPos in             # <<<<<<<<<<<<<<
 *                          self.Layout.layouts[:self.Layout.length] if
 *                          tmpLayoutPos.mergeAgreed == 0 and
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":531
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         return np.array([tmpLayoutPos.readPos for tmpLayoutPos in
 *                          self.Layout.layouts[:self.Layout.length] if             # <<<<<<<<<<<<<<
 *                          tmpLayoutPos.mergeAgreed == 0 and
 *                          tmpLayoutPos.operation != 66],
 */
  __pyx_t_4 = (__pyx_v_self->Layout.layouts + __pyx_v_self->Layout.length);
  for (__pyx_t_5 = __pyx_v_self->Layout.layouts; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;

    /* "utilBMF/MergePairedAlignments.pyx":530
 *     cdef ndarray[np.int16_t, ndim=1] cGetReadDiscordantPositions(self):
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         return np.array([tmpLayoutPos.readPos for tmpLayoutPos in             # <<<<<<<<<<<<<<
 *                          self.Layout.layouts[:self.Layout.length] if
 *                          tmpLayoutPos.mergeAgreed == 0 and
 */
    __pyx_v_tmpLayoutPos = (__pyx_t_3[0]);

    /* "utilBMF/MergePairedAlignments.pyx":532
 *         return np.array([tmpLayoutPos.readPos for tmpLayoutPos in
 *                          self.Layout.layouts[:self.Layout.length] if
 *                          tmpLayoutPos.mergeAgreed == 0 and             # <<<<<<<<<<<<<<
 *                          tmpLayoutPos.operation != 66],
 *                         dtype=np.int16)
 */
    __pyx_t_7 = ((__pyx_v_tmpLayoutPos.mergeAgreed == 0) != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }

    /* "utilBMF/MergePairedAlignments.pyx":533
 *                          self.Layout.layouts[:self.Layout.length] if
 *                          tmpLayoutPos.mergeAgreed == 0 and
 *                          tmpLayoutPos.operation != 66],             # <<<<<<<<<<<<<<
 *                         dtype=np.int16)
 * 
 */
    __pyx_t_7 = ((__pyx_v_tmpLayoutPos.operation != 66) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_6) {

      /* "utilBMF/MergePairedAlignments.pyx":530
 *     cdef ndarray[np.int16_t, ndim=1] cGetReadDiscordantPositions(self):
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         return np.array([tmpLayoutPos.readPos for tmpLayoutPos in             # <<<<<<<<<<<<<<
 *                          self.Layout.layouts[:self.Layout.length] if
 *                          tmpLayoutPos.mergeAgreed == 0 and
 */
      __pyx_t_8 = __Pyx_PyInt_From_uint16_t(__pyx_v_tmpLayoutPos.readPos); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_8))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
  }
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":534
 *                          tmpLayoutPos.mergeAgreed == 0 and
 *                          tmpLayoutPos.operation != 66],
 *                         dtype=np.int16)             # <<<<<<<<<<<<<<
 * 
 *     cpdef ndarray[np.int16_t, ndim=1] getAgreement(self):
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int16); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_10) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":530
 *     cdef ndarray[np.int16_t, ndim=1] cGetReadDiscordantPositions(self):
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         return np.array([tmpLayoutPos.readPos for tmpLayoutPos in             # <<<<<<<<<<<<<<
 *                          self.Layout.layouts[:self.Layout.length] if
 *                          tmpLayoutPos.mergeAgreed == 0 and
 */
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, __pyx_t_1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((PyArrayObject *)__pyx_t_10);
  __pyx_t_10 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":528
 *                         dtype=np.int32)
 * 
 *     cdef ndarray[np.int16_t, ndim=1] cGetReadDiscordantPositions(self):             # <<<<<<<<<<<<<<
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         return np.array([tmpLayoutPos.readPos for tmpLayoutPos in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.cGetReadDiscordantPositions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":536
 *                         dtype=np.int16)
 * 
 *     cpdef ndarray[np.int16_t, ndim=1] getAgreement(self):             # <<<<<<<<<<<<<<
 *         """cpdef wrapper of cGetAgreement
 *         """
 */

static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_27getAgreement(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getAgreement(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_skip_dispatch) {
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getAgreement", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getAgreement); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_27getAgreement)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((PyArrayObject *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "utilBMF/MergePairedAlignments.pyx":539
 *         """cpdef wrapper of cGetAgreement
 *         """
 *         return self.cGetAgreement()             # <<<<<<<<<<<<<<
 * 
 *     cdef ndarray[np.int16_t, ndim=1] cGetAgreement(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetAgreement(__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":536
 *                         dtype=np.int16)
 * 
 *     cpdef ndarray[np.int16_t, ndim=1] getAgreement(self):             # <<<<<<<<<<<<<<
 *         """cpdef wrapper of cGetAgreement
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getAgreement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_27getAgreement(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7utilBMF_21MergePairedAlignments_6Layout_26getAgreement[] = "cpdef wrapper of cGetAgreement\n        ";
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_27getAgreement(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAgreement (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_26getAgreement(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_26getAgreement(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getAgreement", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getAgreement(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getAgreement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":541
 *         return self.cGetAgreement()
 * 
 *     cdef ndarray[np.int16_t, ndim=1] cGetAgreement(self):             # <<<<<<<<<<<<<<
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         # Ask if >= 0. My tests say it's ~1% faster to ask (> -1) than (>= 0).
 */

static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetAgreement(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t __pyx_v_tmpLayoutPos;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t *__pyx_t_3;
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t *__pyx_t_4;
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t *__pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cGetAgreement", 0);

  /* "utilBMF/MergePairedAlignments.pyx":544
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         # Ask if >= 0. My tests say it's ~1% faster to ask (> -1) than (>= 0).
 *         return np.array([tmpLayoutPos.agreement for tmpLayoutPos in             # <<<<<<<<<<<<<<
 *                          self.Layout.layouts[:self.Layout.length] if
 *                          tmpLayoutPos.operation != 66],
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":545
 *         # Ask if >= 0. My tests say it's ~1% faster to ask (> -1) than (>= 0).
 *         return np.array([tmpLayoutPos.agreement for tmpLayoutPos in
 *                          self.Layout.layouts[:self.Layout.length] if             # <<<<<<<<<<<<<<
 *                          tmpLayoutPos.operation != 66],
 *                         dtype=np.int16)
 */
  __pyx_t_4 = (__pyx_v_self->Layout.layouts + __pyx_v_self->Layout.length);
  for (__pyx_t_5 = __pyx_v_self->Layout.layouts; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;

    /* "utilBMF/MergePairedAlignments.pyx":544
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         # Ask if >= 0. My tests say it's ~1% faster to ask (> -1) than (>= 0).
 *         return np.array([tmpLayoutPos.agreement for tmpLayoutPos in             # <<<<<<<<<<<<<<
 *                          self.Layout.layouts[:self.Layout.length] if
 *                          tmpLayoutPos.operation != 66],
 */
    __pyx_v_tmpLayoutPos = (__pyx_t_3[0]);

    /* "utilBMF/MergePairedAlignments.pyx":546
 *         return np.array([tmpLayoutPos.agreement for tmpLayoutPos in
 *                          self.Layout.layouts[:self.Layout.length] if
 *                          tmpLayoutPos.operation != 66],             # <<<<<<<<<<<<<<
 *                         dtype=np.int16)
 * 
 */
    __pyx_t_6 = ((__pyx_v_tmpLayoutPos.operation != 66) != 0);
    if (__pyx_t_6) {

      /* "utilBMF/MergePairedAlignments.pyx":544
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         # Ask if >= 0. My tests say it's ~1% faster to ask (> -1) than (>= 0).
 *         return np.array([tmpLayoutPos.agreement for tmpLayoutPos in             # <<<<<<<<<<<<<<
 *                          self.Layout.layouts[:self.Layout.length] if
 *                          tmpLayoutPos.operation != 66],
 */
      __pyx_t_7 = __Pyx_PyInt_From_uint16_t(__pyx_v_tmpLayoutPos.agreement); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
  }
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":547
 *                          self.Layout.layouts[:self.Layout.length] if
 *                          tmpLayoutPos.operation != 66],
 *                         dtype=np.int16)             # <<<<<<<<<<<<<<
 * 
 *     cpdef ndarray[np.int8_t, ndim=1] getOperations(self):
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_int16); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":544
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         # Ask if >= 0. My tests say it's ~1% faster to ask (> -1) than (>= 0).
 *         return np.array([tmpLayoutPos.agreement for tmpLayoutPos in             # <<<<<<<<<<<<<<
 *                          self.Layout.layouts[:self.Layout.length] if
 *                          tmpLayoutPos.operation != 66],
 */
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((PyArrayObject *)__pyx_t_9);
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":541
 *         return self.cGetAgreement()
 * 
 *     cdef ndarray[np.int16_t, ndim=1] cGetAgreement(self):             # <<<<<<<<<<<<<<
 *         cdef ArrayLayoutPos_t tmpLayoutPos
 *         # Ask if >= 0. My tests say it's ~1% faster to ask (> -1) than (>= 0).
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.cGetAgreement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":549
 *                         dtype=np.int16)
 * 
 *     cpdef ndarray[np.int8_t, ndim=1] getOperations(self):             # <<<<<<<<<<<<<<
 *         return self.cGetOperations()
 * 
 */

static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_29getOperations(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getOperations(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_skip_dispatch) {
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getOperations", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getOperations); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_29getOperations)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((PyArrayObject *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "utilBMF/MergePairedAlignments.pyx":550
 * 
 *     cpdef ndarray[np.int8_t, ndim=1] getOperations(self):
 *         return self.cGetOperations()             # <<<<<<<<<<<<<<
 * 
 *     cdef ndarray[np.int8_t, ndim=1] cGetOperationsSlice(self, size_t start=0):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetOperations(__pyx_v_self)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":549
 *                         dtype=np.int16)
 * 
 *     cpdef ndarray[np.int8_t, ndim=1] getOperations(self):             # <<<<<<<<<<<<<<
 *         return self.cGetOperations()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getOperations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_29getOperations(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_29getOperations(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getOperations (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_28getOperations(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_28getOperations(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getOperations", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getOperations(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getOperations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":552
 *         return self.cGetOperations()
 * 
 *     cdef ndarray[np.int8_t, ndim=1] cGetOperationsSlice(self, size_t start=0):             # <<<<<<<<<<<<<<
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].operation for tmpInt in
 */

static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetOperationsSlice(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetOperationsSlice *__pyx_optional_args) {
  size_t __pyx_v_start = ((size_t)0);
  int __pyx_v_tmpInt;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cGetOperationsSlice", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_start = __pyx_optional_args->start;
    }
  }

  /* "utilBMF/MergePairedAlignments.pyx":554
 *     cdef ndarray[np.int8_t, ndim=1] cGetOperationsSlice(self, size_t start=0):
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].operation for tmpInt in             # <<<<<<<<<<<<<<
 *                          range(start, self.Layout.length)], dtype=np.int8)
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":555
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].operation for tmpInt in
 *                          range(start, self.Layout.length)], dtype=np.int8)             # <<<<<<<<<<<<<<
 * 
 *     cdef ndarray[np.int8_t, ndim=1] cGetOperations(self):
 */
  __pyx_t_3 = __pyx_v_self->Layout.length;
  for (__pyx_t_4 = __pyx_v_start; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_tmpInt = __pyx_t_4;

    /* "utilBMF/MergePairedAlignments.pyx":554
 *     cdef ndarray[np.int8_t, ndim=1] cGetOperationsSlice(self, size_t start=0):
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].operation for tmpInt in             # <<<<<<<<<<<<<<
 *                          range(start, self.Layout.length)], dtype=np.int8)
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_From_char((__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]).operation); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":555
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].operation for tmpInt in
 *                          range(start, self.Layout.length)], dtype=np.int8)             # <<<<<<<<<<<<<<
 * 
 *     cdef ndarray[np.int8_t, ndim=1] cGetOperations(self):
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":554
 *     cdef ndarray[np.int8_t, ndim=1] cGetOperationsSlice(self, size_t start=0):
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].operation for tmpInt in             # <<<<<<<<<<<<<<
 *                          range(start, self.Layout.length)], dtype=np.int8)
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":552
 *         return self.cGetOperations()
 * 
 *     cdef ndarray[np.int8_t, ndim=1] cGetOperationsSlice(self, size_t start=0):             # <<<<<<<<<<<<<<
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].operation for tmpInt in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.cGetOperationsSlice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":557
 *                          range(start, self.Layout.length)], dtype=np.int8)
 * 
 *     cdef ndarray[np.int8_t, ndim=1] cGetOperations(self):             # <<<<<<<<<<<<<<
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].operation for tmpInt in
 */

static PyArrayObject *__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetOperations(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  int __pyx_v_tmpInt;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cGetOperations", 0);

  /* "utilBMF/MergePairedAlignments.pyx":559
 *     cdef ndarray[np.int8_t, ndim=1] cGetOperations(self):
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].operation for tmpInt in             # <<<<<<<<<<<<<<
 *                          range(self.Layout.length)], dtype=np.int8)
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":560
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].operation for tmpInt in
 *                          range(self.Layout.length)], dtype=np.int8)             # <<<<<<<<<<<<<<
 * 
 *     cdef cystr cGetCigarStringSlice(self, size_t start=0):
 */
  __pyx_t_3 = __pyx_v_self->Layout.length;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_tmpInt = __pyx_t_4;

    /* "utilBMF/MergePairedAlignments.pyx":559
 *     cdef ndarray[np.int8_t, ndim=1] cGetOperations(self):
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].operation for tmpInt in             # <<<<<<<<<<<<<<
 *                          range(self.Layout.length)], dtype=np.int8)
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_From_char((__pyx_v_self->Layout.layouts[__pyx_v_tmpInt]).operation); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":560
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].operation for tmpInt in
 *                          range(self.Layout.length)], dtype=np.int8)             # <<<<<<<<<<<<<<
 * 
 *     cdef cystr cGetCigarStringSlice(self, size_t start=0):
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":559
 *     cdef ndarray[np.int8_t, ndim=1] cGetOperations(self):
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].operation for tmpInt in             # <<<<<<<<<<<<<<
 *                          range(self.Layout.length)], dtype=np.int8)
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":557
 *                          range(start, self.Layout.length)], dtype=np.int8)
 * 
 *     cdef ndarray[np.int8_t, ndim=1] cGetOperations(self):             # <<<<<<<<<<<<<<
 *         cdef int tmpInt
 *         return np.array([self.Layout.layouts[tmpInt].operation for tmpInt in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.cGetOperations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":562
 *                          range(self.Layout.length)], dtype=np.int8)
 * 
 *     cdef cystr cGetCigarStringSlice(self, size_t start=0):             # <<<<<<<<<<<<<<
 *         return "".join([str(len(list(g))) + CigarStrInline(k) for
 *                         k, g in groupby(self.cGetOperationsSlice(start))])
 */

static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetCigarStringSlice(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetCigarStringSlice *__pyx_optional_args) {
  size_t __pyx_v_start = ((size_t)0);
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_g = NULL;
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetOperationsSlice __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *(*__pyx_t_10)(PyObject *);
  Py_ssize_t __pyx_t_11;
  char __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cGetCigarStringSlice", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_start = __pyx_optional_args->start;
    }
  }

  /* "utilBMF/MergePairedAlignments.pyx":563
 * 
 *     cdef cystr cGetCigarStringSlice(self, size_t start=0):
 *         return "".join([str(len(list(g))) + CigarStrInline(k) for             # <<<<<<<<<<<<<<
 *                         k, g in groupby(self.cGetOperationsSlice(start))])
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":564
 *     cdef cystr cGetCigarStringSlice(self, size_t start=0):
 *         return "".join([str(len(list(g))) + CigarStrInline(k) for
 *                         k, g in groupby(self.cGetOperationsSlice(start))])             # <<<<<<<<<<<<<<
 * 
 *     cdef cystr cGetCigarString(self):
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_groupby); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5.__pyx_n = 1;
  __pyx_t_5.start = __pyx_v_start;
  __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetOperationsSlice(__pyx_v_self, &__pyx_t_5)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_9(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_6 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_6)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_10(__pyx_t_6); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_4 = __pyx_t_10(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_6), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":563
 * 
 *     cdef cystr cGetCigarStringSlice(self, size_t start=0):
 *         return "".join([str(len(list(g))) + CigarStrInline(k) for             # <<<<<<<<<<<<<<
 *                         k, g in groupby(self.cGetOperationsSlice(start))])
 * 
 */
    __pyx_t_2 = PySequence_List(__pyx_v_g); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = PyList_GET_SIZE(__pyx_t_2); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_11); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_12 = __Pyx_PyInt_As_char(__pyx_v_k); if (unlikely((__pyx_t_12 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __pyx_f_7utilBMF_8Inliners_CigarStrInline(__pyx_t_12); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s__11, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":562
 *                          range(self.Layout.length)], dtype=np.int8)
 * 
 *     cdef cystr cGetCigarStringSlice(self, size_t start=0):             # <<<<<<<<<<<<<<
 *         return "".join([str(len(list(g))) + CigarStrInline(k) for
 *                         k, g in groupby(self.cGetOperationsSlice(start))])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.cGetCigarStringSlice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":566
 *                         k, g in groupby(self.cGetOperationsSlice(start))])
 * 
 *     cdef cystr cGetCigarString(self):             # <<<<<<<<<<<<<<
 *         return "".join([str(len(list(g))) + CigarStrInline(k) for
 *                         k, g in groupby(self.cGetOperations())])
 */

static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetCigarString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_g = NULL;
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *(*__pyx_t_9)(PyObject *);
  Py_ssize_t __pyx_t_10;
  char __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cGetCigarString", 0);

  /* "utilBMF/MergePairedAlignments.pyx":567
 * 
 *     cdef cystr cGetCigarString(self):
 *         return "".join([str(len(list(g))) + CigarStrInline(k) for             # <<<<<<<<<<<<<<
 *                         k, g in groupby(self.cGetOperations())])
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":568
 *     cdef cystr cGetCigarString(self):
 *         return "".join([str(len(list(g))) + CigarStrInline(k) for
 *                         k, g in groupby(self.cGetOperations())])             # <<<<<<<<<<<<<<
 * 
 *     cpdef cystr getCigarString(self):
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_groupby); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetOperations(__pyx_v_self)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_5); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_4 = __pyx_t_9(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_5), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":567
 * 
 *     cdef cystr cGetCigarString(self):
 *         return "".join([str(len(list(g))) + CigarStrInline(k) for             # <<<<<<<<<<<<<<
 *                         k, g in groupby(self.cGetOperations())])
 * 
 */
    __pyx_t_2 = PySequence_List(__pyx_v_g); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = PyList_GET_SIZE(__pyx_t_2); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_10); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_11 = __Pyx_PyInt_As_char(__pyx_v_k); if (unlikely((__pyx_t_11 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __pyx_f_7utilBMF_8Inliners_CigarStrInline(__pyx_t_11); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s__11, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":566
 *                         k, g in groupby(self.cGetOperationsSlice(start))])
 * 
 *     cdef cystr cGetCigarString(self):             # <<<<<<<<<<<<<<
 *         return "".join([str(len(list(g))) + CigarStrInline(k) for
 *                         k, g in groupby(self.cGetOperations())])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.cGetCigarString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":570
 *                         k, g in groupby(self.cGetOperations())])
 * 
 *     cpdef cystr getCigarString(self):             # <<<<<<<<<<<<<<
 *         return self.cGetCigarString()
 * 
 */

static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_31getCigarString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getCigarString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, int __pyx_skip_dispatch) {
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getCigarString", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getCigarString); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_31getCigarString)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "utilBMF/MergePairedAlignments.pyx":571
 * 
 *     cpdef cystr getCigarString(self):
 *         return self.cGetCigarString()             # <<<<<<<<<<<<<<
 * 
 *     def getFlag(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self->__pyx_vtab)->cGetCigarString(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":570
 *                         k, g in groupby(self.cGetOperations())])
 * 
 *     cpdef cystr getCigarString(self):             # <<<<<<<<<<<<<<
 *         return self.cGetCigarString()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getCigarString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_31getCigarString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_31getCigarString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getCigarString (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_30getCigarString(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_30getCigarString(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getCigarString", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getCigarString(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getCigarString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":573
 *         return self.cGetCigarString()
 * 
 *     def getFlag(self):             # <<<<<<<<<<<<<<
 *         self.update()
 *         return self.flag
 */

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_33getFlag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_33getFlag(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFlag (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_32getFlag(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_32getFlag(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getFlag", 0);

  /* "utilBMF/MergePairedAlignments.pyx":574
 * 
 *     def getFlag(self):
 *         self.update()             # <<<<<<<<<<<<<<
 *         return self.flag
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":575
 *     def getFlag(self):
 *         self.update()
 *         return self.flag             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->flag); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":573
 *         return self.cGetCigarString()
 * 
 *     def getFlag(self):             # <<<<<<<<<<<<<<
 *         self.update()
 *         return self.flag
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.getFlag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pxd":49
 *     cdef ArrayLayout_t Layout
 * 
 *     cdef public uchar mapq             # <<<<<<<<<<<<<<
 *     cdef public int tlen, pnext, flag, InitPos, firstMapped, reference_id, pos, rnext
 *     cdef public dict tagDict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4mapq_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4mapq_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4mapq___get__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4mapq___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_char(__pyx_v_self->mapq); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.mapq.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4mapq_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4mapq_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4mapq_2__set__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4mapq_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_7utilBMF_21MergePairedAlignments_uchar __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_char(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->mapq = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.mapq.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pxd":50
 * 
 *     cdef public uchar mapq
 *     cdef public int tlen, pnext, flag, InitPos, firstMapped, reference_id, pos, rnext             # <<<<<<<<<<<<<<
 *     cdef public dict tagDict
 *     cdef public cystr Name
 */

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4tlen_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4tlen_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4tlen___get__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4tlen___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->tlen); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.tlen.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4tlen_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4tlen_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4tlen_2__set__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4tlen_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->tlen = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.tlen.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_5pnext_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_5pnext_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_5pnext___get__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_5pnext___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->pnext); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.pnext.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_5pnext_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_5pnext_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_5pnext_2__set__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_5pnext_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->pnext = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.pnext.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4flag_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4flag_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4flag___get__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4flag___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->flag); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.flag.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4flag_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4flag_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4flag_2__set__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4flag_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->flag = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.flag.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7InitPos_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7InitPos_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_7InitPos___get__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_7InitPos___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->InitPos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.InitPos.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7InitPos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7InitPos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_7InitPos_2__set__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_7InitPos_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->InitPos = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.InitPos.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_11firstMapped_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_11firstMapped_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_11firstMapped___get__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_11firstMapped___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->firstMapped); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.firstMapped.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_11firstMapped_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_11firstMapped_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_11firstMapped_2__set__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_11firstMapped_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->firstMapped = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.firstMapped.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_12reference_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_12reference_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_12reference_id___get__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_12reference_id___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->reference_id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.reference_id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_12reference_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_12reference_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_12reference_id_2__set__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_12reference_id_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->reference_id = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.reference_id.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_3pos_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_3pos_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_3pos___get__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_3pos___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->pos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.pos.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_3pos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_3pos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_3pos_2__set__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_3pos_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->pos = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.pos.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_5rnext_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_5rnext_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_5rnext___get__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_5rnext___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->rnext); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.rnext.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_5rnext_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_5rnext_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_5rnext_2__set__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_5rnext_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->rnext = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.rnext.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pxd":51
 *     cdef public uchar mapq
 *     cdef public int tlen, pnext, flag, InitPos, firstMapped, reference_id, pos, rnext
 *     cdef public dict tagDict             # <<<<<<<<<<<<<<
 *     cdef public cystr Name
 *     cdef public bint is_reverse, isMerged, MergeSuccess
 */

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7tagDict_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7tagDict_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_7tagDict___get__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_7tagDict___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->tagDict);
  __pyx_r = __pyx_v_self->tagDict;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7tagDict_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7tagDict_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_7tagDict_2__set__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_7tagDict_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyDict_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_value)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->tagDict);
  __Pyx_DECREF(__pyx_v_self->tagDict);
  __pyx_v_self->tagDict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.tagDict.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7tagDict_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7tagDict_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_7tagDict_4__del__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_7tagDict_4__del__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->tagDict);
  __Pyx_DECREF(__pyx_v_self->tagDict);
  __pyx_v_self->tagDict = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pxd":52
 *     cdef public int tlen, pnext, flag, InitPos, firstMapped, reference_id, pos, rnext
 *     cdef public dict tagDict
 *     cdef public cystr Name             # <<<<<<<<<<<<<<
 *     cdef public bint is_reverse, isMerged, MergeSuccess
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4Name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4Name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4Name___get__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4Name___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->Name);
  __pyx_r = __pyx_v_self->Name;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4Name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4Name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4Name_2__set__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4Name_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyString_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_v_value)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->Name);
  __Pyx_DECREF(__pyx_v_self->Name);
  __pyx_v_self->Name = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.Name.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4Name_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4Name_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4Name_4__del__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_4Name_4__del__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->Name);
  __Pyx_DECREF(__pyx_v_self->Name);
  __pyx_v_self->Name = ((__pyx_t_7utilBMF_8HTSUtils_cystr)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pxd":53
 *     cdef public dict tagDict
 *     cdef public cystr Name
 *     cdef public bint is_reverse, isMerged, MergeSuccess             # <<<<<<<<<<<<<<
 * 
 *     cdef int getFirstAlignedRefPos(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_10is_reverse_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_10is_reverse_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_10is_reverse___get__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_10is_reverse___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->is_reverse); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.is_reverse.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_10is_reverse_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_10is_reverse_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_10is_reverse_2__set__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_10is_reverse_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->is_reverse = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.is_reverse.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_8isMerged_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_8isMerged_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_8isMerged___get__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_8isMerged___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->isMerged); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.isMerged.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_8isMerged_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_8isMerged_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_8isMerged_2__set__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_8isMerged_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->isMerged = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.isMerged.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_12MergeSuccess_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_12MergeSuccess_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_12MergeSuccess___get__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_12MergeSuccess___get__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->MergeSuccess); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.MergeSuccess.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_12MergeSuccess_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_12MergeSuccess_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_12MergeSuccess_2__set__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7utilBMF_21MergePairedAlignments_6Layout_12MergeSuccess_2__set__(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->MergeSuccess = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.Layout.MergeSuccess.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":578
 * 
 * 
 * def MergePairedAlignments(cystr inBAM, cystr outBAM=None,             # <<<<<<<<<<<<<<
 *                           int readLength=-1,
 *                           cystr outMerge=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_5MergePairedAlignments(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7utilBMF_21MergePairedAlignments_5MergePairedAlignments = {"MergePairedAlignments", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_5MergePairedAlignments, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_5MergePairedAlignments(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_inBAM = 0;
  CYTHON_UNUSED __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_outBAM = 0;
  int __pyx_v_readLength;
  CYTHON_UNUSED __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_outMerge = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("MergePairedAlignments (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_inBAM,&__pyx_n_s_outBAM,&__pyx_n_s_readLength,&__pyx_n_s_outMerge,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((__pyx_t_7utilBMF_8HTSUtils_cystr)Py_None);

    /* "utilBMF/MergePairedAlignments.pyx":580
 * def MergePairedAlignments(cystr inBAM, cystr outBAM=None,
 *                           int readLength=-1,
 *                           cystr outMerge=None):             # <<<<<<<<<<<<<<
 *     cdef AlignedSegment_t read, tmpRead
 *     # cdef AlignedSegment_t read, read1, read2
 */
    values[3] = ((__pyx_t_7utilBMF_8HTSUtils_cystr)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inBAM)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_outBAM);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_readLength);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_outMerge);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "MergePairedAlignments") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_inBAM = ((__pyx_t_7utilBMF_8HTSUtils_cystr)values[0]);
    __pyx_v_outBAM = ((__pyx_t_7utilBMF_8HTSUtils_cystr)values[1]);
    if (values[2]) {
      __pyx_v_readLength = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_readLength == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_readLength = ((int)-1);
    }
    __pyx_v_outMerge = ((__pyx_t_7utilBMF_8HTSUtils_cystr)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("MergePairedAlignments", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.MergePairedAlignments", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inBAM), (&PyString_Type), 1, "inBAM", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_outBAM), (&PyString_Type), 1, "outBAM", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_outMerge), (&PyString_Type), 1, "outMerge", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_4MergePairedAlignments(__pyx_self, __pyx_v_inBAM, __pyx_v_outBAM, __pyx_v_readLength, __pyx_v_outMerge);

  /* "utilBMF/MergePairedAlignments.pyx":578
 * 
 * 
 * def MergePairedAlignments(cystr inBAM, cystr outBAM=None,             # <<<<<<<<<<<<<<
 *                           int readLength=-1,
 *                           cystr outMerge=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_4MergePairedAlignments(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_inBAM, CYTHON_UNUSED __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_outBAM, int __pyx_v_readLength, CYTHON_UNUSED __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_outMerge) {
  __pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t __pyx_v_read = 0;
  __pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t __pyx_v_tmpRead = 0;
  __pyx_t_7utilBMF_21MergePairedAlignments_Layout_t __pyx_v_Layout1 = 0;
  __pyx_t_7utilBMF_21MergePairedAlignments_Layout_t __pyx_v_Layout2 = 0;
  int __pyx_v_count;
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_newSamRead = 0;
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_tmpName = 0;
  PyObject *__pyx_v_inHandle = NULL;
  PyObject *__pyx_v_ReadIndex = NULL;
  PyObject *__pyx_v_outHandle = NULL;
  PyObject *__pyx_v_outHandleMerge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  Py_ssize_t __pyx_t_18;
  PyObject *(*__pyx_t_19)(PyObject *);
  int __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("MergePairedAlignments", 0);

  /* "utilBMF/MergePairedAlignments.pyx":584
 *     # cdef AlignedSegment_t read, read1, read2
 *     cdef Layout_t Layout1, Layout2
 *     cdef int count = 0             # <<<<<<<<<<<<<<
 *     cdef cystr newSamRead, tmpName
 *     inHandle = pysam.AlignmentFile(inBAM, "rb")
 */
  __pyx_v_count = 0;

  /* "utilBMF/MergePairedAlignments.pyx":586
 *     cdef int count = 0
 *     cdef cystr newSamRead, tmpName
 *     inHandle = pysam.AlignmentFile(inBAM, "rb")             # <<<<<<<<<<<<<<
 *     ReadIndex = pysam.IndexedReads(inHandle)
 *     ReadIndex.build()
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pysam); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_AlignmentFile); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_2) {
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
  }
  __Pyx_INCREF(__pyx_v_inBAM);
  __Pyx_GIVEREF(__pyx_v_inBAM);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_inBAM);
  __Pyx_INCREF(__pyx_n_s_rb);
  __Pyx_GIVEREF(__pyx_n_s_rb);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_n_s_rb);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_inHandle = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":587
 *     cdef cystr newSamRead, tmpName
 *     inHandle = pysam.AlignmentFile(inBAM, "rb")
 *     ReadIndex = pysam.IndexedReads(inHandle)             # <<<<<<<<<<<<<<
 *     ReadIndex.build()
 *     if(readLength < 0):
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pysam); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_IndexedReads); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_inHandle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_inHandle);
    __Pyx_GIVEREF(__pyx_v_inHandle);
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_inHandle);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_ReadIndex = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":588
 *     inHandle = pysam.AlignmentFile(inBAM, "rb")
 *     ReadIndex = pysam.IndexedReads(inHandle)
 *     ReadIndex.build()             # <<<<<<<<<<<<<<
 *     if(readLength < 0):
 *         pl("readLength not set - inferring.")
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ReadIndex, __pyx_n_s_build); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":589
 *     ReadIndex = pysam.IndexedReads(inHandle)
 *     ReadIndex.build()
 *     if(readLength < 0):             # <<<<<<<<<<<<<<
 *         pl("readLength not set - inferring.")
 *         readLength = len(inHandle.next().seq)
 */
  __pyx_t_6 = ((__pyx_v_readLength < 0) != 0);
  if (__pyx_t_6) {

    /* "utilBMF/MergePairedAlignments.pyx":590
 *     ReadIndex.build()
 *     if(readLength < 0):
 *         pl("readLength not set - inferring.")             # <<<<<<<<<<<<<<
 *         readLength = len(inHandle.next().seq)
 *         inHandle = pysam.AlignmentFile(inBAM, "rb")
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pl); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":591
 *     if(readLength < 0):
 *         pl("readLength not set - inferring.")
 *         readLength = len(inHandle.next().seq)             # <<<<<<<<<<<<<<
 *         inHandle = pysam.AlignmentFile(inBAM, "rb")
 *     outHandle = pysam.AlignmentFile("-", "w",
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_inHandle, __pyx_n_s_next); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_seq); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_readLength = __pyx_t_4;

    /* "utilBMF/MergePairedAlignments.pyx":592
 *         pl("readLength not set - inferring.")
 *         readLength = len(inHandle.next().seq)
 *         inHandle = pysam.AlignmentFile(inBAM, "rb")             # <<<<<<<<<<<<<<
 *     outHandle = pysam.AlignmentFile("-", "w",
 *                                     header=inHandle.header)
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_pysam); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_AlignmentFile); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    __pyx_t_3 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_inBAM);
    __Pyx_GIVEREF(__pyx_v_inBAM);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_v_inBAM);
    __Pyx_INCREF(__pyx_n_s_rb);
    __Pyx_GIVEREF(__pyx_n_s_rb);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_n_s_rb);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_inHandle, __pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "utilBMF/MergePairedAlignments.pyx":593
 *         readLength = len(inHandle.next().seq)
 *         inHandle = pysam.AlignmentFile(inBAM, "rb")
 *     outHandle = pysam.AlignmentFile("-", "w",             # <<<<<<<<<<<<<<
 *                                     header=inHandle.header)
 *     outHandleMerge = sys.stdout
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pysam); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_AlignmentFile); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "utilBMF/MergePairedAlignments.pyx":594
 *         inHandle = pysam.AlignmentFile(inBAM, "rb")
 *     outHandle = pysam.AlignmentFile("-", "w",
 *                                     header=inHandle.header)             # <<<<<<<<<<<<<<
 *     outHandleMerge = sys.stdout
 *     outHandleMerge.write(inHandle.text)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_inHandle, __pyx_n_s_header); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_header, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":593
 *         readLength = len(inHandle.next().seq)
 *         inHandle = pysam.AlignmentFile(inBAM, "rb")
 *     outHandle = pysam.AlignmentFile("-", "w",             # <<<<<<<<<<<<<<
 *                                     header=inHandle.header)
 *     outHandleMerge = sys.stdout
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__18, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_outHandle = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":595
 *     outHandle = pysam.AlignmentFile("-", "w",
 *                                     header=inHandle.header)
 *     outHandleMerge = sys.stdout             # <<<<<<<<<<<<<<
 *     outHandleMerge.write(inHandle.text)
 *     for read in inHandle:
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_stdout); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_outHandleMerge = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":596
 *                                     header=inHandle.header)
 *     outHandleMerge = sys.stdout
 *     outHandleMerge.write(inHandle.text)             # <<<<<<<<<<<<<<
 *     for read in inHandle:
 *         print("Name: %s" % read.query_name)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_outHandleMerge, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_inHandle, __pyx_n_s_text); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":597
 *     outHandleMerge = sys.stdout
 *     outHandleMerge.write(inHandle.text)
 *     for read in inHandle:             # <<<<<<<<<<<<<<
 *         print("Name: %s" % read.query_name)
 *         count += 1
 */
  if (likely(PyList_CheckExact(__pyx_v_inHandle)) || PyTuple_CheckExact(__pyx_v_inHandle)) {
    __pyx_t_1 = __pyx_v_inHandle; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_inHandle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_8(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5pysam_14calignmentfile_AlignedSegment))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_read, ((__pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":598
 *     outHandleMerge.write(inHandle.text)
 *     for read in inHandle:
 *         print("Name: %s" % read.query_name)             # <<<<<<<<<<<<<<
 *         count += 1
 *         if(read.is_supplementary or read.is_secondary):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_query_name); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Name_s, __pyx_t_3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":599
 *     for read in inHandle:
 *         print("Name: %s" % read.query_name)
 *         count += 1             # <<<<<<<<<<<<<<
 *         if(read.is_supplementary or read.is_secondary):
 *             outHandle.write(read)
 */
    __pyx_v_count = (__pyx_v_count + 1);

    /* "utilBMF/MergePairedAlignments.pyx":600
 *         print("Name: %s" % read.query_name)
 *         count += 1
 *         if(read.is_supplementary or read.is_secondary):             # <<<<<<<<<<<<<<
 *             outHandle.write(read)
 *             print("I am now continuing over this record in MPA for 2nd/Supp.")
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_is_supplementary); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (!__pyx_t_9) {
    } else {
      __pyx_t_6 = __pyx_t_9;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_is_secondary); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_6 = __pyx_t_9;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_6) {

      /* "utilBMF/MergePairedAlignments.pyx":601
 *         count += 1
 *         if(read.is_supplementary or read.is_secondary):
 *             outHandle.write(read)             # <<<<<<<<<<<<<<
 *             print("I am now continuing over this record in MPA for 2nd/Supp.")
 *             continue
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_outHandle, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_2) {
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_read)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_read));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_read));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_read));
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "utilBMF/MergePairedAlignments.pyx":602
 *         if(read.is_supplementary or read.is_secondary):
 *             outHandle.write(read)
 *             print("I am now continuing over this record in MPA for 2nd/Supp.")             # <<<<<<<<<<<<<<
 *             continue
 *         print("Tested if it was supp/2nd")
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_I_am_now_continuing_over_this_re) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "utilBMF/MergePairedAlignments.pyx":603
 *             outHandle.write(read)
 *             print("I am now continuing over this record in MPA for 2nd/Supp.")
 *             continue             # <<<<<<<<<<<<<<
 *         print("Tested if it was supp/2nd")
 *         if(read.is_proper_pair is False):
 */
      goto __pyx_L4_continue;
    }

    /* "utilBMF/MergePairedAlignments.pyx":604
 *             print("I am now continuing over this record in MPA for 2nd/Supp.")
 *             continue
 *         print("Tested if it was supp/2nd")             # <<<<<<<<<<<<<<
 *         if(read.is_proper_pair is False):
 *             print("Not a proper pair, continuing.")
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Tested_if_it_was_supp_2nd) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "utilBMF/MergePairedAlignments.pyx":605
 *             continue
 *         print("Tested if it was supp/2nd")
 *         if(read.is_proper_pair is False):             # <<<<<<<<<<<<<<
 *             print("Not a proper pair, continuing.")
 *             # Keep going
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_is_proper_pair); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = (__pyx_t_7 == Py_False);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = (__pyx_t_6 != 0);
    if (__pyx_t_9) {

      /* "utilBMF/MergePairedAlignments.pyx":606
 *         print("Tested if it was supp/2nd")
 *         if(read.is_proper_pair is False):
 *             print("Not a proper pair, continuing.")             # <<<<<<<<<<<<<<
 *             # Keep going
 *             tmpName = read.query_name
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_Not_a_proper_pair_continuing) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "utilBMF/MergePairedAlignments.pyx":608
 *             print("Not a proper pair, continuing.")
 *             # Keep going
 *             tmpName = read.query_name             # <<<<<<<<<<<<<<
 *             outHandle.write(read)
 *             while read.query_name == tmpName:
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_query_name); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (!(likely(PyString_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_7)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_XDECREF_SET(__pyx_v_tmpName, ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_7));
      __pyx_t_7 = 0;

      /* "utilBMF/MergePairedAlignments.pyx":609
 *             # Keep going
 *             tmpName = read.query_name
 *             outHandle.write(read)             # <<<<<<<<<<<<<<
 *             while read.query_name == tmpName:
 *                 outHandle.write(read)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_outHandle, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_read)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
      } else {
        __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_read));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_read));
        PyTuple_SET_ITEM(__pyx_t_2, 0+1, ((PyObject *)__pyx_v_read));
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "utilBMF/MergePairedAlignments.pyx":610
 *             tmpName = read.query_name
 *             outHandle.write(read)
 *             while read.query_name == tmpName:             # <<<<<<<<<<<<<<
 *                 outHandle.write(read)
 *                 read = inHandle.next()
 */
      while (1) {
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_query_name); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = PyObject_RichCompare(__pyx_t_7, __pyx_v_tmpName, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!__pyx_t_9) break;

        /* "utilBMF/MergePairedAlignments.pyx":611
 *             outHandle.write(read)
 *             while read.query_name == tmpName:
 *                 outHandle.write(read)             # <<<<<<<<<<<<<<
 *                 read = inHandle.next()
 *         elif(read.is_read1):
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_outHandle, __pyx_n_s_write); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_2 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        if (!__pyx_t_2) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, ((PyObject *)__pyx_v_read)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
        } else {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
          __Pyx_INCREF(((PyObject *)__pyx_v_read));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_read));
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_read));
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "utilBMF/MergePairedAlignments.pyx":612
 *             while read.query_name == tmpName:
 *                 outHandle.write(read)
 *                 read = inHandle.next()             # <<<<<<<<<<<<<<
 *         elif(read.is_read1):
 *             print("Making Layout1 object.")
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_inHandle, __pyx_n_s_next); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        if (__pyx_t_5) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else {
          __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5pysam_14calignmentfile_AlignedSegment))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF_SET(__pyx_v_read, ((__pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t)__pyx_t_3));
        __pyx_t_3 = 0;
      }
      goto __pyx_L9;
    }

    /* "utilBMF/MergePairedAlignments.pyx":613
 *                 outHandle.write(read)
 *                 read = inHandle.next()
 *         elif(read.is_read1):             # <<<<<<<<<<<<<<
 *             print("Making Layout1 object.")
 *             Layout1 = Layout(read)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_is_read1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_9) {

      /* "utilBMF/MergePairedAlignments.pyx":614
 *                 read = inHandle.next()
 *         elif(read.is_read1):
 *             print("Making Layout1 object.")             # <<<<<<<<<<<<<<
 *             Layout1 = Layout(read)
 *             # read1 = read
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_Making_Layout1_object) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "utilBMF/MergePairedAlignments.pyx":615
 *         elif(read.is_read1):
 *             print("Making Layout1 object.")
 *             Layout1 = Layout(read)             # <<<<<<<<<<<<<<
 *             # read1 = read
 *             print("I am now continuing over this record in MPA because it's read1.")
 */
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(((PyObject *)__pyx_v_read));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_read));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_read));
      __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7utilBMF_21MergePairedAlignments_Layout)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_Layout1, ((__pyx_t_7utilBMF_21MergePairedAlignments_Layout_t)__pyx_t_7));
      __pyx_t_7 = 0;

      /* "utilBMF/MergePairedAlignments.pyx":617
 *             Layout1 = Layout(read)
 *             # read1 = read
 *             print("I am now continuing over this record in MPA because it's read1.")             # <<<<<<<<<<<<<<
 *             continue
 *         elif(read.is_read2):
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_I_am_now_continuing_over_this_re_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "utilBMF/MergePairedAlignments.pyx":618
 *             # read1 = read
 *             print("I am now continuing over this record in MPA because it's read1.")
 *             continue             # <<<<<<<<<<<<<<
 *         elif(read.is_read2):
 *             print("Assigning read to read2")
 */
      goto __pyx_L4_continue;
    }

    /* "utilBMF/MergePairedAlignments.pyx":619
 *             print("I am now continuing over this record in MPA because it's read1.")
 *             continue
 *         elif(read.is_read2):             # <<<<<<<<<<<<<<
 *             print("Assigning read to read2")
 *             Layout2 = Layout(read)
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_is_read2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 619; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_9) {

      /* "utilBMF/MergePairedAlignments.pyx":620
 *             continue
 *         elif(read.is_read2):
 *             print("Assigning read to read2")             # <<<<<<<<<<<<<<
 *             Layout2 = Layout(read)
 *             print("Didn't die")
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_Assigning_read_to_read2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "utilBMF/MergePairedAlignments.pyx":621
 *         elif(read.is_read2):
 *             print("Assigning read to read2")
 *             Layout2 = Layout(read)             # <<<<<<<<<<<<<<
 *             print("Didn't die")
 *             tmpName = Layout2.Name
 */
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(((PyObject *)__pyx_v_read));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_read));
      PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_v_read));
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7utilBMF_21MergePairedAlignments_Layout)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_Layout2, ((__pyx_t_7utilBMF_21MergePairedAlignments_Layout_t)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "utilBMF/MergePairedAlignments.pyx":622
 *             print("Assigning read to read2")
 *             Layout2 = Layout(read)
 *             print("Didn't die")             # <<<<<<<<<<<<<<
 *             tmpName = Layout2.Name
 *         else:
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_Didn_t_die) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "utilBMF/MergePairedAlignments.pyx":623
 *             Layout2 = Layout(read)
 *             print("Didn't die")
 *             tmpName = Layout2.Name             # <<<<<<<<<<<<<<
 *         else:
 *             print("Read is neither read 1 nor read 2: %s" % (not read.is_read1 and not read.is_read2))
 */
      __pyx_t_3 = __pyx_v_Layout2->Name;
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_tmpName, ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_3));
      __pyx_t_3 = 0;
      goto __pyx_L9;
    }
    /*else*/ {

      /* "utilBMF/MergePairedAlignments.pyx":625
 *             tmpName = Layout2.Name
 *         else:
 *             print("Read is neither read 1 nor read 2: %s" % (not read.is_read1 and not read.is_read2))             # <<<<<<<<<<<<<<
 *             sys.exit(1)
 *         print("Layouts made, now trying to merge. About to assert shared names.")
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_is_read1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_6 = (!__pyx_t_9);
      if (__pyx_t_6) {
      } else {
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = __pyx_t_7;
        __pyx_t_7 = 0;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_is_read2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = (!__pyx_t_6);
      __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_t_9); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = __pyx_t_7;
      __pyx_t_7 = 0;
      __pyx_L12_bool_binop_done:;
      __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Read_is_neither_read_1_nor_read, __pyx_t_3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "utilBMF/MergePairedAlignments.pyx":626
 *         else:
 *             print("Read is neither read 1 nor read 2: %s" % (not read.is_read1 and not read.is_read2))
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 *         print("Layouts made, now trying to merge. About to assert shared names.")
 * 
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_exit); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_L9:;

    /* "utilBMF/MergePairedAlignments.pyx":627
 *             print("Read is neither read 1 nor read 2: %s" % (not read.is_read1 and not read.is_read2))
 *             sys.exit(1)
 *         print("Layouts made, now trying to merge. About to assert shared names.")             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Layouts_made_now_trying_to_merge) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "utilBMF/MergePairedAlignments.pyx":629
 *         print("Layouts made, now trying to merge. About to assert shared names.")
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             assert(Layout1.Name == Layout2.Name)
 *         except AssertionError:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      /*try:*/ {

        /* "utilBMF/MergePairedAlignments.pyx":630
 * 
 *         try:
 *             assert(Layout1.Name == Layout2.Name)             # <<<<<<<<<<<<<<
 *         except AssertionError:
 *             print("read1.query_name: %s. read2.query_name: %s" % (Layout1.Name,
 */
        #ifndef CYTHON_WITHOUT_ASSERTIONS
        if (unlikely(!Py_OptimizeFlag)) {
          __pyx_t_7 = PyObject_RichCompare(__pyx_v_Layout1->Name, __pyx_v_Layout2->Name, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
          __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_9)) {
            PyErr_SetNone(PyExc_AssertionError);
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
          }
        }
        #endif
      }
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L21_try_end;
      __pyx_L14_error:;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "utilBMF/MergePairedAlignments.pyx":631
 *         try:
 *             assert(Layout1.Name == Layout2.Name)
 *         except AssertionError:             # <<<<<<<<<<<<<<
 *             print("read1.query_name: %s. read2.query_name: %s" % (Layout1.Name,
 *                                                                   Layout2.Name))
 */
      __pyx_t_13 = PyErr_ExceptionMatches(__pyx_builtin_AssertionError);
      if (__pyx_t_13) {
        __Pyx_AddTraceback("utilBMF.MergePairedAlignments.MergePairedAlignments", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_3, &__pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_5);

        /* "utilBMF/MergePairedAlignments.pyx":632
 *             assert(Layout1.Name == Layout2.Name)
 *         except AssertionError:
 *             print("read1.query_name: %s. read2.query_name: %s" % (Layout1.Name,             # <<<<<<<<<<<<<<
 *                                                                   Layout2.Name))
 *             raise ThisIsMadness("Bam is either not name sorted or you are "
 */
        __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_v_Layout1->Name);
        __Pyx_GIVEREF(__pyx_v_Layout1->Name);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_Layout1->Name);
        __Pyx_INCREF(__pyx_v_Layout2->Name);
        __Pyx_GIVEREF(__pyx_v_Layout2->Name);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_Layout2->Name);
        __pyx_t_14 = __Pyx_PyString_Format(__pyx_kp_s_read1_query_name_s_read2_query_n, __pyx_t_2); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__Pyx_PrintOne(0, __pyx_t_14) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "utilBMF/MergePairedAlignments.pyx":634
 *             print("read1.query_name: %s. read2.query_name: %s" % (Layout1.Name,
 *                                                                   Layout2.Name))
 *             raise ThisIsMadness("Bam is either not name sorted or you are "             # <<<<<<<<<<<<<<
 *                                 "missing a read from the pair around read "
 *                                 "# %s in the bam." % count)
 */
        __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_ThisIsMadness); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
        __Pyx_GOTREF(__pyx_t_2);

        /* "utilBMF/MergePairedAlignments.pyx":636
 *             raise ThisIsMadness("Bam is either not name sorted or you are "
 *                                 "missing a read from the pair around read "
 *                                 "# %s in the bam." % count)             # <<<<<<<<<<<<<<
 *         print("About to test if they overlap.")
 *         if(LayoutsOverlap(Layout1, Layout2) is False):
 */
        __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_v_count); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_16 = __Pyx_PyString_Format(__pyx_kp_s_Bam_is_either_not_name_sorted_or, __pyx_t_15); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_15)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_15);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        if (!__pyx_t_15) {
          __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_16); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_GOTREF(__pyx_t_14);
        } else {
          __pyx_t_17 = PyTuple_New(1+1); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_15); __pyx_t_15 = NULL;
          __Pyx_GIVEREF(__pyx_t_16);
          PyTuple_SET_ITEM(__pyx_t_17, 0+1, __pyx_t_16);
          __pyx_t_16 = 0;
          __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_17, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_Raise(__pyx_t_14, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
      }
      goto __pyx_L16_except_error;
      __pyx_L16_except_error:;
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      goto __pyx_L1_error;
      __pyx_L21_try_end:;
    }

    /* "utilBMF/MergePairedAlignments.pyx":637
 *                                 "missing a read from the pair around read "
 *                                 "# %s in the bam." % count)
 *         print("About to test if they overlap.")             # <<<<<<<<<<<<<<
 *         if(LayoutsOverlap(Layout1, Layout2) is False):
 *             """
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_About_to_test_if_they_overlap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "utilBMF/MergePairedAlignments.pyx":638
 *                                 "# %s in the bam." % count)
 *         print("About to test if they overlap.")
 *         if(LayoutsOverlap(Layout1, Layout2) is False):             # <<<<<<<<<<<<<<
 *             """
 *             If they don't overlap, write all of the reads with that name
 */
    __pyx_t_9 = ((__pyx_f_7utilBMF_21MergePairedAlignments_LayoutsOverlap(__pyx_v_Layout1, __pyx_v_Layout2) == 0) != 0);
    if (__pyx_t_9) {

      /* "utilBMF/MergePairedAlignments.pyx":643
 *             that haven't already been written.
 *             """
 *             for tmpRead in ReadIndex.find(tmpName):             # <<<<<<<<<<<<<<
 *                 if(not tmpRead.is_supplementary and not tmpRead.is_secondary):
 *                     tmpRead.set_tag("MP", "N")
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ReadIndex, __pyx_n_s_find); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_tmpName); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
      } else {
        __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_7); __pyx_t_7 = NULL;
        __Pyx_INCREF(__pyx_v_tmpName);
        __Pyx_GIVEREF(__pyx_v_tmpName);
        PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_v_tmpName);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_14, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3); __pyx_t_18 = 0;
        __pyx_t_19 = NULL;
      } else {
        __pyx_t_18 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_19 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (likely(!__pyx_t_19)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_18 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_18); __Pyx_INCREF(__pyx_t_5); __pyx_t_18++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          } else {
            if (__pyx_t_18 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_18); __Pyx_INCREF(__pyx_t_5); __pyx_t_18++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          }
        } else {
          __pyx_t_5 = __pyx_t_19(__pyx_t_3);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5pysam_14calignmentfile_AlignedSegment))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_XDECREF_SET(__pyx_v_tmpRead, ((__pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t)__pyx_t_5));
        __pyx_t_5 = 0;

        /* "utilBMF/MergePairedAlignments.pyx":644
 *             """
 *             for tmpRead in ReadIndex.find(tmpName):
 *                 if(not tmpRead.is_supplementary and not tmpRead.is_secondary):             # <<<<<<<<<<<<<<
 *                     tmpRead.set_tag("MP", "N")
 *                     outHandle.write(tmpRead)
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tmpRead), __pyx_n_s_is_supplementary); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_20 = ((!__pyx_t_6) != 0);
        if (__pyx_t_20) {
        } else {
          __pyx_t_9 = __pyx_t_20;
          goto __pyx_L28_bool_binop_done;
        }
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tmpRead), __pyx_n_s_is_secondary); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_20 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_6 = ((!__pyx_t_20) != 0);
        __pyx_t_9 = __pyx_t_6;
        __pyx_L28_bool_binop_done:;
        if (__pyx_t_9) {

          /* "utilBMF/MergePairedAlignments.pyx":645
 *             for tmpRead in ReadIndex.find(tmpName):
 *                 if(not tmpRead.is_supplementary and not tmpRead.is_secondary):
 *                     tmpRead.set_tag("MP", "N")             # <<<<<<<<<<<<<<
 *                     outHandle.write(tmpRead)
 *             continue
 */
          __pyx_t_5 = ((struct __pyx_vtabstruct_5pysam_14calignmentfile_AlignedSegment *)__pyx_v_tmpRead->__pyx_vtab)->set_tag(((struct __pyx_obj_5pysam_14calignmentfile_AlignedSegment *)__pyx_v_tmpRead), __pyx_n_s_MP, __pyx_n_s_N, 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "utilBMF/MergePairedAlignments.pyx":646
 *                 if(not tmpRead.is_supplementary and not tmpRead.is_secondary):
 *                     tmpRead.set_tag("MP", "N")
 *                     outHandle.write(tmpRead)             # <<<<<<<<<<<<<<
 *             continue
 *         print("Merging Layouts")
 */
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_outHandle, __pyx_n_s_write); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_7 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_14))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_14);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_14, function);
            }
          }
          if (!__pyx_t_7) {
            __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_14, ((PyObject *)__pyx_v_tmpRead)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_5);
          } else {
            __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7); __pyx_t_7 = NULL;
            __Pyx_INCREF(((PyObject *)__pyx_v_tmpRead));
            __Pyx_GIVEREF(((PyObject *)__pyx_v_tmpRead));
            PyTuple_SET_ITEM(__pyx_t_2, 0+1, ((PyObject *)__pyx_v_tmpRead));
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L27;
        }
        __pyx_L27:;

        /* "utilBMF/MergePairedAlignments.pyx":643
 *             that haven't already been written.
 *             """
 *             for tmpRead in ReadIndex.find(tmpName):             # <<<<<<<<<<<<<<
 *                 if(not tmpRead.is_supplementary and not tmpRead.is_secondary):
 *                     tmpRead.set_tag("MP", "N")
 */
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "utilBMF/MergePairedAlignments.pyx":647
 *                     tmpRead.set_tag("MP", "N")
 *                     outHandle.write(tmpRead)
 *             continue             # <<<<<<<<<<<<<<
 *         print("Merging Layouts")
 *         if(Layout1.pos < Layout2.pos):
 */
      goto __pyx_L4_continue;
    }

    /* "utilBMF/MergePairedAlignments.pyx":648
 *                     outHandle.write(tmpRead)
 *             continue
 *         print("Merging Layouts")             # <<<<<<<<<<<<<<
 *         if(Layout1.pos < Layout2.pos):
 *             newSamRead = Layout1.__csam__(Layout2)
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Merging_Layouts) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "utilBMF/MergePairedAlignments.pyx":649
 *             continue
 *         print("Merging Layouts")
 *         if(Layout1.pos < Layout2.pos):             # <<<<<<<<<<<<<<
 *             newSamRead = Layout1.__csam__(Layout2)
 *             print("Merging didn't break everything!")
 */
    __pyx_t_9 = ((__pyx_v_Layout1->pos < __pyx_v_Layout2->pos) != 0);
    if (__pyx_t_9) {

      /* "utilBMF/MergePairedAlignments.pyx":650
 *         print("Merging Layouts")
 *         if(Layout1.pos < Layout2.pos):
 *             newSamRead = Layout1.__csam__(Layout2)             # <<<<<<<<<<<<<<
 *             print("Merging didn't break everything!")
 *             print(newSamRead)
 */
      __pyx_t_3 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_Layout1->__pyx_vtab)->__pyx___csam__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_Layout1), __pyx_v_Layout2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_newSamRead, ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "utilBMF/MergePairedAlignments.pyx":651
 *         if(Layout1.pos < Layout2.pos):
 *             newSamRead = Layout1.__csam__(Layout2)
 *             print("Merging didn't break everything!")             # <<<<<<<<<<<<<<
 *             print(newSamRead)
 *             if(Layout1.MergeSuccess):
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_Merging_didn_t_break_everything) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "utilBMF/MergePairedAlignments.pyx":652
 *             newSamRead = Layout1.__csam__(Layout2)
 *             print("Merging didn't break everything!")
 *             print(newSamRead)             # <<<<<<<<<<<<<<
 *             if(Layout1.MergeSuccess):
 *                 outHandleMerge.write(newSamRead)
 */
      if (__Pyx_PrintOne(0, __pyx_v_newSamRead) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "utilBMF/MergePairedAlignments.pyx":653
 *             print("Merging didn't break everything!")
 *             print(newSamRead)
 *             if(Layout1.MergeSuccess):             # <<<<<<<<<<<<<<
 *                 outHandleMerge.write(newSamRead)
 *             else:
 */
      __pyx_t_9 = (__pyx_v_Layout1->MergeSuccess != 0);
      if (__pyx_t_9) {

        /* "utilBMF/MergePairedAlignments.pyx":654
 *             print(newSamRead)
 *             if(Layout1.MergeSuccess):
 *                 outHandleMerge.write(newSamRead)             # <<<<<<<<<<<<<<
 *             else:
 *                 print("Bam record merge failed, write original reads to file.")
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_outHandleMerge, __pyx_n_s_write); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_14 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        if (!__pyx_t_14) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_newSamRead); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
        } else {
          __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_14); __pyx_t_14 = NULL;
          __Pyx_INCREF(__pyx_v_newSamRead);
          __Pyx_GIVEREF(__pyx_v_newSamRead);
          PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_newSamRead);
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L31;
      }
      /*else*/ {

        /* "utilBMF/MergePairedAlignments.pyx":656
 *                 outHandleMerge.write(newSamRead)
 *             else:
 *                 print("Bam record merge failed, write original reads to file.")             # <<<<<<<<<<<<<<
 *                 for tmpRead in ReadIndex.find(tmpName):
 *                     if(not tmpRead.is_supplementary and not tmpRead.is_secondary):
 */
        if (__Pyx_PrintOne(0, __pyx_kp_s_Bam_record_merge_failed_write_or) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "utilBMF/MergePairedAlignments.pyx":657
 *             else:
 *                 print("Bam record merge failed, write original reads to file.")
 *                 for tmpRead in ReadIndex.find(tmpName):             # <<<<<<<<<<<<<<
 *                     if(not tmpRead.is_supplementary and not tmpRead.is_secondary):
 *                         tmpRead.set_tag("MP", "F")
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ReadIndex, __pyx_n_s_find); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_2 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        if (!__pyx_t_2) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_tmpName); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
        } else {
          __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_2); __pyx_t_2 = NULL;
          __Pyx_INCREF(__pyx_v_tmpName);
          __Pyx_GIVEREF(__pyx_v_tmpName);
          PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_v_tmpName);
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_14, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
          __pyx_t_5 = __pyx_t_3; __Pyx_INCREF(__pyx_t_5); __pyx_t_18 = 0;
          __pyx_t_19 = NULL;
        } else {
          __pyx_t_18 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_19 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        for (;;) {
          if (likely(!__pyx_t_19)) {
            if (likely(PyList_CheckExact(__pyx_t_5))) {
              if (__pyx_t_18 >= PyList_GET_SIZE(__pyx_t_5)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_18); __Pyx_INCREF(__pyx_t_3); __pyx_t_18++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_3);
              #endif
            } else {
              if (__pyx_t_18 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_18); __Pyx_INCREF(__pyx_t_3); __pyx_t_18++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_3);
              #endif
            }
          } else {
            __pyx_t_3 = __pyx_t_19(__pyx_t_5);
            if (unlikely(!__pyx_t_3)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_3);
          }
          if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5pysam_14calignmentfile_AlignedSegment))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_XDECREF_SET(__pyx_v_tmpRead, ((__pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t)__pyx_t_3));
          __pyx_t_3 = 0;

          /* "utilBMF/MergePairedAlignments.pyx":658
 *                 print("Bam record merge failed, write original reads to file.")
 *                 for tmpRead in ReadIndex.find(tmpName):
 *                     if(not tmpRead.is_supplementary and not tmpRead.is_secondary):             # <<<<<<<<<<<<<<
 *                         tmpRead.set_tag("MP", "F")
 *                         outHandle.write(tmpRead)
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tmpRead), __pyx_n_s_is_supplementary); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_20 = ((!__pyx_t_6) != 0);
          if (__pyx_t_20) {
          } else {
            __pyx_t_9 = __pyx_t_20;
            goto __pyx_L35_bool_binop_done;
          }
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tmpRead), __pyx_n_s_is_secondary); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_20 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_6 = ((!__pyx_t_20) != 0);
          __pyx_t_9 = __pyx_t_6;
          __pyx_L35_bool_binop_done:;
          if (__pyx_t_9) {

            /* "utilBMF/MergePairedAlignments.pyx":659
 *                 for tmpRead in ReadIndex.find(tmpName):
 *                     if(not tmpRead.is_supplementary and not tmpRead.is_secondary):
 *                         tmpRead.set_tag("MP", "F")             # <<<<<<<<<<<<<<
 *                         outHandle.write(tmpRead)
 *         else:
 */
            __pyx_t_3 = ((struct __pyx_vtabstruct_5pysam_14calignmentfile_AlignedSegment *)__pyx_v_tmpRead->__pyx_vtab)->set_tag(((struct __pyx_obj_5pysam_14calignmentfile_AlignedSegment *)__pyx_v_tmpRead), __pyx_n_s_MP, __pyx_n_s_F, 0, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

            /* "utilBMF/MergePairedAlignments.pyx":660
 *                     if(not tmpRead.is_supplementary and not tmpRead.is_secondary):
 *                         tmpRead.set_tag("MP", "F")
 *                         outHandle.write(tmpRead)             # <<<<<<<<<<<<<<
 *         else:
 *             newSamRead = Layout2.__csam__(Layout1)
 */
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_outHandle, __pyx_n_s_write); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_2 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_14))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_14, function);
              }
            }
            if (!__pyx_t_2) {
              __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_14, ((PyObject *)__pyx_v_tmpRead)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_3);
            } else {
              __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2); __pyx_t_2 = NULL;
              __Pyx_INCREF(((PyObject *)__pyx_v_tmpRead));
              __Pyx_GIVEREF(((PyObject *)__pyx_v_tmpRead));
              PyTuple_SET_ITEM(__pyx_t_7, 0+1, ((PyObject *)__pyx_v_tmpRead));
              __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            }
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            goto __pyx_L34;
          }
          __pyx_L34:;

          /* "utilBMF/MergePairedAlignments.pyx":657
 *             else:
 *                 print("Bam record merge failed, write original reads to file.")
 *                 for tmpRead in ReadIndex.find(tmpName):             # <<<<<<<<<<<<<<
 *                     if(not tmpRead.is_supplementary and not tmpRead.is_secondary):
 *                         tmpRead.set_tag("MP", "F")
 */
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_L31:;
      goto __pyx_L30;
    }
    /*else*/ {

      /* "utilBMF/MergePairedAlignments.pyx":662
 *                         outHandle.write(tmpRead)
 *         else:
 *             newSamRead = Layout2.__csam__(Layout1)             # <<<<<<<<<<<<<<
 *             print("Merging didn't break everything!")
 *             if(Layout2.MergeSuccess):
 */
      __pyx_t_5 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_Layout2->__pyx_vtab)->__pyx___csam__(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_Layout2), __pyx_v_Layout1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_newSamRead, ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "utilBMF/MergePairedAlignments.pyx":663
 *         else:
 *             newSamRead = Layout2.__csam__(Layout1)
 *             print("Merging didn't break everything!")             # <<<<<<<<<<<<<<
 *             if(Layout2.MergeSuccess):
 *                 print("New SAM read: %s" % newSamRead)
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_Merging_didn_t_break_everything) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "utilBMF/MergePairedAlignments.pyx":664
 *             newSamRead = Layout2.__csam__(Layout1)
 *             print("Merging didn't break everything!")
 *             if(Layout2.MergeSuccess):             # <<<<<<<<<<<<<<
 *                 print("New SAM read: %s" % newSamRead)
 *                 outHandleMerge.write(newSamRead)
 */
      __pyx_t_9 = (__pyx_v_Layout2->MergeSuccess != 0);
      if (__pyx_t_9) {

        /* "utilBMF/MergePairedAlignments.pyx":665
 *             print("Merging didn't break everything!")
 *             if(Layout2.MergeSuccess):
 *                 print("New SAM read: %s" % newSamRead)             # <<<<<<<<<<<<<<
 *                 outHandleMerge.write(newSamRead)
 *                 print("And neither did writing!")
 */
        __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_New_SAM_read_s, __pyx_v_newSamRead); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        if (__Pyx_PrintOne(0, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "utilBMF/MergePairedAlignments.pyx":666
 *             if(Layout2.MergeSuccess):
 *                 print("New SAM read: %s" % newSamRead)
 *                 outHandleMerge.write(newSamRead)             # <<<<<<<<<<<<<<
 *                 print("And neither did writing!")
 *             else:
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_outHandleMerge, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_14 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        if (!__pyx_t_14) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_newSamRead); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
        } else {
          __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_14); __pyx_t_14 = NULL;
          __Pyx_INCREF(__pyx_v_newSamRead);
          __Pyx_GIVEREF(__pyx_v_newSamRead);
          PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_newSamRead);
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "utilBMF/MergePairedAlignments.pyx":667
 *                 print("New SAM read: %s" % newSamRead)
 *                 outHandleMerge.write(newSamRead)
 *                 print("And neither did writing!")             # <<<<<<<<<<<<<<
 *             else:
 *                 print("Bam record merge failed, write original reads to file.")
 */
        if (__Pyx_PrintOne(0, __pyx_kp_s_And_neither_did_writing) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L37;
      }
      /*else*/ {

        /* "utilBMF/MergePairedAlignments.pyx":669
 *                 print("And neither did writing!")
 *             else:
 *                 print("Bam record merge failed, write original reads to file.")             # <<<<<<<<<<<<<<
 *                 for tmpRead in ReadIndex.find(tmpName):
 *                     if(not tmpRead.is_supplementary and not tmpRead.is_secondary):
 */
        if (__Pyx_PrintOne(0, __pyx_kp_s_Bam_record_merge_failed_write_or) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "utilBMF/MergePairedAlignments.pyx":670
 *             else:
 *                 print("Bam record merge failed, write original reads to file.")
 *                 for tmpRead in ReadIndex.find(tmpName):             # <<<<<<<<<<<<<<
 *                     if(not tmpRead.is_supplementary and not tmpRead.is_secondary):
 *                         tmpRead.set_tag("MP", "F")
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ReadIndex, __pyx_n_s_find); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        if (!__pyx_t_7) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_tmpName); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
        } else {
          __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_INCREF(__pyx_v_tmpName);
          __Pyx_GIVEREF(__pyx_v_tmpName);
          PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_v_tmpName);
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_14, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
          __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3); __pyx_t_18 = 0;
          __pyx_t_19 = NULL;
        } else {
          __pyx_t_18 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_19 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        for (;;) {
          if (likely(!__pyx_t_19)) {
            if (likely(PyList_CheckExact(__pyx_t_3))) {
              if (__pyx_t_18 >= PyList_GET_SIZE(__pyx_t_3)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_18); __Pyx_INCREF(__pyx_t_5); __pyx_t_18++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            } else {
              if (__pyx_t_18 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_18); __Pyx_INCREF(__pyx_t_5); __pyx_t_18++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            }
          } else {
            __pyx_t_5 = __pyx_t_19(__pyx_t_3);
            if (unlikely(!__pyx_t_5)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_5);
          }
          if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5pysam_14calignmentfile_AlignedSegment))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_XDECREF_SET(__pyx_v_tmpRead, ((__pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t)__pyx_t_5));
          __pyx_t_5 = 0;

          /* "utilBMF/MergePairedAlignments.pyx":671
 *                 print("Bam record merge failed, write original reads to file.")
 *                 for tmpRead in ReadIndex.find(tmpName):
 *                     if(not tmpRead.is_supplementary and not tmpRead.is_secondary):             # <<<<<<<<<<<<<<
 *                         tmpRead.set_tag("MP", "F")
 *                         outHandle.write(tmpRead)
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tmpRead), __pyx_n_s_is_supplementary); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_20 = ((!__pyx_t_6) != 0);
          if (__pyx_t_20) {
          } else {
            __pyx_t_9 = __pyx_t_20;
            goto __pyx_L41_bool_binop_done;
          }
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tmpRead), __pyx_n_s_is_secondary); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_20 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_6 = ((!__pyx_t_20) != 0);
          __pyx_t_9 = __pyx_t_6;
          __pyx_L41_bool_binop_done:;
          if (__pyx_t_9) {

            /* "utilBMF/MergePairedAlignments.pyx":672
 *                 for tmpRead in ReadIndex.find(tmpName):
 *                     if(not tmpRead.is_supplementary and not tmpRead.is_secondary):
 *                         tmpRead.set_tag("MP", "F")             # <<<<<<<<<<<<<<
 *                         outHandle.write(tmpRead)
 *         # Layout1 = None
 */
            __pyx_t_5 = ((struct __pyx_vtabstruct_5pysam_14calignmentfile_AlignedSegment *)__pyx_v_tmpRead->__pyx_vtab)->set_tag(((struct __pyx_obj_5pysam_14calignmentfile_AlignedSegment *)__pyx_v_tmpRead), __pyx_n_s_MP, __pyx_n_s_F, 0, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "utilBMF/MergePairedAlignments.pyx":673
 *                     if(not tmpRead.is_supplementary and not tmpRead.is_secondary):
 *                         tmpRead.set_tag("MP", "F")
 *                         outHandle.write(tmpRead)             # <<<<<<<<<<<<<<
 *         # Layout1 = None
 *         # Layout2 = None
 */
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_outHandle, __pyx_n_s_write); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_7 = NULL;
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_14))) {
              __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_14);
              if (likely(__pyx_t_7)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
                __Pyx_INCREF(__pyx_t_7);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_14, function);
              }
            }
            if (!__pyx_t_7) {
              __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_14, ((PyObject *)__pyx_v_tmpRead)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_5);
            } else {
              __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_7); __pyx_t_7 = NULL;
              __Pyx_INCREF(((PyObject *)__pyx_v_tmpRead));
              __Pyx_GIVEREF(((PyObject *)__pyx_v_tmpRead));
              PyTuple_SET_ITEM(__pyx_t_2, 0+1, ((PyObject *)__pyx_v_tmpRead));
              __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            }
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            goto __pyx_L40;
          }
          __pyx_L40:;

          /* "utilBMF/MergePairedAlignments.pyx":670
 *             else:
 *                 print("Bam record merge failed, write original reads to file.")
 *                 for tmpRead in ReadIndex.find(tmpName):             # <<<<<<<<<<<<<<
 *                     if(not tmpRead.is_supplementary and not tmpRead.is_secondary):
 *                         tmpRead.set_tag("MP", "F")
 */
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_L37:;
    }
    __pyx_L30:;

    /* "utilBMF/MergePairedAlignments.pyx":597
 *     outHandleMerge = sys.stdout
 *     outHandleMerge.write(inHandle.text)
 *     for read in inHandle:             # <<<<<<<<<<<<<<
 *         print("Name: %s" % read.query_name)
 *         count += 1
 */
    __pyx_L4_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":676
 *         # Layout1 = None
 *         # Layout2 = None
 *     if(outHandleMerge != sys.stdout):             # <<<<<<<<<<<<<<
 *         outHandleMerge.close()
 *     outHandle.close()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_stdout); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_outHandleMerge, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_9) {

    /* "utilBMF/MergePairedAlignments.pyx":677
 *         # Layout2 = None
 *     if(outHandleMerge != sys.stdout):
 *         outHandleMerge.close()             # <<<<<<<<<<<<<<
 *     outHandle.close()
 *     inHandle.close()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_outHandleMerge, __pyx_n_s_close); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L43;
  }
  __pyx_L43:;

  /* "utilBMF/MergePairedAlignments.pyx":678
 *     if(outHandleMerge != sys.stdout):
 *         outHandleMerge.close()
 *     outHandle.close()             # <<<<<<<<<<<<<<
 *     inHandle.close()
 *     print("MPA RAN!")
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_outHandle, __pyx_n_s_close); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":679
 *         outHandleMerge.close()
 *     outHandle.close()
 *     inHandle.close()             # <<<<<<<<<<<<<<
 *     print("MPA RAN!")
 *     return
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_inHandle, __pyx_n_s_close); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":680
 *     outHandle.close()
 *     inHandle.close()
 *     print("MPA RAN!")             # <<<<<<<<<<<<<<
 *     return
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_MPA_RAN) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "utilBMF/MergePairedAlignments.pyx":681
 *     inHandle.close()
 *     print("MPA RAN!")
 *     return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":578
 * 
 * 
 * def MergePairedAlignments(cystr inBAM, cystr outBAM=None,             # <<<<<<<<<<<<<<
 *                           int readLength=-1,
 *                           cystr outMerge=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.MergePairedAlignments", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_read);
  __Pyx_XDECREF((PyObject *)__pyx_v_tmpRead);
  __Pyx_XDECREF((PyObject *)__pyx_v_Layout1);
  __Pyx_XDECREF((PyObject *)__pyx_v_Layout2);
  __Pyx_XDECREF(__pyx_v_newSamRead);
  __Pyx_XDECREF(__pyx_v_tmpName);
  __Pyx_XDECREF(__pyx_v_inHandle);
  __Pyx_XDECREF(__pyx_v_ReadIndex);
  __Pyx_XDECREF(__pyx_v_outHandle);
  __Pyx_XDECREF(__pyx_v_outHandleMerge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":684
 * 
 * 
 * cdef int getLayoutLen(AlignedSegment_t read):             # <<<<<<<<<<<<<<
 *     cdef tuple tmpTup
 *     cdef int lensum = 0
 */

static int __pyx_f_7utilBMF_21MergePairedAlignments_getLayoutLen(__pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t __pyx_v_read) {
  PyObject *__pyx_v_tmpTup = 0;
  int __pyx_v_lensum;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getLayoutLen", 0);

  /* "utilBMF/MergePairedAlignments.pyx":686
 * cdef int getLayoutLen(AlignedSegment_t read):
 *     cdef tuple tmpTup
 *     cdef int lensum = 0             # <<<<<<<<<<<<<<
 *     if(read.cigarstring is None):
 *         raise ImproperArgumentError(
 */
  __pyx_v_lensum = 0;

  /* "utilBMF/MergePairedAlignments.pyx":687
 *     cdef tuple tmpTup
 *     cdef int lensum = 0
 *     if(read.cigarstring is None):             # <<<<<<<<<<<<<<
 *         raise ImproperArgumentError(
 *             "read " + read.query_name +
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_cigarstring); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "utilBMF/MergePairedAlignments.pyx":688
 *     cdef int lensum = 0
 *     if(read.cigarstring is None):
 *         raise ImproperArgumentError(             # <<<<<<<<<<<<<<
 *             "read " + read.query_name +
 *             " is unmapped - no such thing as a layout length!")
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_ImproperArgumentError); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);

    /* "utilBMF/MergePairedAlignments.pyx":689
 *     if(read.cigarstring is None):
 *         raise ImproperArgumentError(
 *             "read " + read.query_name +             # <<<<<<<<<<<<<<
 *             " is unmapped - no such thing as a layout length!")
 *     for tmpTup in read.cigar:
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_query_name); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyNumber_Add(__pyx_kp_s_read_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_is_unmapped_no_such_thing_as_a); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "utilBMF/MergePairedAlignments.pyx":691
 *             "read " + read.query_name +
 *             " is unmapped - no such thing as a layout length!")
 *     for tmpTup in read.cigar:             # <<<<<<<<<<<<<<
 *         lensum += tmpTup[1]
 *     return lensum
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_read), __pyx_n_s_cigar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_4 = __pyx_t_1; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_9(__pyx_t_4);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if (!(likely(PyTuple_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_tmpTup, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":692
 *             " is unmapped - no such thing as a layout length!")
 *     for tmpTup in read.cigar:
 *         lensum += tmpTup[1]             # <<<<<<<<<<<<<<
 *     return lensum
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_lensum); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_tmpTup == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_t_1, PyTuple_GET_ITEM(__pyx_v_tmpTup, 1)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_lensum = __pyx_t_10;

    /* "utilBMF/MergePairedAlignments.pyx":691
 *             "read " + read.query_name +
 *             " is unmapped - no such thing as a layout length!")
 *     for tmpTup in read.cigar:             # <<<<<<<<<<<<<<
 *         lensum += tmpTup[1]
 *     return lensum
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":693
 *     for tmpTup in read.cigar:
 *         lensum += tmpTup[1]
 *     return lensum             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_lensum;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":684
 * 
 * 
 * cdef int getLayoutLen(AlignedSegment_t read):             # <<<<<<<<<<<<<<
 *     cdef tuple tmpTup
 *     cdef int lensum = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("utilBMF.MergePairedAlignments.getLayoutLen", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmpTup);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":696
 * 
 * 
 * cpdef cystr ALPToStr(ArrayLayoutPos_t ALP):             # <<<<<<<<<<<<<<
 *     return "|".join(map(str, [ALP.pos, ALP.readPos, ALP.quality,
 *                               ALP.agreement, chr(ALP.operation),
 */

static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_7ALPToStr(PyObject *__pyx_self, PyObject *__pyx_arg_ALP); /*proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_ALPToStr(__pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t __pyx_v_ALP, CYTHON_UNUSED int __pyx_skip_dispatch) {
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ALPToStr", 0);

  /* "utilBMF/MergePairedAlignments.pyx":697
 * 
 * cpdef cystr ALPToStr(ArrayLayoutPos_t ALP):
 *     return "|".join(map(str, [ALP.pos, ALP.readPos, ALP.quality,             # <<<<<<<<<<<<<<
 *                               ALP.agreement, chr(ALP.operation),
 *                               chr(ALP.base), ALP.mergeAgreed]))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_ALP.pos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_uint16_t(__pyx_v_ALP.readPos); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_ALP.quality); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "utilBMF/MergePairedAlignments.pyx":698
 * cpdef cystr ALPToStr(ArrayLayoutPos_t ALP):
 *     return "|".join(map(str, [ALP.pos, ALP.readPos, ALP.quality,
 *                               ALP.agreement, chr(ALP.operation),             # <<<<<<<<<<<<<<
 *                               chr(ALP.base), ALP.mergeAgreed]))
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_uint16_t(__pyx_v_ALP.agreement); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_char(__pyx_v_ALP.operation); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_chr, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":699
 *     return "|".join(map(str, [ALP.pos, ALP.readPos, ALP.quality,
 *                               ALP.agreement, chr(ALP.operation),
 *                               chr(ALP.base), ALP.mergeAgreed]))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __Pyx_PyInt_From_char(__pyx_v_ALP.base); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_chr, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyInt_From_char(__pyx_v_ALP.mergeAgreed); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "utilBMF/MergePairedAlignments.pyx":697
 * 
 * cpdef cystr ALPToStr(ArrayLayoutPos_t ALP):
 *     return "|".join(map(str, [ALP.pos, ALP.readPos, ALP.quality,             # <<<<<<<<<<<<<<
 *                               ALP.agreement, chr(ALP.operation),
 *                               chr(ALP.base), ALP.mergeAgreed]))
 */
  __pyx_t_8 = PyList_New(7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_8, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_8, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_8, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_8, 6, __pyx_t_7);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(((PyObject *)((PyObject*)(&PyString_Type))));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyString_Type))));
  PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)((PyObject*)(&PyString_Type))));
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyString_Join(__pyx_kp_s__20, __pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_7)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":696
 * 
 * 
 * cpdef cystr ALPToStr(ArrayLayoutPos_t ALP):             # <<<<<<<<<<<<<<
 *     return "|".join(map(str, [ALP.pos, ALP.readPos, ALP.quality,
 *                               ALP.agreement, chr(ALP.operation),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.ALPToStr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_7ALPToStr(PyObject *__pyx_self, PyObject *__pyx_arg_ALP); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_7ALPToStr(PyObject *__pyx_self, PyObject *__pyx_arg_ALP) {
  __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t __pyx_v_ALP;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ALPToStr (wrapper)", 0);
  assert(__pyx_arg_ALP); {
    __pyx_v_ALP = __pyx_convert__from_py_ArrayLayoutPos(__pyx_arg_ALP); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.ALPToStr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_6ALPToStr(__pyx_self, __pyx_v_ALP);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_6ALPToStr(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t __pyx_v_ALP) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ALPToStr", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7utilBMF_21MergePairedAlignments_ALPToStr(__pyx_v_ALP, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.ALPToStr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":702
 * 
 * 
 * def testLayout(cystr inBAM, cystr outBAM=None):             # <<<<<<<<<<<<<<
 *     cdef AlignedSegment_t read
 *     cdef Layout_t layout
 */

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_9testLayout(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7utilBMF_21MergePairedAlignments_9testLayout = {"testLayout", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_9testLayout, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_9testLayout(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_inBAM = 0;
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_outBAM = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("testLayout (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_inBAM,&__pyx_n_s_outBAM,0};
    PyObject* values[2] = {0,0};
    values[1] = ((__pyx_t_7utilBMF_8HTSUtils_cystr)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inBAM)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_outBAM);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "testLayout") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_inBAM = ((__pyx_t_7utilBMF_8HTSUtils_cystr)values[0]);
    __pyx_v_outBAM = ((__pyx_t_7utilBMF_8HTSUtils_cystr)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("testLayout", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.testLayout", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inBAM), (&PyString_Type), 1, "inBAM", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_outBAM), (&PyString_Type), 1, "outBAM", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_8testLayout(__pyx_self, __pyx_v_inBAM, __pyx_v_outBAM);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_8testLayout(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_inBAM, __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_outBAM) {
  __pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t __pyx_v_read = 0;
  __pyx_t_7utilBMF_21MergePairedAlignments_Layout_t __pyx_v_layout = 0;
  PyObject *__pyx_v_inHandle = NULL;
  PyObject *__pyx_v_outHandle = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("testLayout", 0);
  __Pyx_INCREF(__pyx_v_outBAM);

  /* "utilBMF/MergePairedAlignments.pyx":705
 *     cdef AlignedSegment_t read
 *     cdef Layout_t layout
 *     if(outBAM is None):             # <<<<<<<<<<<<<<
 *         outBAM = TrimExt(inBAM) + ".testLayout.bam"
 *     inHandle = pysam.AlignmentFile(inBAM, "rb")
 */
  __pyx_t_1 = (__pyx_v_outBAM == ((__pyx_t_7utilBMF_8HTSUtils_cystr)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/MergePairedAlignments.pyx":706
 *     cdef Layout_t layout
 *     if(outBAM is None):
 *         outBAM = TrimExt(inBAM) + ".testLayout.bam"             # <<<<<<<<<<<<<<
 *     inHandle = pysam.AlignmentFile(inBAM, "rb")
 *     outHandle = pysam.AlignmentFile(outBAM, "wb", template=inHandle)
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_TrimExt); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_inBAM); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_inBAM);
      __Pyx_GIVEREF(__pyx_v_inBAM);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_inBAM);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_testLayout_bam); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_4)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF_SET(__pyx_v_outBAM, ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_4));
    __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "utilBMF/MergePairedAlignments.pyx":707
 *     if(outBAM is None):
 *         outBAM = TrimExt(inBAM) + ".testLayout.bam"
 *     inHandle = pysam.AlignmentFile(inBAM, "rb")             # <<<<<<<<<<<<<<
 *     outHandle = pysam.AlignmentFile(outBAM, "wb", template=inHandle)
 *     for read in inHandle:
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pysam); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_AlignmentFile); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_inBAM);
  __Pyx_GIVEREF(__pyx_v_inBAM);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_v_inBAM);
  __Pyx_INCREF(__pyx_n_s_rb);
  __Pyx_GIVEREF(__pyx_n_s_rb);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_n_s_rb);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_inHandle = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":708
 *         outBAM = TrimExt(inBAM) + ".testLayout.bam"
 *     inHandle = pysam.AlignmentFile(inBAM, "rb")
 *     outHandle = pysam.AlignmentFile(outBAM, "wb", template=inHandle)             # <<<<<<<<<<<<<<
 *     for read in inHandle:
 *         layout = Layout(read)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pysam); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_AlignmentFile); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_outBAM);
  __Pyx_GIVEREF(__pyx_v_outBAM);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_outBAM);
  __Pyx_INCREF(__pyx_n_s_wb);
  __Pyx_GIVEREF(__pyx_n_s_wb);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_wb);
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_template, __pyx_v_inHandle) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_outHandle = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":709
 *     inHandle = pysam.AlignmentFile(inBAM, "rb")
 *     outHandle = pysam.AlignmentFile(outBAM, "wb", template=inHandle)
 *     for read in inHandle:             # <<<<<<<<<<<<<<
 *         layout = Layout(read)
 *         read = layout.__read__()
 */
  if (likely(PyList_CheckExact(__pyx_v_inHandle)) || PyTuple_CheckExact(__pyx_v_inHandle)) {
    __pyx_t_3 = __pyx_v_inHandle; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_inHandle); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5pysam_14calignmentfile_AlignedSegment))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_read, ((__pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":710
 *     outHandle = pysam.AlignmentFile(outBAM, "wb", template=inHandle)
 *     for read in inHandle:
 *         layout = Layout(read)             # <<<<<<<<<<<<<<
 *         read = layout.__read__()
 *         outHandle.write(read)
 */
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)__pyx_v_read));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_read));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_read));
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7utilBMF_21MergePairedAlignments_Layout)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_layout, ((__pyx_t_7utilBMF_21MergePairedAlignments_Layout_t)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":711
 *     for read in inHandle:
 *         layout = Layout(read)
 *         read = layout.__read__()             # <<<<<<<<<<<<<<
 *         outHandle.write(read)
 *     inHandle.close()
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_layout), __pyx_n_s_read_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5pysam_14calignmentfile_AlignedSegment))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF_SET(__pyx_v_read, ((__pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":712
 *         layout = Layout(read)
 *         read = layout.__read__()
 *         outHandle.write(read)             # <<<<<<<<<<<<<<
 *     inHandle.close()
 *     outHandle.close()
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_outHandle, __pyx_n_s_write); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)__pyx_v_read)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_read));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_read));
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, ((PyObject *)__pyx_v_read));
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":709
 *     inHandle = pysam.AlignmentFile(inBAM, "rb")
 *     outHandle = pysam.AlignmentFile(outBAM, "wb", template=inHandle)
 *     for read in inHandle:             # <<<<<<<<<<<<<<
 *         layout = Layout(read)
 *         read = layout.__read__()
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":713
 *         read = layout.__read__()
 *         outHandle.write(read)
 *     inHandle.close()             # <<<<<<<<<<<<<<
 *     outHandle.close()
 *     return outBAM
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_inHandle, __pyx_n_s_close); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":714
 *         outHandle.write(read)
 *     inHandle.close()
 *     outHandle.close()             # <<<<<<<<<<<<<<
 *     return outBAM
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_outHandle, __pyx_n_s_close); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":715
 *     inHandle.close()
 *     outHandle.close()
 *     return outBAM             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_outBAM);
  __pyx_r = __pyx_v_outBAM;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":702
 * 
 * 
 * def testLayout(cystr inBAM, cystr outBAM=None):             # <<<<<<<<<<<<<<
 *     cdef AlignedSegment_t read
 *     cdef Layout_t layout
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.testLayout", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_read);
  __Pyx_XDECREF((PyObject *)__pyx_v_layout);
  __Pyx_XDECREF(__pyx_v_inHandle);
  __Pyx_XDECREF(__pyx_v_outHandle);
  __Pyx_XDECREF(__pyx_v_outBAM);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":718
 * 
 * 
 * cdef list FlattenCigar(list cigar):             # <<<<<<<<<<<<<<
 *     cdef size_t k
 *     cdef list retList = []
 */

static PyObject *__pyx_f_7utilBMF_21MergePairedAlignments_FlattenCigar(PyObject *__pyx_v_cigar) {
  size_t __pyx_v_k;
  PyObject *__pyx_v_retList = 0;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_v_glist = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  size_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FlattenCigar", 0);

  /* "utilBMF/MergePairedAlignments.pyx":720
 * cdef list FlattenCigar(list cigar):
 *     cdef size_t k
 *     cdef list retList = []             # <<<<<<<<<<<<<<
 *     for k, g in groupby(cigar, oig0):
 *         glist = list(g)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_retList = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":721
 *     cdef size_t k
 *     cdef list retList = []
 *     for k, g in groupby(cigar, oig0):             # <<<<<<<<<<<<<<
 *         glist = list(g)
 *         retList.append((k, sum(map(oig1, glist))))
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_groupby); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_v_cigar);
  __Pyx_GIVEREF(__pyx_v_cigar);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_cigar);
  __Pyx_INCREF(__pyx_v_7utilBMF_21MergePairedAlignments_oig0);
  __Pyx_GIVEREF(__pyx_v_7utilBMF_21MergePairedAlignments_oig0);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_7utilBMF_21MergePairedAlignments_oig0);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_3 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L6_unpacking_done:;
    }
    __pyx_t_9 = __Pyx_PyInt_As_size_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_k = __pyx_t_9;
    __Pyx_XDECREF_SET(__pyx_v_g, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":722
 *     cdef list retList = []
 *     for k, g in groupby(cigar, oig0):
 *         glist = list(g)             # <<<<<<<<<<<<<<
 *         retList.append((k, sum(map(oig1, glist))))
 *     return retList
 */
    __pyx_t_1 = PySequence_List(__pyx_v_g); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_glist, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":723
 *     for k, g in groupby(cigar, oig0):
 *         glist = list(g)
 *         retList.append((k, sum(map(oig1, glist))))             # <<<<<<<<<<<<<<
 *     return retList
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_k); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_7utilBMF_21MergePairedAlignments_oig1);
    __Pyx_GIVEREF(__pyx_v_7utilBMF_21MergePairedAlignments_oig1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_7utilBMF_21MergePairedAlignments_oig1);
    __Pyx_INCREF(__pyx_v_glist);
    __Pyx_GIVEREF(__pyx_v_glist);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_glist);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_retList, __pyx_t_3); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":721
 *     cdef size_t k
 *     cdef list retList = []
 *     for k, g in groupby(cigar, oig0):             # <<<<<<<<<<<<<<
 *         glist = list(g)
 *         retList.append((k, sum(map(oig1, glist))))
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":724
 *         glist = list(g)
 *         retList.append((k, sum(map(oig1, glist))))
 *     return retList             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retList);
  __pyx_r = __pyx_v_retList;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":718
 * 
 * 
 * cdef list FlattenCigar(list cigar):             # <<<<<<<<<<<<<<
 *     cdef size_t k
 *     cdef list retList = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.FlattenCigar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_retList);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XDECREF(__pyx_v_glist);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":727
 * 
 * 
 * cpdef cystr FlattenCigarString(cystr cigar):             # <<<<<<<<<<<<<<
 *     return cFlattenCigarString(cigar)
 * 
 */

static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_11FlattenCigarString(PyObject *__pyx_self, PyObject *__pyx_v_cigar); /*proto*/
static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_FlattenCigarString(__pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_cigar, CYTHON_UNUSED int __pyx_skip_dispatch) {
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FlattenCigarString", 0);

  /* "utilBMF/MergePairedAlignments.pyx":728
 * 
 * cpdef cystr FlattenCigarString(cystr cigar):
 *     return cFlattenCigarString(cigar)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7utilBMF_21MergePairedAlignments_cFlattenCigarString(__pyx_v_cigar); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":727
 * 
 * 
 * cpdef cystr FlattenCigarString(cystr cigar):             # <<<<<<<<<<<<<<
 *     return cFlattenCigarString(cigar)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.FlattenCigarString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_11FlattenCigarString(PyObject *__pyx_self, PyObject *__pyx_v_cigar); /*proto*/
static PyObject *__pyx_pw_7utilBMF_21MergePairedAlignments_11FlattenCigarString(PyObject *__pyx_self, PyObject *__pyx_v_cigar) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FlattenCigarString (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cigar), (&PyString_Type), 1, "cigar", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_7utilBMF_21MergePairedAlignments_10FlattenCigarString(__pyx_self, ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_v_cigar));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7utilBMF_21MergePairedAlignments_10FlattenCigarString(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_cigar) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FlattenCigarString", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7utilBMF_21MergePairedAlignments_FlattenCigarString(__pyx_v_cigar, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.FlattenCigarString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pyx":731
 * 
 * 
 * cdef cystr cFlattenCigarString(cystr cigar):             # <<<<<<<<<<<<<<
 *     """
 *     Flattens cigar strings for cases where it is needed.
 */

static __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_f_7utilBMF_21MergePairedAlignments_cFlattenCigarString(__pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_cigar) {
  CYTHON_UNUSED size_t __pyx_v_count;
  int __pyx_v_runSum;
  int __pyx_v_tmpInt;
  CYTHON_UNUSED char __pyx_v_tmpCigarOpChar;
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_v_tmpIntStr = 0;
  arrayobject *__pyx_v_chars = 0;
  arrayobject *__pyx_v_Lengths = 0;
  PyObject *__pyx_v_outTupleList = 0;
  PyObject *__pyx_v_CigarOpChar = NULL;
  PyObject *__pyx_v_entries = NULL;
  __pyx_t_7utilBMF_8HTSUtils_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *(*__pyx_t_10)(PyObject *);
  Py_ssize_t __pyx_t_11;
  char __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cFlattenCigarString", 0);

  /* "utilBMF/MergePairedAlignments.pyx":735
 *     Flattens cigar strings for cases where it is needed.
 *     """
 *     cdef size_t count = 0             # <<<<<<<<<<<<<<
 *     cdef int runSum = 0
 *     cdef int tmpInt
 */
  __pyx_v_count = 0;

  /* "utilBMF/MergePairedAlignments.pyx":736
 *     """
 *     cdef size_t count = 0
 *     cdef int runSum = 0             # <<<<<<<<<<<<<<
 *     cdef int tmpInt
 *     cdef char cigarOpChar, tmpCigarOpChar
 */
  __pyx_v_runSum = 0;

  /* "utilBMF/MergePairedAlignments.pyx":742
 *     cdef int cigarOpLen
 *     cdef int newCigarOpLen
 *     cdef py_array chars = cs_to_ia("".join(rsplit("[0-9]+", cigar)[1:]))             # <<<<<<<<<<<<<<
 *     cdef py_array Lengths = array('i', [int(tmpIntStr) for tmpIntStr in
 *                                         rsplit("[A-Z]", cigar)[:len(chars)]])
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_rsplit); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_kp_s_0_9);
  __Pyx_GIVEREF(__pyx_kp_s_0_9);
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_kp_s_0_9);
  __Pyx_INCREF(__pyx_v_cigar);
  __Pyx_GIVEREF(__pyx_v_cigar);
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_cigar);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_1, 1, 0, NULL, NULL, &__pyx_slice__21, 1, 0, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Join(__pyx_kp_s__11, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((PyObject *)__pyx_f_7utilBMF_7cstring_cs_to_ia(((__pyx_t_7utilBMF_7cstring_cystr)__pyx_t_1))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_chars = ((arrayobject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":743
 *     cdef int newCigarOpLen
 *     cdef py_array chars = cs_to_ia("".join(rsplit("[0-9]+", cigar)[1:]))
 *     cdef py_array Lengths = array('i', [int(tmpIntStr) for tmpIntStr in             # <<<<<<<<<<<<<<
 *                                         rsplit("[A-Z]", cigar)[:len(chars)]])
 *     cdef list outTupleList = []
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_array); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);

  /* "utilBMF/MergePairedAlignments.pyx":744
 *     cdef py_array chars = cs_to_ia("".join(rsplit("[0-9]+", cigar)[1:]))
 *     cdef py_array Lengths = array('i', [int(tmpIntStr) for tmpIntStr in
 *                                         rsplit("[A-Z]", cigar)[:len(chars)]])             # <<<<<<<<<<<<<<
 *     cdef list outTupleList = []
 *     '''
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_rsplit); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_8 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (__pyx_t_7) {
    __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
  }
  __Pyx_INCREF(__pyx_kp_s_A_Z);
  __Pyx_GIVEREF(__pyx_kp_s_A_Z);
  PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_4, __pyx_kp_s_A_Z);
  __Pyx_INCREF(__pyx_v_cigar);
  __Pyx_GIVEREF(__pyx_v_cigar);
  PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_4, __pyx_v_cigar);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(((PyObject *)__pyx_v_chars) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = Py_SIZE(((PyObject *)__pyx_v_chars)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_t_3, 0, __pyx_t_4, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
    __pyx_t_3 = __pyx_t_6; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_9(__pyx_t_3);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    if (!(likely(PyString_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_6)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_tmpIntStr, ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":743
 *     cdef int newCigarOpLen
 *     cdef py_array chars = cs_to_ia("".join(rsplit("[0-9]+", cigar)[1:]))
 *     cdef py_array Lengths = array('i', [int(tmpIntStr) for tmpIntStr in             # <<<<<<<<<<<<<<
 *                                         rsplit("[A-Z]", cigar)[:len(chars)]])
 *     cdef list outTupleList = []
 */
    __pyx_t_6 = PyNumber_Int(__pyx_v_tmpIntStr); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_6 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (__pyx_t_3) {
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
  }
  __Pyx_INCREF(__pyx_n_s_i);
  __Pyx_GIVEREF(__pyx_n_s_i);
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_4, __pyx_n_s_i);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_4, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7cpython_5array_array))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_Lengths = ((arrayobject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":745
 *     cdef py_array Lengths = array('i', [int(tmpIntStr) for tmpIntStr in
 *                                         rsplit("[A-Z]", cigar)[:len(chars)]])
 *     cdef list outTupleList = []             # <<<<<<<<<<<<<<
 *     '''
 *     cdef py_array Lengths = array(
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_outTupleList = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":750
 *         "i", )
 *     '''
 *     for CigarOpChar, entries in groupby(zip(chars, Lengths), key=oig0):             # <<<<<<<<<<<<<<
 *         for tmpCigarOpChar, tmpInt in list(entries):
 *             runSum += tmpInt
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_groupby); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_chars));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_chars));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_chars));
  __Pyx_INCREF(((PyObject *)__pyx_v_Lengths));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_Lengths));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_Lengths));
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_key, __pyx_v_7utilBMF_21MergePairedAlignments_oig0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_6 = __pyx_t_5; __Pyx_INCREF(__pyx_t_6); __pyx_t_4 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_9(__pyx_t_6);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_10(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_2 = __pyx_t_10(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_3), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L8_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_CigarOpChar, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_entries, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":751
 *     '''
 *     for CigarOpChar, entries in groupby(zip(chars, Lengths), key=oig0):
 *         for tmpCigarOpChar, tmpInt in list(entries):             # <<<<<<<<<<<<<<
 *             runSum += tmpInt
 *         outTupleList.append(opLenToStr(CigarOpChar, runSum))
 */
    __pyx_t_5 = PySequence_List(__pyx_v_entries); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __pyx_t_5; __Pyx_INCREF(__pyx_t_2); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_11); __Pyx_INCREF(__pyx_t_5); __pyx_t_11++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
        PyObject* sequence = __pyx_t_5;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        #else
        __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        #endif
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_8 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_10 = Py_TYPE(__pyx_t_8)->tp_iternext;
        index = 0; __pyx_t_1 = __pyx_t_10(__pyx_t_8); if (unlikely(!__pyx_t_1)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_1);
        index = 1; __pyx_t_3 = __pyx_t_10(__pyx_t_8); if (unlikely(!__pyx_t_3)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_8), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L12_unpacking_done;
        __pyx_L11_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L12_unpacking_done:;
      }
      __pyx_t_12 = __Pyx_PyInt_As_char(__pyx_t_1); if (unlikely((__pyx_t_12 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_tmpCigarOpChar = __pyx_t_12;
      __pyx_v_tmpInt = __pyx_t_13;

      /* "utilBMF/MergePairedAlignments.pyx":752
 *     for CigarOpChar, entries in groupby(zip(chars, Lengths), key=oig0):
 *         for tmpCigarOpChar, tmpInt in list(entries):
 *             runSum += tmpInt             # <<<<<<<<<<<<<<
 *         outTupleList.append(opLenToStr(CigarOpChar, runSum))
 *         runSum = 0
 */
      __pyx_v_runSum = (__pyx_v_runSum + __pyx_v_tmpInt);

      /* "utilBMF/MergePairedAlignments.pyx":751
 *     '''
 *     for CigarOpChar, entries in groupby(zip(chars, Lengths), key=oig0):
 *         for tmpCigarOpChar, tmpInt in list(entries):             # <<<<<<<<<<<<<<
 *             runSum += tmpInt
 *         outTupleList.append(opLenToStr(CigarOpChar, runSum))
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":753
 *         for tmpCigarOpChar, tmpInt in list(entries):
 *             runSum += tmpInt
 *         outTupleList.append(opLenToStr(CigarOpChar, runSum))             # <<<<<<<<<<<<<<
 *         runSum = 0
 *     return "".join(outTupleList)
 */
    __pyx_t_12 = __Pyx_PyInt_As_char(__pyx_v_CigarOpChar); if (unlikely((__pyx_t_12 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = __pyx_f_7utilBMF_8Inliners_opLenToStr(__pyx_t_12, __pyx_v_runSum); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_outTupleList, __pyx_t_2); if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":754
 *             runSum += tmpInt
 *         outTupleList.append(opLenToStr(CigarOpChar, runSum))
 *         runSum = 0             # <<<<<<<<<<<<<<
 *     return "".join(outTupleList)
 */
    __pyx_v_runSum = 0;

    /* "utilBMF/MergePairedAlignments.pyx":750
 *         "i", )
 *     '''
 *     for CigarOpChar, entries in groupby(zip(chars, Lengths), key=oig0):             # <<<<<<<<<<<<<<
 *         for tmpCigarOpChar, tmpInt in list(entries):
 *             runSum += tmpInt
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":755
 *         outTupleList.append(opLenToStr(CigarOpChar, runSum))
 *         runSum = 0
 *     return "".join(outTupleList)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyString_Join(__pyx_kp_s__11, __pyx_v_outTupleList); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(PyString_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_6)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = ((__pyx_t_7utilBMF_8HTSUtils_cystr)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "utilBMF/MergePairedAlignments.pyx":731
 * 
 * 
 * cdef cystr cFlattenCigarString(cystr cigar):             # <<<<<<<<<<<<<<
 *     """
 *     Flattens cigar strings for cases where it is needed.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("utilBMF.MergePairedAlignments.cFlattenCigarString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmpIntStr);
  __Pyx_XDECREF((PyObject *)__pyx_v_chars);
  __Pyx_XDECREF((PyObject *)__pyx_v_Lengths);
  __Pyx_XDECREF(__pyx_v_outTupleList);
  __Pyx_XDECREF(__pyx_v_CigarOpChar);
  __Pyx_XDECREF(__pyx_v_entries);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/PysamUtils.pxd":15
 *     cdef public AlignmentFile_t handle
 * 
 * cdef inline cystr PysamToChrInline(char RefID):             # <<<<<<<<<<<<<<
 *     if RefID == 0:
 *         return '1'
 */

static CYTHON_INLINE __pyx_t_7utilBMF_10PysamUtils_cystr __pyx_f_7utilBMF_10PysamUtils_PysamToChrInline(char __pyx_v_RefID) {
  __pyx_t_7utilBMF_10PysamUtils_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PysamToChrInline", 0);

  /* "utilBMF/PysamUtils.pxd":180
 *     elif RefID == 81:
 *         return 'GL000194.1'
 *     elif RefID == 82:             # <<<<<<<<<<<<<<
 *         return 'GL000225.1'
 *     else:
 */
  switch (__pyx_v_RefID) {

    /* "utilBMF/PysamUtils.pxd":16
 * 
 * cdef inline cystr PysamToChrInline(char RefID):
 *     if RefID == 0:             # <<<<<<<<<<<<<<
 *         return '1'
 *     elif RefID == 1:
 */
    case 0:

    /* "utilBMF/PysamUtils.pxd":17
 * cdef inline cystr PysamToChrInline(char RefID):
 *     if RefID == 0:
 *         return '1'             # <<<<<<<<<<<<<<
 *     elif RefID == 1:
 *         return '2'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":18
 *     if RefID == 0:
 *         return '1'
 *     elif RefID == 1:             # <<<<<<<<<<<<<<
 *         return '2'
 *     elif RefID == 2:
 */
    case 1:

    /* "utilBMF/PysamUtils.pxd":19
 *         return '1'
 *     elif RefID == 1:
 *         return '2'             # <<<<<<<<<<<<<<
 *     elif RefID == 2:
 *         return '3'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_2);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_2);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":20
 *     elif RefID == 1:
 *         return '2'
 *     elif RefID == 2:             # <<<<<<<<<<<<<<
 *         return '3'
 *     elif RefID == 3:
 */
    case 2:

    /* "utilBMF/PysamUtils.pxd":21
 *         return '2'
 *     elif RefID == 2:
 *         return '3'             # <<<<<<<<<<<<<<
 *     elif RefID == 3:
 *         return '4'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_3);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_3);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":22
 *     elif RefID == 2:
 *         return '3'
 *     elif RefID == 3:             # <<<<<<<<<<<<<<
 *         return '4'
 *     elif RefID == 4:
 */
    case 3:

    /* "utilBMF/PysamUtils.pxd":23
 *         return '3'
 *     elif RefID == 3:
 *         return '4'             # <<<<<<<<<<<<<<
 *     elif RefID == 4:
 *         return '5'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_4);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_4);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":24
 *     elif RefID == 3:
 *         return '4'
 *     elif RefID == 4:             # <<<<<<<<<<<<<<
 *         return '5'
 *     elif RefID == 5:
 */
    case 4:

    /* "utilBMF/PysamUtils.pxd":25
 *         return '4'
 *     elif RefID == 4:
 *         return '5'             # <<<<<<<<<<<<<<
 *     elif RefID == 5:
 *         return '6'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_5);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_5);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":26
 *     elif RefID == 4:
 *         return '5'
 *     elif RefID == 5:             # <<<<<<<<<<<<<<
 *         return '6'
 *     elif RefID == 6:
 */
    case 5:

    /* "utilBMF/PysamUtils.pxd":27
 *         return '5'
 *     elif RefID == 5:
 *         return '6'             # <<<<<<<<<<<<<<
 *     elif RefID == 6:
 *         return '7'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_6);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_6);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":28
 *     elif RefID == 5:
 *         return '6'
 *     elif RefID == 6:             # <<<<<<<<<<<<<<
 *         return '7'
 *     elif RefID == 7:
 */
    case 6:

    /* "utilBMF/PysamUtils.pxd":29
 *         return '6'
 *     elif RefID == 6:
 *         return '7'             # <<<<<<<<<<<<<<
 *     elif RefID == 7:
 *         return '8'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_7);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_7);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":30
 *     elif RefID == 6:
 *         return '7'
 *     elif RefID == 7:             # <<<<<<<<<<<<<<
 *         return '8'
 *     elif RefID == 8:
 */
    case 7:

    /* "utilBMF/PysamUtils.pxd":31
 *         return '7'
 *     elif RefID == 7:
 *         return '8'             # <<<<<<<<<<<<<<
 *     elif RefID == 8:
 *         return '9'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_8);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_8);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":32
 *     elif RefID == 7:
 *         return '8'
 *     elif RefID == 8:             # <<<<<<<<<<<<<<
 *         return '9'
 *     elif RefID == 9:
 */
    case 8:

    /* "utilBMF/PysamUtils.pxd":33
 *         return '8'
 *     elif RefID == 8:
 *         return '9'             # <<<<<<<<<<<<<<
 *     elif RefID == 9:
 *         return '10'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_9);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_9);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":34
 *     elif RefID == 8:
 *         return '9'
 *     elif RefID == 9:             # <<<<<<<<<<<<<<
 *         return '10'
 *     elif RefID == 10:
 */
    case 9:

    /* "utilBMF/PysamUtils.pxd":35
 *         return '9'
 *     elif RefID == 9:
 *         return '10'             # <<<<<<<<<<<<<<
 *     elif RefID == 10:
 *         return '11'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_10);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_10);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":36
 *     elif RefID == 9:
 *         return '10'
 *     elif RefID == 10:             # <<<<<<<<<<<<<<
 *         return '11'
 *     elif RefID == 11:
 */
    case 10:

    /* "utilBMF/PysamUtils.pxd":37
 *         return '10'
 *     elif RefID == 10:
 *         return '11'             # <<<<<<<<<<<<<<
 *     elif RefID == 11:
 *         return '12'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_11);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_11);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":38
 *     elif RefID == 10:
 *         return '11'
 *     elif RefID == 11:             # <<<<<<<<<<<<<<
 *         return '12'
 *     elif RefID == 12:
 */
    case 11:

    /* "utilBMF/PysamUtils.pxd":39
 *         return '11'
 *     elif RefID == 11:
 *         return '12'             # <<<<<<<<<<<<<<
 *     elif RefID == 12:
 *         return '13'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_12);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_12);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":40
 *     elif RefID == 11:
 *         return '12'
 *     elif RefID == 12:             # <<<<<<<<<<<<<<
 *         return '13'
 *     elif RefID == 13:
 */
    case 12:

    /* "utilBMF/PysamUtils.pxd":41
 *         return '12'
 *     elif RefID == 12:
 *         return '13'             # <<<<<<<<<<<<<<
 *     elif RefID == 13:
 *         return '14'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_13);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_13);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":42
 *     elif RefID == 12:
 *         return '13'
 *     elif RefID == 13:             # <<<<<<<<<<<<<<
 *         return '14'
 *     elif RefID == 14:
 */
    case 13:

    /* "utilBMF/PysamUtils.pxd":43
 *         return '13'
 *     elif RefID == 13:
 *         return '14'             # <<<<<<<<<<<<<<
 *     elif RefID == 14:
 *         return '15'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_14);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_14);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":44
 *     elif RefID == 13:
 *         return '14'
 *     elif RefID == 14:             # <<<<<<<<<<<<<<
 *         return '15'
 *     elif RefID == 15:
 */
    case 14:

    /* "utilBMF/PysamUtils.pxd":45
 *         return '14'
 *     elif RefID == 14:
 *         return '15'             # <<<<<<<<<<<<<<
 *     elif RefID == 15:
 *         return '16'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_15);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_15);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":46
 *     elif RefID == 14:
 *         return '15'
 *     elif RefID == 15:             # <<<<<<<<<<<<<<
 *         return '16'
 *     elif RefID == 16:
 */
    case 15:

    /* "utilBMF/PysamUtils.pxd":47
 *         return '15'
 *     elif RefID == 15:
 *         return '16'             # <<<<<<<<<<<<<<
 *     elif RefID == 16:
 *         return '17'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_16);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_16);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":48
 *     elif RefID == 15:
 *         return '16'
 *     elif RefID == 16:             # <<<<<<<<<<<<<<
 *         return '17'
 *     elif RefID == 17:
 */
    case 16:

    /* "utilBMF/PysamUtils.pxd":49
 *         return '16'
 *     elif RefID == 16:
 *         return '17'             # <<<<<<<<<<<<<<
 *     elif RefID == 17:
 *         return '18'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_17);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_17);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":50
 *     elif RefID == 16:
 *         return '17'
 *     elif RefID == 17:             # <<<<<<<<<<<<<<
 *         return '18'
 *     elif RefID == 18:
 */
    case 17:

    /* "utilBMF/PysamUtils.pxd":51
 *         return '17'
 *     elif RefID == 17:
 *         return '18'             # <<<<<<<<<<<<<<
 *     elif RefID == 18:
 *         return '19'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_18);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_18);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":52
 *     elif RefID == 17:
 *         return '18'
 *     elif RefID == 18:             # <<<<<<<<<<<<<<
 *         return '19'
 *     elif RefID == 19:
 */
    case 18:

    /* "utilBMF/PysamUtils.pxd":53
 *         return '18'
 *     elif RefID == 18:
 *         return '19'             # <<<<<<<<<<<<<<
 *     elif RefID == 19:
 *         return '20'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_19);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_19);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":54
 *     elif RefID == 18:
 *         return '19'
 *     elif RefID == 19:             # <<<<<<<<<<<<<<
 *         return '20'
 *     elif RefID == 20:
 */
    case 19:

    /* "utilBMF/PysamUtils.pxd":55
 *         return '19'
 *     elif RefID == 19:
 *         return '20'             # <<<<<<<<<<<<<<
 *     elif RefID == 20:
 *         return '21'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_20);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_20);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":56
 *     elif RefID == 19:
 *         return '20'
 *     elif RefID == 20:             # <<<<<<<<<<<<<<
 *         return '21'
 *     elif RefID == 21:
 */
    case 20:

    /* "utilBMF/PysamUtils.pxd":57
 *         return '20'
 *     elif RefID == 20:
 *         return '21'             # <<<<<<<<<<<<<<
 *     elif RefID == 21:
 *         return '22'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_21);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_21);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":58
 *     elif RefID == 20:
 *         return '21'
 *     elif RefID == 21:             # <<<<<<<<<<<<<<
 *         return '22'
 *     elif RefID == 22:
 */
    case 21:

    /* "utilBMF/PysamUtils.pxd":59
 *         return '21'
 *     elif RefID == 21:
 *         return '22'             # <<<<<<<<<<<<<<
 *     elif RefID == 22:
 *         return 'X'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_22);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_22);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":60
 *     elif RefID == 21:
 *         return '22'
 *     elif RefID == 22:             # <<<<<<<<<<<<<<
 *         return 'X'
 *     elif RefID == 23:
 */
    case 22:

    /* "utilBMF/PysamUtils.pxd":61
 *         return '22'
 *     elif RefID == 22:
 *         return 'X'             # <<<<<<<<<<<<<<
 *     elif RefID == 23:
 *         return 'Y'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_X);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_n_s_X);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":62
 *     elif RefID == 22:
 *         return 'X'
 *     elif RefID == 23:             # <<<<<<<<<<<<<<
 *         return 'Y'
 *     elif RefID == 24:
 */
    case 23:

    /* "utilBMF/PysamUtils.pxd":63
 *         return 'X'
 *     elif RefID == 23:
 *         return 'Y'             # <<<<<<<<<<<<<<
 *     elif RefID == 24:
 *         return 'MT'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_Y);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_n_s_Y);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":64
 *     elif RefID == 23:
 *         return 'Y'
 *     elif RefID == 24:             # <<<<<<<<<<<<<<
 *         return 'MT'
 *     elif RefID == 25:
 */
    case 24:

    /* "utilBMF/PysamUtils.pxd":65
 *         return 'Y'
 *     elif RefID == 24:
 *         return 'MT'             # <<<<<<<<<<<<<<
 *     elif RefID == 25:
 *         return 'GL000207.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_MT);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_n_s_MT);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":66
 *     elif RefID == 24:
 *         return 'MT'
 *     elif RefID == 25:             # <<<<<<<<<<<<<<
 *         return 'GL000207.1'
 *     elif RefID == 26:
 */
    case 25:

    /* "utilBMF/PysamUtils.pxd":67
 *         return 'MT'
 *     elif RefID == 25:
 *         return 'GL000207.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 26:
 *         return 'GL000226.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000207_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000207_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":68
 *     elif RefID == 25:
 *         return 'GL000207.1'
 *     elif RefID == 26:             # <<<<<<<<<<<<<<
 *         return 'GL000226.1'
 *     elif RefID == 27:
 */
    case 26:

    /* "utilBMF/PysamUtils.pxd":69
 *         return 'GL000207.1'
 *     elif RefID == 26:
 *         return 'GL000226.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 27:
 *         return 'GL000229.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000226_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000226_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":70
 *     elif RefID == 26:
 *         return 'GL000226.1'
 *     elif RefID == 27:             # <<<<<<<<<<<<<<
 *         return 'GL000229.1'
 *     elif RefID == 28:
 */
    case 27:

    /* "utilBMF/PysamUtils.pxd":71
 *         return 'GL000226.1'
 *     elif RefID == 27:
 *         return 'GL000229.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 28:
 *         return 'GL000231.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000229_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000229_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":72
 *     elif RefID == 27:
 *         return 'GL000229.1'
 *     elif RefID == 28:             # <<<<<<<<<<<<<<
 *         return 'GL000231.1'
 *     elif RefID == 29:
 */
    case 28:

    /* "utilBMF/PysamUtils.pxd":73
 *         return 'GL000229.1'
 *     elif RefID == 28:
 *         return 'GL000231.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 29:
 *         return 'GL000210.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000231_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000231_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":74
 *     elif RefID == 28:
 *         return 'GL000231.1'
 *     elif RefID == 29:             # <<<<<<<<<<<<<<
 *         return 'GL000210.1'
 *     elif RefID == 30:
 */
    case 29:

    /* "utilBMF/PysamUtils.pxd":75
 *         return 'GL000231.1'
 *     elif RefID == 29:
 *         return 'GL000210.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 30:
 *         return 'GL000239.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000210_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000210_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":76
 *     elif RefID == 29:
 *         return 'GL000210.1'
 *     elif RefID == 30:             # <<<<<<<<<<<<<<
 *         return 'GL000239.1'
 *     elif RefID == 31:
 */
    case 30:

    /* "utilBMF/PysamUtils.pxd":77
 *         return 'GL000210.1'
 *     elif RefID == 30:
 *         return 'GL000239.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 31:
 *         return 'GL000235.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000239_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000239_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":78
 *     elif RefID == 30:
 *         return 'GL000239.1'
 *     elif RefID == 31:             # <<<<<<<<<<<<<<
 *         return 'GL000235.1'
 *     elif RefID == 32:
 */
    case 31:

    /* "utilBMF/PysamUtils.pxd":79
 *         return 'GL000239.1'
 *     elif RefID == 31:
 *         return 'GL000235.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 32:
 *         return 'GL000201.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000235_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000235_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":80
 *     elif RefID == 31:
 *         return 'GL000235.1'
 *     elif RefID == 32:             # <<<<<<<<<<<<<<
 *         return 'GL000201.1'
 *     elif RefID == 33:
 */
    case 32:

    /* "utilBMF/PysamUtils.pxd":81
 *         return 'GL000235.1'
 *     elif RefID == 32:
 *         return 'GL000201.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 33:
 *         return 'GL000247.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000201_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000201_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":82
 *     elif RefID == 32:
 *         return 'GL000201.1'
 *     elif RefID == 33:             # <<<<<<<<<<<<<<
 *         return 'GL000247.1'
 *     elif RefID == 34:
 */
    case 33:

    /* "utilBMF/PysamUtils.pxd":83
 *         return 'GL000201.1'
 *     elif RefID == 33:
 *         return 'GL000247.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 34:
 *         return 'GL000245.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000247_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000247_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":84
 *     elif RefID == 33:
 *         return 'GL000247.1'
 *     elif RefID == 34:             # <<<<<<<<<<<<<<
 *         return 'GL000245.1'
 *     elif RefID == 35:
 */
    case 34:

    /* "utilBMF/PysamUtils.pxd":85
 *         return 'GL000247.1'
 *     elif RefID == 34:
 *         return 'GL000245.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 35:
 *         return 'GL000197.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000245_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000245_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":86
 *     elif RefID == 34:
 *         return 'GL000245.1'
 *     elif RefID == 35:             # <<<<<<<<<<<<<<
 *         return 'GL000197.1'
 *     elif RefID == 36:
 */
    case 35:

    /* "utilBMF/PysamUtils.pxd":87
 *         return 'GL000245.1'
 *     elif RefID == 35:
 *         return 'GL000197.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 36:
 *         return 'GL000203.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000197_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000197_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":88
 *     elif RefID == 35:
 *         return 'GL000197.1'
 *     elif RefID == 36:             # <<<<<<<<<<<<<<
 *         return 'GL000203.1'
 *     elif RefID == 37:
 */
    case 36:

    /* "utilBMF/PysamUtils.pxd":89
 *         return 'GL000197.1'
 *     elif RefID == 36:
 *         return 'GL000203.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 37:
 *         return 'GL000246.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000203_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000203_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":90
 *     elif RefID == 36:
 *         return 'GL000203.1'
 *     elif RefID == 37:             # <<<<<<<<<<<<<<
 *         return 'GL000246.1'
 *     elif RefID == 38:
 */
    case 37:

    /* "utilBMF/PysamUtils.pxd":91
 *         return 'GL000203.1'
 *     elif RefID == 37:
 *         return 'GL000246.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 38:
 *         return 'GL000249.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000246_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000246_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":92
 *     elif RefID == 37:
 *         return 'GL000246.1'
 *     elif RefID == 38:             # <<<<<<<<<<<<<<
 *         return 'GL000249.1'
 *     elif RefID == 39:
 */
    case 38:

    /* "utilBMF/PysamUtils.pxd":93
 *         return 'GL000246.1'
 *     elif RefID == 38:
 *         return 'GL000249.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 39:
 *         return 'GL000196.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000249_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000249_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":94
 *     elif RefID == 38:
 *         return 'GL000249.1'
 *     elif RefID == 39:             # <<<<<<<<<<<<<<
 *         return 'GL000196.1'
 *     elif RefID == 40:
 */
    case 39:

    /* "utilBMF/PysamUtils.pxd":95
 *         return 'GL000249.1'
 *     elif RefID == 39:
 *         return 'GL000196.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 40:
 *         return 'GL000248.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000196_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000196_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":96
 *     elif RefID == 39:
 *         return 'GL000196.1'
 *     elif RefID == 40:             # <<<<<<<<<<<<<<
 *         return 'GL000248.1'
 *     elif RefID == 41:
 */
    case 40:

    /* "utilBMF/PysamUtils.pxd":97
 *         return 'GL000196.1'
 *     elif RefID == 40:
 *         return 'GL000248.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 41:
 *         return 'GL000244.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000248_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000248_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":98
 *     elif RefID == 40:
 *         return 'GL000248.1'
 *     elif RefID == 41:             # <<<<<<<<<<<<<<
 *         return 'GL000244.1'
 *     elif RefID == 42:
 */
    case 41:

    /* "utilBMF/PysamUtils.pxd":99
 *         return 'GL000248.1'
 *     elif RefID == 41:
 *         return 'GL000244.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 42:
 *         return 'GL000238.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000244_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000244_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":100
 *     elif RefID == 41:
 *         return 'GL000244.1'
 *     elif RefID == 42:             # <<<<<<<<<<<<<<
 *         return 'GL000238.1'
 *     elif RefID == 43:
 */
    case 42:

    /* "utilBMF/PysamUtils.pxd":101
 *         return 'GL000244.1'
 *     elif RefID == 42:
 *         return 'GL000238.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 43:
 *         return 'GL000202.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000238_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000238_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":102
 *     elif RefID == 42:
 *         return 'GL000238.1'
 *     elif RefID == 43:             # <<<<<<<<<<<<<<
 *         return 'GL000202.1'
 *     elif RefID == 44:
 */
    case 43:

    /* "utilBMF/PysamUtils.pxd":103
 *         return 'GL000238.1'
 *     elif RefID == 43:
 *         return 'GL000202.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 44:
 *         return 'GL000234.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000202_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000202_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":104
 *     elif RefID == 43:
 *         return 'GL000202.1'
 *     elif RefID == 44:             # <<<<<<<<<<<<<<
 *         return 'GL000234.1'
 *     elif RefID == 45:
 */
    case 44:

    /* "utilBMF/PysamUtils.pxd":105
 *         return 'GL000202.1'
 *     elif RefID == 44:
 *         return 'GL000234.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 45:
 *         return 'GL000232.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000234_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000234_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":106
 *     elif RefID == 44:
 *         return 'GL000234.1'
 *     elif RefID == 45:             # <<<<<<<<<<<<<<
 *         return 'GL000232.1'
 *     elif RefID == 46:
 */
    case 45:

    /* "utilBMF/PysamUtils.pxd":107
 *         return 'GL000234.1'
 *     elif RefID == 45:
 *         return 'GL000232.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 46:
 *         return 'GL000206.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000232_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000232_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":108
 *     elif RefID == 45:
 *         return 'GL000232.1'
 *     elif RefID == 46:             # <<<<<<<<<<<<<<
 *         return 'GL000206.1'
 *     elif RefID == 47:
 */
    case 46:

    /* "utilBMF/PysamUtils.pxd":109
 *         return 'GL000232.1'
 *     elif RefID == 46:
 *         return 'GL000206.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 47:
 *         return 'GL000240.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000206_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000206_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":110
 *     elif RefID == 46:
 *         return 'GL000206.1'
 *     elif RefID == 47:             # <<<<<<<<<<<<<<
 *         return 'GL000240.1'
 *     elif RefID == 48:
 */
    case 47:

    /* "utilBMF/PysamUtils.pxd":111
 *         return 'GL000206.1'
 *     elif RefID == 47:
 *         return 'GL000240.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 48:
 *         return 'GL000236.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000240_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000240_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":112
 *     elif RefID == 47:
 *         return 'GL000240.1'
 *     elif RefID == 48:             # <<<<<<<<<<<<<<
 *         return 'GL000236.1'
 *     elif RefID == 49:
 */
    case 48:

    /* "utilBMF/PysamUtils.pxd":113
 *         return 'GL000240.1'
 *     elif RefID == 48:
 *         return 'GL000236.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 49:
 *         return 'GL000241.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000236_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000236_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":114
 *     elif RefID == 48:
 *         return 'GL000236.1'
 *     elif RefID == 49:             # <<<<<<<<<<<<<<
 *         return 'GL000241.1'
 *     elif RefID == 50:
 */
    case 49:

    /* "utilBMF/PysamUtils.pxd":115
 *         return 'GL000236.1'
 *     elif RefID == 49:
 *         return 'GL000241.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 50:
 *         return 'GL000243.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000241_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000241_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":116
 *     elif RefID == 49:
 *         return 'GL000241.1'
 *     elif RefID == 50:             # <<<<<<<<<<<<<<
 *         return 'GL000243.1'
 *     elif RefID == 51:
 */
    case 50:

    /* "utilBMF/PysamUtils.pxd":117
 *         return 'GL000241.1'
 *     elif RefID == 50:
 *         return 'GL000243.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 51:
 *         return 'GL000242.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000243_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000243_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":118
 *     elif RefID == 50:
 *         return 'GL000243.1'
 *     elif RefID == 51:             # <<<<<<<<<<<<<<
 *         return 'GL000242.1'
 *     elif RefID == 52:
 */
    case 51:

    /* "utilBMF/PysamUtils.pxd":119
 *         return 'GL000243.1'
 *     elif RefID == 51:
 *         return 'GL000242.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 52:
 *         return 'GL000230.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000242_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000242_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":120
 *     elif RefID == 51:
 *         return 'GL000242.1'
 *     elif RefID == 52:             # <<<<<<<<<<<<<<
 *         return 'GL000230.1'
 *     elif RefID == 53:
 */
    case 52:

    /* "utilBMF/PysamUtils.pxd":121
 *         return 'GL000242.1'
 *     elif RefID == 52:
 *         return 'GL000230.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 53:
 *         return 'GL000237.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000230_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000230_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":122
 *     elif RefID == 52:
 *         return 'GL000230.1'
 *     elif RefID == 53:             # <<<<<<<<<<<<<<
 *         return 'GL000237.1'
 *     elif RefID == 54:
 */
    case 53:

    /* "utilBMF/PysamUtils.pxd":123
 *         return 'GL000230.1'
 *     elif RefID == 53:
 *         return 'GL000237.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 54:
 *         return 'GL000233.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000237_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000237_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":124
 *     elif RefID == 53:
 *         return 'GL000237.1'
 *     elif RefID == 54:             # <<<<<<<<<<<<<<
 *         return 'GL000233.1'
 *     elif RefID == 55:
 */
    case 54:

    /* "utilBMF/PysamUtils.pxd":125
 *         return 'GL000237.1'
 *     elif RefID == 54:
 *         return 'GL000233.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 55:
 *         return 'GL000204.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000233_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000233_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":126
 *     elif RefID == 54:
 *         return 'GL000233.1'
 *     elif RefID == 55:             # <<<<<<<<<<<<<<
 *         return 'GL000204.1'
 *     elif RefID == 56:
 */
    case 55:

    /* "utilBMF/PysamUtils.pxd":127
 *         return 'GL000233.1'
 *     elif RefID == 55:
 *         return 'GL000204.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 56:
 *         return 'GL000198.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000204_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000204_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":128
 *     elif RefID == 55:
 *         return 'GL000204.1'
 *     elif RefID == 56:             # <<<<<<<<<<<<<<
 *         return 'GL000198.1'
 *     elif RefID == 57:
 */
    case 56:

    /* "utilBMF/PysamUtils.pxd":129
 *         return 'GL000204.1'
 *     elif RefID == 56:
 *         return 'GL000198.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 57:
 *         return 'GL000208.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000198_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000198_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":130
 *     elif RefID == 56:
 *         return 'GL000198.1'
 *     elif RefID == 57:             # <<<<<<<<<<<<<<
 *         return 'GL000208.1'
 *     elif RefID == 58:
 */
    case 57:

    /* "utilBMF/PysamUtils.pxd":131
 *         return 'GL000198.1'
 *     elif RefID == 57:
 *         return 'GL000208.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 58:
 *         return 'GL000191.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000208_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000208_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":132
 *     elif RefID == 57:
 *         return 'GL000208.1'
 *     elif RefID == 58:             # <<<<<<<<<<<<<<
 *         return 'GL000191.1'
 *     elif RefID == 59:
 */
    case 58:

    /* "utilBMF/PysamUtils.pxd":133
 *         return 'GL000208.1'
 *     elif RefID == 58:
 *         return 'GL000191.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 59:
 *         return 'GL000227.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000191_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000191_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":134
 *     elif RefID == 58:
 *         return 'GL000191.1'
 *     elif RefID == 59:             # <<<<<<<<<<<<<<
 *         return 'GL000227.1'
 *     elif RefID == 60:
 */
    case 59:

    /* "utilBMF/PysamUtils.pxd":135
 *         return 'GL000191.1'
 *     elif RefID == 59:
 *         return 'GL000227.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 60:
 *         return 'GL000228.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000227_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000227_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":136
 *     elif RefID == 59:
 *         return 'GL000227.1'
 *     elif RefID == 60:             # <<<<<<<<<<<<<<
 *         return 'GL000228.1'
 *     elif RefID == 61:
 */
    case 60:

    /* "utilBMF/PysamUtils.pxd":137
 *         return 'GL000227.1'
 *     elif RefID == 60:
 *         return 'GL000228.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 61:
 *         return 'GL000214.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000228_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000228_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":138
 *     elif RefID == 60:
 *         return 'GL000228.1'
 *     elif RefID == 61:             # <<<<<<<<<<<<<<
 *         return 'GL000214.1'
 *     elif RefID == 62:
 */
    case 61:

    /* "utilBMF/PysamUtils.pxd":139
 *         return 'GL000228.1'
 *     elif RefID == 61:
 *         return 'GL000214.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 62:
 *         return 'GL000221.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000214_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000214_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":140
 *     elif RefID == 61:
 *         return 'GL000214.1'
 *     elif RefID == 62:             # <<<<<<<<<<<<<<
 *         return 'GL000221.1'
 *     elif RefID == 63:
 */
    case 62:

    /* "utilBMF/PysamUtils.pxd":141
 *         return 'GL000214.1'
 *     elif RefID == 62:
 *         return 'GL000221.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 63:
 *         return 'GL000209.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000221_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000221_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":142
 *     elif RefID == 62:
 *         return 'GL000221.1'
 *     elif RefID == 63:             # <<<<<<<<<<<<<<
 *         return 'GL000209.1'
 *     elif RefID == 64:
 */
    case 63:

    /* "utilBMF/PysamUtils.pxd":143
 *         return 'GL000221.1'
 *     elif RefID == 63:
 *         return 'GL000209.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 64:
 *         return 'GL000218.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000209_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000209_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":144
 *     elif RefID == 63:
 *         return 'GL000209.1'
 *     elif RefID == 64:             # <<<<<<<<<<<<<<
 *         return 'GL000218.1'
 *     elif RefID == 65:
 */
    case 64:

    /* "utilBMF/PysamUtils.pxd":145
 *         return 'GL000209.1'
 *     elif RefID == 64:
 *         return 'GL000218.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 65:
 *         return 'GL000220.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000218_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000218_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":146
 *     elif RefID == 64:
 *         return 'GL000218.1'
 *     elif RefID == 65:             # <<<<<<<<<<<<<<
 *         return 'GL000220.1'
 *     elif RefID == 66:
 */
    case 65:

    /* "utilBMF/PysamUtils.pxd":147
 *         return 'GL000218.1'
 *     elif RefID == 65:
 *         return 'GL000220.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 66:
 *         return 'GL000213.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000220_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000220_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":148
 *     elif RefID == 65:
 *         return 'GL000220.1'
 *     elif RefID == 66:             # <<<<<<<<<<<<<<
 *         return 'GL000213.1'
 *     elif RefID == 67:
 */
    case 66:

    /* "utilBMF/PysamUtils.pxd":149
 *         return 'GL000220.1'
 *     elif RefID == 66:
 *         return 'GL000213.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 67:
 *         return 'GL000211.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000213_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000213_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":150
 *     elif RefID == 66:
 *         return 'GL000213.1'
 *     elif RefID == 67:             # <<<<<<<<<<<<<<
 *         return 'GL000211.1'
 *     elif RefID == 68:
 */
    case 67:

    /* "utilBMF/PysamUtils.pxd":151
 *         return 'GL000213.1'
 *     elif RefID == 67:
 *         return 'GL000211.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 68:
 *         return 'GL000199.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000211_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000211_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":152
 *     elif RefID == 67:
 *         return 'GL000211.1'
 *     elif RefID == 68:             # <<<<<<<<<<<<<<
 *         return 'GL000199.1'
 *     elif RefID == 69:
 */
    case 68:

    /* "utilBMF/PysamUtils.pxd":153
 *         return 'GL000211.1'
 *     elif RefID == 68:
 *         return 'GL000199.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 69:
 *         return 'GL000217.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000199_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000199_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":154
 *     elif RefID == 68:
 *         return 'GL000199.1'
 *     elif RefID == 69:             # <<<<<<<<<<<<<<
 *         return 'GL000217.1'
 *     elif RefID == 70:
 */
    case 69:

    /* "utilBMF/PysamUtils.pxd":155
 *         return 'GL000199.1'
 *     elif RefID == 69:
 *         return 'GL000217.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 70:
 *         return 'GL000216.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000217_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000217_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":156
 *     elif RefID == 69:
 *         return 'GL000217.1'
 *     elif RefID == 70:             # <<<<<<<<<<<<<<
 *         return 'GL000216.1'
 *     elif RefID == 71:
 */
    case 70:

    /* "utilBMF/PysamUtils.pxd":157
 *         return 'GL000217.1'
 *     elif RefID == 70:
 *         return 'GL000216.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 71:
 *         return 'GL000215.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000216_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000216_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":158
 *     elif RefID == 70:
 *         return 'GL000216.1'
 *     elif RefID == 71:             # <<<<<<<<<<<<<<
 *         return 'GL000215.1'
 *     elif RefID == 72:
 */
    case 71:

    /* "utilBMF/PysamUtils.pxd":159
 *         return 'GL000216.1'
 *     elif RefID == 71:
 *         return 'GL000215.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 72:
 *         return 'GL000205.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000215_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000215_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":160
 *     elif RefID == 71:
 *         return 'GL000215.1'
 *     elif RefID == 72:             # <<<<<<<<<<<<<<
 *         return 'GL000205.1'
 *     elif RefID == 73:
 */
    case 72:

    /* "utilBMF/PysamUtils.pxd":161
 *         return 'GL000215.1'
 *     elif RefID == 72:
 *         return 'GL000205.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 73:
 *         return 'GL000219.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000205_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000205_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":162
 *     elif RefID == 72:
 *         return 'GL000205.1'
 *     elif RefID == 73:             # <<<<<<<<<<<<<<
 *         return 'GL000219.1'
 *     elif RefID == 74:
 */
    case 73:

    /* "utilBMF/PysamUtils.pxd":163
 *         return 'GL000205.1'
 *     elif RefID == 73:
 *         return 'GL000219.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 74:
 *         return 'GL000224.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000219_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000219_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":164
 *     elif RefID == 73:
 *         return 'GL000219.1'
 *     elif RefID == 74:             # <<<<<<<<<<<<<<
 *         return 'GL000224.1'
 *     elif RefID == 75:
 */
    case 74:

    /* "utilBMF/PysamUtils.pxd":165
 *         return 'GL000219.1'
 *     elif RefID == 74:
 *         return 'GL000224.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 75:
 *         return 'GL000223.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000224_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000224_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":166
 *     elif RefID == 74:
 *         return 'GL000224.1'
 *     elif RefID == 75:             # <<<<<<<<<<<<<<
 *         return 'GL000223.1'
 *     elif RefID == 76:
 */
    case 75:

    /* "utilBMF/PysamUtils.pxd":167
 *         return 'GL000224.1'
 *     elif RefID == 75:
 *         return 'GL000223.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 76:
 *         return 'GL000195.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000223_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000223_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":168
 *     elif RefID == 75:
 *         return 'GL000223.1'
 *     elif RefID == 76:             # <<<<<<<<<<<<<<
 *         return 'GL000195.1'
 *     elif RefID == 77:
 */
    case 76:

    /* "utilBMF/PysamUtils.pxd":169
 *         return 'GL000223.1'
 *     elif RefID == 76:
 *         return 'GL000195.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 77:
 *         return 'GL000212.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000195_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000195_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":170
 *     elif RefID == 76:
 *         return 'GL000195.1'
 *     elif RefID == 77:             # <<<<<<<<<<<<<<
 *         return 'GL000212.1'
 *     elif RefID == 78:
 */
    case 77:

    /* "utilBMF/PysamUtils.pxd":171
 *         return 'GL000195.1'
 *     elif RefID == 77:
 *         return 'GL000212.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 78:
 *         return 'GL000222.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000212_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000212_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":172
 *     elif RefID == 77:
 *         return 'GL000212.1'
 *     elif RefID == 78:             # <<<<<<<<<<<<<<
 *         return 'GL000222.1'
 *     elif RefID == 79:
 */
    case 78:

    /* "utilBMF/PysamUtils.pxd":173
 *         return 'GL000212.1'
 *     elif RefID == 78:
 *         return 'GL000222.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 79:
 *         return 'GL000200.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000222_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000222_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":174
 *     elif RefID == 78:
 *         return 'GL000222.1'
 *     elif RefID == 79:             # <<<<<<<<<<<<<<
 *         return 'GL000200.1'
 *     elif RefID == 80:
 */
    case 79:

    /* "utilBMF/PysamUtils.pxd":175
 *         return 'GL000222.1'
 *     elif RefID == 79:
 *         return 'GL000200.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 80:
 *         return 'GL000193.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000200_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000200_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":176
 *     elif RefID == 79:
 *         return 'GL000200.1'
 *     elif RefID == 80:             # <<<<<<<<<<<<<<
 *         return 'GL000193.1'
 *     elif RefID == 81:
 */
    case 80:

    /* "utilBMF/PysamUtils.pxd":177
 *         return 'GL000200.1'
 *     elif RefID == 80:
 *         return 'GL000193.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 81:
 *         return 'GL000194.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000193_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000193_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":178
 *     elif RefID == 80:
 *         return 'GL000193.1'
 *     elif RefID == 81:             # <<<<<<<<<<<<<<
 *         return 'GL000194.1'
 *     elif RefID == 82:
 */
    case 81:

    /* "utilBMF/PysamUtils.pxd":179
 *         return 'GL000193.1'
 *     elif RefID == 81:
 *         return 'GL000194.1'             # <<<<<<<<<<<<<<
 *     elif RefID == 82:
 *         return 'GL000225.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000194_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000194_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/PysamUtils.pxd":180
 *     elif RefID == 81:
 *         return 'GL000194.1'
 *     elif RefID == 82:             # <<<<<<<<<<<<<<
 *         return 'GL000225.1'
 *     else:
 */
    case 82:

    /* "utilBMF/PysamUtils.pxd":181
 *         return 'GL000194.1'
 *     elif RefID == 82:
 *         return 'GL000225.1'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'GL000192.1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000225_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000225_1);
    goto __pyx_L0;
    break;
    default:

    /* "utilBMF/PysamUtils.pxd":183
 *         return 'GL000225.1'
 *     else:
 *         return 'GL000192.1'             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_GL000192_1);
    __pyx_r = ((__pyx_t_7utilBMF_10PysamUtils_cystr)__pyx_kp_s_GL000192_1);
    goto __pyx_L0;
    break;
  }

  /* "utilBMF/PysamUtils.pxd":15
 *     cdef public AlignmentFile_t handle
 * 
 * cdef inline cystr PysamToChrInline(char RefID):             # <<<<<<<<<<<<<<
 *     if RefID == 0:
 *         return '1'
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":91
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cpython_5array_5array___getbuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags) {
  PyObject *__pyx_v_item_count = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "array.pxd":96
 *             # In particular strided access is always provided regardless
 *             # of flags
 *             item_count = Py_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *             info.suboffsets = NULL
 */
  __pyx_t_1 = PyInt_FromSsize_t(Py_SIZE(((PyObject *)__pyx_v_self))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_item_count = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "array.pxd":98
 *             item_count = Py_SIZE(self)
 * 
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "array.pxd":99
 * 
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars             # <<<<<<<<<<<<<<
 *             info.readonly = 0
 *             info.ndim = 1
 */
  __pyx_t_2 = __pyx_v_self->data.as_chars;
  __pyx_v_info->buf = __pyx_t_2;

  /* "array.pxd":100
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars
 *             info.readonly = 0             # <<<<<<<<<<<<<<
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 */
  __pyx_v_info->readonly = 0;

  /* "array.pxd":101
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 *             info.ndim = 1             # <<<<<<<<<<<<<<
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count
 */
  __pyx_v_info->ndim = 1;

  /* "array.pxd":102
 *             info.readonly = 0
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)             # <<<<<<<<<<<<<<
 *             info.len = info.itemsize * item_count
 * 
 */
  __pyx_t_3 = __pyx_v_self->ob_descr->itemsize;
  __pyx_v_info->itemsize = __pyx_t_3;

  /* "array.pxd":103
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count             # <<<<<<<<<<<<<<
 * 
 *             info.shape = <Py_ssize_t*> PyMem_Malloc(sizeof(Py_ssize_t) + 2)
 */
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_info->itemsize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_v_item_count); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_info->len = __pyx_t_5;

  /* "array.pxd":105
 *             info.len = info.itemsize * item_count
 * 
 *             info.shape = <Py_ssize_t*> PyMem_Malloc(sizeof(Py_ssize_t) + 2)             # <<<<<<<<<<<<<<
 *             if not info.shape:
 *                 raise MemoryError()
 */
  __pyx_v_info->shape = ((Py_ssize_t *)PyMem_Malloc(((sizeof(Py_ssize_t)) + 2)));

  /* "array.pxd":106
 * 
 *             info.shape = <Py_ssize_t*> PyMem_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 */
  __pyx_t_6 = ((!(__pyx_v_info->shape != 0)) != 0);
  if (__pyx_t_6) {

    /* "array.pxd":107
 *             info.shape = <Py_ssize_t*> PyMem_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:
 *                 raise MemoryError()             # <<<<<<<<<<<<<<
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "array.pxd":108
 *             if not info.shape:
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing             # <<<<<<<<<<<<<<
 *             info.strides = &info.itemsize
 * 
 */
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_item_count); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  (__pyx_v_info->shape[0]) = __pyx_t_5;

  /* "array.pxd":109
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize             # <<<<<<<<<<<<<<
 * 
 *             info.format = <char*> (info.shape + 1)
 */
  __pyx_v_info->strides = (&__pyx_v_info->itemsize);

  /* "array.pxd":111
 *             info.strides = &info.itemsize
 * 
 *             info.format = <char*> (info.shape + 1)             # <<<<<<<<<<<<<<
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 */
  __pyx_v_info->format = ((char *)(__pyx_v_info->shape + 1));

  /* "array.pxd":112
 * 
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode             # <<<<<<<<<<<<<<
 *             info.format[1] = 0
 *             info.obj = self
 */
  __pyx_t_3 = __pyx_v_self->ob_descr->typecode;
  (__pyx_v_info->format[0]) = __pyx_t_3;

  /* "array.pxd":113
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0             # <<<<<<<<<<<<<<
 *             info.obj = self
 * 
 */
  (__pyx_v_info->format[1]) = 0;

  /* "array.pxd":114
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "array.pxd":91
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cpython.array.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_item_count);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":116
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyMem_Free(info.shape)
 * 
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_7cpython_5array_5array_2__releasebuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "array.pxd":117
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 *             PyMem_Free(info.shape)             # <<<<<<<<<<<<<<
 * 
 *     array newarrayobject(PyTypeObject* type, Py_ssize_t size, arraydescr *descr)
 */
  PyMem_Free(__pyx_v_info->shape);

  /* "array.pxd":116
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyMem_Free(info.shape)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "array.pxd":128
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_clone(arrayobject *__pyx_v_template, Py_ssize_t __pyx_v_length, int __pyx_v_zero) {
  arrayobject *__pyx_v_op = NULL;
  arrayobject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "array.pxd":132
 *     type will be same as template.
 *     if zero is true, new array will be initialized with zeroes."""
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)             # <<<<<<<<<<<<<<
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 */
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_template)), __pyx_v_length, __pyx_v_template->ob_descr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_op = ((arrayobject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "array.pxd":133
 *     if zero is true, new array will be initialized with zeroes."""
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:             # <<<<<<<<<<<<<<
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op
 */
  __pyx_t_3 = (__pyx_v_zero != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (((PyObject *)__pyx_v_op) != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "array.pxd":134
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */
    memset(__pyx_v_op->data.as_chars, 0, (__pyx_v_length * __pyx_v_op->ob_descr->itemsize));
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "array.pxd":135
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline array copy(array self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_op));
  __pyx_r = __pyx_v_op;
  goto __pyx_L0;

  /* "array.pxd":128
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.array.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_op);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":137
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_copy(arrayobject *__pyx_v_self) {
  arrayobject *__pyx_v_op = NULL;
  arrayobject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "array.pxd":139
 * cdef inline array copy(array self):
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)             # <<<<<<<<<<<<<<
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op
 */
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_self)), Py_SIZE(((PyObject *)__pyx_v_self)), __pyx_v_self->ob_descr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_op = ((arrayobject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "array.pxd":140
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */
  memcpy(__pyx_v_op->data.as_chars, __pyx_v_self->data.as_chars, (Py_SIZE(((PyObject *)__pyx_v_op)) * __pyx_v_op->ob_descr->itemsize));

  /* "array.pxd":141
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_op));
  __pyx_r = __pyx_v_op;
  goto __pyx_L0;

  /* "array.pxd":137
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.array.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_op);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":143
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficent appending of new stuff of same type
 *     (e.g. of same array type)
 */

static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *__pyx_v_self, char *__pyx_v_stuff, Py_ssize_t __pyx_v_n) {
  Py_ssize_t __pyx_v_itemsize;
  Py_ssize_t __pyx_v_origsize;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extend_buffer", 0);

  /* "array.pxd":147
 *     (e.g. of same array type)
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 */
  __pyx_t_1 = __pyx_v_self->ob_descr->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "array.pxd":148
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)             # <<<<<<<<<<<<<<
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 */
  __pyx_v_origsize = Py_SIZE(((PyObject *)__pyx_v_self));

  /* "array.pxd":149
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)             # <<<<<<<<<<<<<<
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0
 */
  __pyx_t_1 = resize_smart(__pyx_v_self, (__pyx_v_origsize + __pyx_v_n)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "array.pxd":150
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  memcpy((__pyx_v_self->data.as_chars + (__pyx_v_origsize * __pyx_v_itemsize)), __pyx_v_stuff, (__pyx_v_n * __pyx_v_itemsize));

  /* "array.pxd":151
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend(array self, array other) except -1:
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "array.pxd":143
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficent appending of new stuff of same type
 *     (e.g. of same array type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cpython.array.extend_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":153
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

static CYTHON_INLINE int __pyx_f_7cpython_5array_extend(arrayobject *__pyx_v_self, arrayobject *__pyx_v_other) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extend", 0);

  /* "array.pxd":155
 * cdef inline int extend(array self, array other) except -1:
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:             # <<<<<<<<<<<<<<
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 */
  __pyx_t_1 = ((__pyx_v_self->ob_descr->typecode != __pyx_v_other->ob_descr->typecode) != 0);
  if (__pyx_t_1) {

    /* "array.pxd":156
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()             # <<<<<<<<<<<<<<
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 */
    __pyx_t_2 = PyErr_BadArgument(); if (unlikely(__pyx_t_2 == 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "array.pxd":157
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))             # <<<<<<<<<<<<<<
 * 
 * cdef inline void zero(array self):
 */
  __pyx_t_2 = __pyx_f_7cpython_5array_extend_buffer(__pyx_v_self, __pyx_v_other->data.as_chars, Py_SIZE(((PyObject *)__pyx_v_other))); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "array.pxd":153
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cpython.array.extend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":159
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

static CYTHON_INLINE void __pyx_f_7cpython_5array_zero(arrayobject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero", 0);

  /* "array.pxd":161
 * cdef inline void zero(array self):
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 */
  memset(__pyx_v_self->data.as_chars, 0, (Py_SIZE(((PyObject *)__pyx_v_self)) * __pyx_v_self->ob_descr->itemsize));

  /* "array.pxd":159
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }
    goto __pyx_L11;
  }
  /*else*/ {

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */
  __pyx_v_f = NULL;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":247
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":249
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":251
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;
    goto __pyx_L14;
  }
  /*else*/ {

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":254
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":256
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;
    if (__pyx_t_1) {

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":277
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
    switch (__pyx_v_t) {

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
      case NPY_BYTE:
      __pyx_v_f = __pyx_k_b;
      break;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = __pyx_k_B;
      break;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = __pyx_k_h;
      break;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = __pyx_k_H;
      break;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = __pyx_k_i;
      break;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = __pyx_k_I;
      break;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = __pyx_k_l;
      break;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = __pyx_k_L;
      break;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = __pyx_k_q;
      break;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = __pyx_k_Q;
      break;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = __pyx_k_f;
      break;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = __pyx_k_d;
      break;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = __pyx_k_g;
      break;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = __pyx_k_Zf;
      break;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = __pyx_k_Zd;
      break;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = __pyx_k_Zg;
      break;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":277
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = __pyx_k_O;
      break;
      default:

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      break;
    }

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":281
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
    __pyx_v_info->format = ((char *)malloc(255));

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_7;

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":292
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":295
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":772
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":784
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":786
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":793
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":797
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[3]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":804
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":805
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_6) {

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":806
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":816
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":817
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 120;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":819
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":824
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":825
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":826
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[3]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":829
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 104;
        goto __pyx_L15;
      }

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 105;
        goto __pyx_L15;
      }

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 108;
        goto __pyx_L15;
      }

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 113;
        goto __pyx_L15;
      }

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 102;
        goto __pyx_L15;
      }

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 100;
        goto __pyx_L15;
      }

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 103;
        goto __pyx_L15;
      }

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 102;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":843
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 100;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 103;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }
      /*else*/ {

        /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":847
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[3]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L15:;

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":848
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);
      goto __pyx_L13;
    }
    /*else*/ {

      /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":852
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":797
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":853
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":786
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":969
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":971
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
    Py_INCREF(__pyx_v_base);

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":975
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":969
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":979
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":980
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":981
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":983
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":979
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MawCluster/Probability.pxd":14
 * from libc.math cimport sqrt as c_sqrt, M_SQRT1_2, log as c_log
 * 
 * cdef inline double c_square(double input) nogil:             # <<<<<<<<<<<<<<
 *     return input * input
 * 
 */

static CYTHON_INLINE double __pyx_f_10MawCluster_11Probability_c_square(double __pyx_v_input) {
  double __pyx_r;

  /* "MawCluster/Probability.pxd":15
 * 
 * cdef inline double c_square(double input) nogil:
 *     return input * input             # <<<<<<<<<<<<<<
 * 
 * cdef inline double c_abs(double input) nogil:
 */
  __pyx_r = (__pyx_v_input * __pyx_v_input);
  goto __pyx_L0;

  /* "MawCluster/Probability.pxd":14
 * from libc.math cimport sqrt as c_sqrt, M_SQRT1_2, log as c_log
 * 
 * cdef inline double c_square(double input) nogil:             # <<<<<<<<<<<<<<
 *     return input * input
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "MawCluster/Probability.pxd":17
 *     return input * input
 * 
 * cdef inline double c_abs(double input) nogil:             # <<<<<<<<<<<<<<
 *     if(input < 0):
 *         return -1 * input
 */

static CYTHON_INLINE double __pyx_f_10MawCluster_11Probability_c_abs(double __pyx_v_input) {
  double __pyx_r;
  int __pyx_t_1;

  /* "MawCluster/Probability.pxd":18
 * 
 * cdef inline double c_abs(double input) nogil:
 *     if(input < 0):             # <<<<<<<<<<<<<<
 *         return -1 * input
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_input < 0.0) != 0);
  if (__pyx_t_1) {

    /* "MawCluster/Probability.pxd":19
 * cdef inline double c_abs(double input) nogil:
 *     if(input < 0):
 *         return -1 * input             # <<<<<<<<<<<<<<
 *     else:
 *         return input
 */
    __pyx_r = (-1.0 * __pyx_v_input);
    goto __pyx_L0;
  }
  /*else*/ {

    /* "MawCluster/Probability.pxd":21
 *         return -1 * input
 *     else:
 *         return input             # <<<<<<<<<<<<<<
 * 
 * cpdef float64_t HellingerDistance(ndarray[float64_t, ndim=1] array1,
 */
    __pyx_r = __pyx_v_input;
    goto __pyx_L0;
  }

  /* "MawCluster/Probability.pxd":17
 *     return input * input
 * 
 * cdef inline double c_abs(double input) nogil:             # <<<<<<<<<<<<<<
 *     if(input < 0):
 *         return -1 * input
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "utilBMF/Inliners.pxd":14
 * 
 * 
 * cdef inline cystr opLenToStr(char op, int opLen):             # <<<<<<<<<<<<<<
 *     if(op == 68):
 *         return "%sD" % opLen
 */

static CYTHON_INLINE __pyx_t_7utilBMF_8Inliners_cystr __pyx_f_7utilBMF_8Inliners_opLenToStr(char __pyx_v_op, int __pyx_v_opLen) {
  __pyx_t_7utilBMF_8Inliners_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("opLenToStr", 0);

  /* "utilBMF/Inliners.pxd":21
 *     elif(op == 73):
 *         return "%sI" % opLen
 *     elif(op == 83):             # <<<<<<<<<<<<<<
 *         return "%sS" % opLen
 *     else:
 */
  switch (__pyx_v_op) {

    /* "utilBMF/Inliners.pxd":15
 * 
 * cdef inline cystr opLenToStr(char op, int opLen):
 *     if(op == 68):             # <<<<<<<<<<<<<<
 *         return "%sD" % opLen
 *     elif(op == 77):
 */
    case 68:

    /* "utilBMF/Inliners.pxd":16
 * cdef inline cystr opLenToStr(char op, int opLen):
 *     if(op == 68):
 *         return "%sD" % opLen             # <<<<<<<<<<<<<<
 *     elif(op == 77):
 *         return "%sM" % opLen
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_opLen); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_sD, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":17
 *     if(op == 68):
 *         return "%sD" % opLen
 *     elif(op == 77):             # <<<<<<<<<<<<<<
 *         return "%sM" % opLen
 *     elif(op == 73):
 */
    case 77:

    /* "utilBMF/Inliners.pxd":18
 *         return "%sD" % opLen
 *     elif(op == 77):
 *         return "%sM" % opLen             # <<<<<<<<<<<<<<
 *     elif(op == 73):
 *         return "%sI" % opLen
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_opLen); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_sM, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_1))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":19
 *     elif(op == 77):
 *         return "%sM" % opLen
 *     elif(op == 73):             # <<<<<<<<<<<<<<
 *         return "%sI" % opLen
 *     elif(op == 83):
 */
    case 73:

    /* "utilBMF/Inliners.pxd":20
 *         return "%sM" % opLen
 *     elif(op == 73):
 *         return "%sI" % opLen             # <<<<<<<<<<<<<<
 *     elif(op == 83):
 *         return "%sS" % opLen
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_opLen); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_sI, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":21
 *     elif(op == 73):
 *         return "%sI" % opLen
 *     elif(op == 83):             # <<<<<<<<<<<<<<
 *         return "%sS" % opLen
 *     else:
 */
    case 83:

    /* "utilBMF/Inliners.pxd":22
 *         return "%sI" % opLen
 *     elif(op == 83):
 *         return "%sS" % opLen             # <<<<<<<<<<<<<<
 *     else:
 *         return ""
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_opLen); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_sS, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_1))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;
    break;
    default:

    /* "utilBMF/Inliners.pxd":24
 *         return "%sS" % opLen
 *     else:
 *         return ""             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__11);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__11);
    goto __pyx_L0;
    break;
  }

  /* "utilBMF/Inliners.pxd":14
 * 
 * 
 * cdef inline cystr opLenToStr(char op, int opLen):             # <<<<<<<<<<<<<<
 *     if(op == 68):
 *         return "%sD" % opLen
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("utilBMF.Inliners.opLenToStr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/Inliners.pxd":27
 * 
 * 
 * cdef inline cystr CigarStrInline(char character):             # <<<<<<<<<<<<<<
 *     if character == 77:
 *         return "M"
 */

static CYTHON_INLINE __pyx_t_7utilBMF_8Inliners_cystr __pyx_f_7utilBMF_8Inliners_CigarStrInline(char __pyx_v_character) {
  __pyx_t_7utilBMF_8Inliners_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CigarStrInline", 0);

  /* "utilBMF/Inliners.pxd":42
 *     elif character == 80:
 *         return "P"
 *     elif character == 61:             # <<<<<<<<<<<<<<
 *         return "="
 *     else:
 */
  switch (__pyx_v_character) {

    /* "utilBMF/Inliners.pxd":28
 * 
 * cdef inline cystr CigarStrInline(char character):
 *     if character == 77:             # <<<<<<<<<<<<<<
 *         return "M"
 *     elif character == 73:
 */
    case 77:

    /* "utilBMF/Inliners.pxd":29
 * cdef inline cystr CigarStrInline(char character):
 *     if character == 77:
 *         return "M"             # <<<<<<<<<<<<<<
 *     elif character == 73:
 *         return "I"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_M);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_M);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":30
 *     if character == 77:
 *         return "M"
 *     elif character == 73:             # <<<<<<<<<<<<<<
 *         return "I"
 *     elif character == 68:
 */
    case 73:

    /* "utilBMF/Inliners.pxd":31
 *         return "M"
 *     elif character == 73:
 *         return "I"             # <<<<<<<<<<<<<<
 *     elif character == 68:
 *         return "D"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_I);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_I);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":32
 *     elif character == 73:
 *         return "I"
 *     elif character == 68:             # <<<<<<<<<<<<<<
 *         return "D"
 *     elif character == 78:
 */
    case 68:

    /* "utilBMF/Inliners.pxd":33
 *         return "I"
 *     elif character == 68:
 *         return "D"             # <<<<<<<<<<<<<<
 *     elif character == 78:
 *         return "N"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_D);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_D);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":34
 *     elif character == 68:
 *         return "D"
 *     elif character == 78:             # <<<<<<<<<<<<<<
 *         return "N"
 *     elif character == 83:
 */
    case 78:

    /* "utilBMF/Inliners.pxd":35
 *         return "D"
 *     elif character == 78:
 *         return "N"             # <<<<<<<<<<<<<<
 *     elif character == 83:
 *         return "S"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_N);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_N);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":36
 *     elif character == 78:
 *         return "N"
 *     elif character == 83:             # <<<<<<<<<<<<<<
 *         return "S"
 *     elif character == 72:
 */
    case 83:

    /* "utilBMF/Inliners.pxd":37
 *         return "N"
 *     elif character == 83:
 *         return "S"             # <<<<<<<<<<<<<<
 *     elif character == 72:
 *         return "H"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_S);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_S);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":38
 *     elif character == 83:
 *         return "S"
 *     elif character == 72:             # <<<<<<<<<<<<<<
 *         return "H"
 *     elif character == 80:
 */
    case 72:

    /* "utilBMF/Inliners.pxd":39
 *         return "S"
 *     elif character == 72:
 *         return "H"             # <<<<<<<<<<<<<<
 *     elif character == 80:
 *         return "P"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_H);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_H);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":40
 *     elif character == 72:
 *         return "H"
 *     elif character == 80:             # <<<<<<<<<<<<<<
 *         return "P"
 *     elif character == 61:
 */
    case 80:

    /* "utilBMF/Inliners.pxd":41
 *         return "H"
 *     elif character == 80:
 *         return "P"             # <<<<<<<<<<<<<<
 *     elif character == 61:
 *         return "="
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_P);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_P);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":42
 *     elif character == 80:
 *         return "P"
 *     elif character == 61:             # <<<<<<<<<<<<<<
 *         return "="
 *     else:
 */
    case 61:

    /* "utilBMF/Inliners.pxd":43
 *         return "P"
 *     elif character == 61:
 *         return "="             # <<<<<<<<<<<<<<
 *     else:
 *         return "X"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__28);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__28);
    goto __pyx_L0;
    break;
    default:

    /* "utilBMF/Inliners.pxd":45
 *         return "="
 *     else:
 *         return "X"             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_X);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_X);
    goto __pyx_L0;
    break;
  }

  /* "utilBMF/Inliners.pxd":27
 * 
 * 
 * cdef inline cystr CigarStrInline(char character):             # <<<<<<<<<<<<<<
 *     if character == 77:
 *         return "M"
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/Inliners.pxd":48
 * 
 * 
 * cdef inline cystr RevCmpChar(cystr character):             # <<<<<<<<<<<<<<
 *     if(character == "A"):
 *         return "T"
 */

static CYTHON_INLINE __pyx_t_7utilBMF_8Inliners_cystr __pyx_f_7utilBMF_8Inliners_RevCmpChar(__pyx_t_7utilBMF_8Inliners_cystr __pyx_v_character) {
  __pyx_t_7utilBMF_8Inliners_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("RevCmpChar", 0);

  /* "utilBMF/Inliners.pxd":49
 * 
 * cdef inline cystr RevCmpChar(cystr character):
 *     if(character == "A"):             # <<<<<<<<<<<<<<
 *         return "T"
 *     elif(character == "C"):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_A, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":50
 * cdef inline cystr RevCmpChar(cystr character):
 *     if(character == "A"):
 *         return "T"             # <<<<<<<<<<<<<<
 *     elif(character == "C"):
 *         return "G"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_T);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_T);
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":51
 *     if(character == "A"):
 *         return "T"
 *     elif(character == "C"):             # <<<<<<<<<<<<<<
 *         return "G"
 *     elif(character == "G"):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_C, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":52
 *         return "T"
 *     elif(character == "C"):
 *         return "G"             # <<<<<<<<<<<<<<
 *     elif(character == "G"):
 *         return "C"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_G);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_G);
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":53
 *     elif(character == "C"):
 *         return "G"
 *     elif(character == "G"):             # <<<<<<<<<<<<<<
 *         return "C"
 *     elif(character == "T"):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_G, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":54
 *         return "G"
 *     elif(character == "G"):
 *         return "C"             # <<<<<<<<<<<<<<
 *     elif(character == "T"):
 *         return "A"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_C);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_C);
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":55
 *     elif(character == "G"):
 *         return "C"
 *     elif(character == "T"):             # <<<<<<<<<<<<<<
 *         return "A"
 *     else:
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_T, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":56
 *         return "C"
 *     elif(character == "T"):
 *         return "A"             # <<<<<<<<<<<<<<
 *     else:
 *         return "N"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_A);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_A);
    goto __pyx_L0;
  }
  /*else*/ {

    /* "utilBMF/Inliners.pxd":58
 *         return "A"
 *     else:
 *         return "N"             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_N);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_N);
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":48
 * 
 * 
 * cdef inline cystr RevCmpChar(cystr character):             # <<<<<<<<<<<<<<
 *     if(character == "A"):
 *         return "T"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("utilBMF.Inliners.RevCmpChar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/Inliners.pxd":61
 * 
 * 
 * cdef inline cystr RevCmpInt(char character):             # <<<<<<<<<<<<<<
 *     if(character == 65):
 *         return "T"
 */

static CYTHON_INLINE __pyx_t_7utilBMF_8Inliners_cystr __pyx_f_7utilBMF_8Inliners_RevCmpInt(char __pyx_v_character) {
  __pyx_t_7utilBMF_8Inliners_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("RevCmpInt", 0);

  /* "utilBMF/Inliners.pxd":68
 *     elif(character == 84):
 *         return "A"
 *     elif(character == 71):             # <<<<<<<<<<<<<<
 *         return "C"
 *     else:
 */
  switch (__pyx_v_character) {

    /* "utilBMF/Inliners.pxd":62
 * 
 * cdef inline cystr RevCmpInt(char character):
 *     if(character == 65):             # <<<<<<<<<<<<<<
 *         return "T"
 *     elif(character == 67):
 */
    case 65:

    /* "utilBMF/Inliners.pxd":63
 * cdef inline cystr RevCmpInt(char character):
 *     if(character == 65):
 *         return "T"             # <<<<<<<<<<<<<<
 *     elif(character == 67):
 *         return "G"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_T);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_T);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":64
 *     if(character == 65):
 *         return "T"
 *     elif(character == 67):             # <<<<<<<<<<<<<<
 *         return "G"
 *     elif(character == 84):
 */
    case 67:

    /* "utilBMF/Inliners.pxd":65
 *         return "T"
 *     elif(character == 67):
 *         return "G"             # <<<<<<<<<<<<<<
 *     elif(character == 84):
 *         return "A"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_G);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_G);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":66
 *     elif(character == 67):
 *         return "G"
 *     elif(character == 84):             # <<<<<<<<<<<<<<
 *         return "A"
 *     elif(character == 71):
 */
    case 84:

    /* "utilBMF/Inliners.pxd":67
 *         return "G"
 *     elif(character == 84):
 *         return "A"             # <<<<<<<<<<<<<<
 *     elif(character == 71):
 *         return "C"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_A);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_A);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":68
 *     elif(character == 84):
 *         return "A"
 *     elif(character == 71):             # <<<<<<<<<<<<<<
 *         return "C"
 *     else:
 */
    case 71:

    /* "utilBMF/Inliners.pxd":69
 *         return "A"
 *     elif(character == 71):
 *         return "C"             # <<<<<<<<<<<<<<
 *     else:
 *         return "N"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_C);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_C);
    goto __pyx_L0;
    break;
    default:

    /* "utilBMF/Inliners.pxd":71
 *         return "C"
 *     else:
 *         return "N"             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_N);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_N);
    goto __pyx_L0;
    break;
  }

  /* "utilBMF/Inliners.pxd":61
 * 
 * 
 * cdef inline cystr RevCmpInt(char character):             # <<<<<<<<<<<<<<
 *     if(character == 65):
 *         return "T"
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/Inliners.pxd":74
 * 
 * 
 * cdef inline char RevCmpToChar(char character) nogil:             # <<<<<<<<<<<<<<
 *     if(character == 65):
 *         return 84
 */

static CYTHON_INLINE char __pyx_f_7utilBMF_8Inliners_RevCmpToChar(char __pyx_v_character) {
  char __pyx_r;

  /* "utilBMF/Inliners.pxd":81
 *     elif(character == 84):
 *         return 65
 *     elif(character == 71):             # <<<<<<<<<<<<<<
 *         return 57
 *     else:
 */
  switch (__pyx_v_character) {

    /* "utilBMF/Inliners.pxd":75
 * 
 * cdef inline char RevCmpToChar(char character) nogil:
 *     if(character == 65):             # <<<<<<<<<<<<<<
 *         return 84
 *     elif(character == 67):
 */
    case 65:

    /* "utilBMF/Inliners.pxd":76
 * cdef inline char RevCmpToChar(char character) nogil:
 *     if(character == 65):
 *         return 84             # <<<<<<<<<<<<<<
 *     elif(character == 67):
 *         return 71
 */
    __pyx_r = 84;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":77
 *     if(character == 65):
 *         return 84
 *     elif(character == 67):             # <<<<<<<<<<<<<<
 *         return 71
 *     elif(character == 84):
 */
    case 67:

    /* "utilBMF/Inliners.pxd":78
 *         return 84
 *     elif(character == 67):
 *         return 71             # <<<<<<<<<<<<<<
 *     elif(character == 84):
 *         return 65
 */
    __pyx_r = 71;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":79
 *     elif(character == 67):
 *         return 71
 *     elif(character == 84):             # <<<<<<<<<<<<<<
 *         return 65
 *     elif(character == 71):
 */
    case 84:

    /* "utilBMF/Inliners.pxd":80
 *         return 71
 *     elif(character == 84):
 *         return 65             # <<<<<<<<<<<<<<
 *     elif(character == 71):
 *         return 57
 */
    __pyx_r = 65;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":81
 *     elif(character == 84):
 *         return 65
 *     elif(character == 71):             # <<<<<<<<<<<<<<
 *         return 57
 *     else:
 */
    case 71:

    /* "utilBMF/Inliners.pxd":82
 *         return 65
 *     elif(character == 71):
 *         return 57             # <<<<<<<<<<<<<<
 *     else:
 *         return 78
 */
    __pyx_r = 57;
    goto __pyx_L0;
    break;
    default:

    /* "utilBMF/Inliners.pxd":84
 *         return 57
 *     else:
 *         return 78             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 78;
    goto __pyx_L0;
    break;
  }

  /* "utilBMF/Inliners.pxd":74
 * 
 * 
 * cdef inline char RevCmpToChar(char character) nogil:             # <<<<<<<<<<<<<<
 *     if(character == 65):
 *         return 84
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "utilBMF/Inliners.pxd":87
 * 
 * 
 * cdef inline cystr Num2Nuc(int number):             # <<<<<<<<<<<<<<
 *     if(number == 0):
 *         return "A"
 */

static CYTHON_INLINE __pyx_t_7utilBMF_8Inliners_cystr __pyx_f_7utilBMF_8Inliners_Num2Nuc(int __pyx_v_number) {
  __pyx_t_7utilBMF_8Inliners_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Num2Nuc", 0);

  /* "utilBMF/Inliners.pxd":94
 *     elif(number == 2):
 *         return "G"
 *     elif(number == 3):             # <<<<<<<<<<<<<<
 *         return "T"
 *     else:
 */
  switch (__pyx_v_number) {

    /* "utilBMF/Inliners.pxd":88
 * 
 * cdef inline cystr Num2Nuc(int number):
 *     if(number == 0):             # <<<<<<<<<<<<<<
 *         return "A"
 *     elif(number == 1):
 */
    case 0:

    /* "utilBMF/Inliners.pxd":89
 * cdef inline cystr Num2Nuc(int number):
 *     if(number == 0):
 *         return "A"             # <<<<<<<<<<<<<<
 *     elif(number == 1):
 *         return "C"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_A);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_A);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":90
 *     if(number == 0):
 *         return "A"
 *     elif(number == 1):             # <<<<<<<<<<<<<<
 *         return "C"
 *     elif(number == 2):
 */
    case 1:

    /* "utilBMF/Inliners.pxd":91
 *         return "A"
 *     elif(number == 1):
 *         return "C"             # <<<<<<<<<<<<<<
 *     elif(number == 2):
 *         return "G"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_C);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_C);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":92
 *     elif(number == 1):
 *         return "C"
 *     elif(number == 2):             # <<<<<<<<<<<<<<
 *         return "G"
 *     elif(number == 3):
 */
    case 2:

    /* "utilBMF/Inliners.pxd":93
 *         return "C"
 *     elif(number == 2):
 *         return "G"             # <<<<<<<<<<<<<<
 *     elif(number == 3):
 *         return "T"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_G);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_G);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":94
 *     elif(number == 2):
 *         return "G"
 *     elif(number == 3):             # <<<<<<<<<<<<<<
 *         return "T"
 *     else:
 */
    case 3:

    /* "utilBMF/Inliners.pxd":95
 *         return "G"
 *     elif(number == 3):
 *         return "T"             # <<<<<<<<<<<<<<
 *     else:
 *         return "N"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_T);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_T);
    goto __pyx_L0;
    break;
    default:

    /* "utilBMF/Inliners.pxd":97
 *         return "T"
 *     else:
 *         return "N"             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_N);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_N);
    goto __pyx_L0;
    break;
  }

  /* "utilBMF/Inliners.pxd":87
 * 
 * 
 * cdef inline cystr Num2Nuc(int number):             # <<<<<<<<<<<<<<
 *     if(number == 0):
 *         return "A"
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/Inliners.pxd":100
 * 
 * 
 * cdef inline char Nuc2Num(char character) nogil:             # <<<<<<<<<<<<<<
 *     if(character == 84):
 *         return 3
 */

static CYTHON_INLINE char __pyx_f_7utilBMF_8Inliners_Nuc2Num(char __pyx_v_character) {
  char __pyx_r;

  /* "utilBMF/Inliners.pxd":105
 *     elif(character == 71):
 *         return 2
 *     elif(character == 67):             # <<<<<<<<<<<<<<
 *         return 1
 *     else:
 */
  switch (__pyx_v_character) {

    /* "utilBMF/Inliners.pxd":101
 * 
 * cdef inline char Nuc2Num(char character) nogil:
 *     if(character == 84):             # <<<<<<<<<<<<<<
 *         return 3
 *     elif(character == 71):
 */
    case 84:

    /* "utilBMF/Inliners.pxd":102
 * cdef inline char Nuc2Num(char character) nogil:
 *     if(character == 84):
 *         return 3             # <<<<<<<<<<<<<<
 *     elif(character == 71):
 *         return 2
 */
    __pyx_r = 3;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":103
 *     if(character == 84):
 *         return 3
 *     elif(character == 71):             # <<<<<<<<<<<<<<
 *         return 2
 *     elif(character == 67):
 */
    case 71:

    /* "utilBMF/Inliners.pxd":104
 *         return 3
 *     elif(character == 71):
 *         return 2             # <<<<<<<<<<<<<<
 *     elif(character == 67):
 *         return 1
 */
    __pyx_r = 2;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":105
 *     elif(character == 71):
 *         return 2
 *     elif(character == 67):             # <<<<<<<<<<<<<<
 *         return 1
 *     else:
 */
    case 67:

    /* "utilBMF/Inliners.pxd":106
 *         return 2
 *     elif(character == 67):
 *         return 1             # <<<<<<<<<<<<<<
 *     else:
 *         return 0
 */
    __pyx_r = 1;
    goto __pyx_L0;
    break;
    default:

    /* "utilBMF/Inliners.pxd":108
 *         return 1
 *     else:
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;
    break;
  }

  /* "utilBMF/Inliners.pxd":100
 * 
 * 
 * cdef inline char Nuc2Num(char character) nogil:             # <<<<<<<<<<<<<<
 *     if(character == 84):
 *         return 3
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "utilBMF/Inliners.pxd":111
 * 
 * 
 * cdef inline cystr ph2chrInline(np_int32_t phInput):             # <<<<<<<<<<<<<<
 *     if(phInput == 0):
 *         return '!'
 */

static CYTHON_INLINE __pyx_t_7utilBMF_8Inliners_cystr __pyx_f_7utilBMF_8Inliners_ph2chrInline(__pyx_t_7utilBMF_8Inliners_np_int32_t __pyx_v_phInput) {
  __pyx_t_7utilBMF_8Inliners_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ph2chrInline", 0);

  /* "utilBMF/Inliners.pxd":296
 *     elif(phInput == 91):
 *         return '|'
 *     elif(phInput == 92):             # <<<<<<<<<<<<<<
 *         return '}'
 *     else:
 */
  switch (__pyx_v_phInput) {

    /* "utilBMF/Inliners.pxd":112
 * 
 * cdef inline cystr ph2chrInline(np_int32_t phInput):
 *     if(phInput == 0):             # <<<<<<<<<<<<<<
 *         return '!'
 *     elif(phInput == 1):
 */
    case 0:

    /* "utilBMF/Inliners.pxd":113
 * cdef inline cystr ph2chrInline(np_int32_t phInput):
 *     if(phInput == 0):
 *         return '!'             # <<<<<<<<<<<<<<
 *     elif(phInput == 1):
 *         return '"'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__29);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__29);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":114
 *     if(phInput == 0):
 *         return '!'
 *     elif(phInput == 1):             # <<<<<<<<<<<<<<
 *         return '"'
 *     elif(phInput == 2):
 */
    case 1:

    /* "utilBMF/Inliners.pxd":115
 *         return '!'
 *     elif(phInput == 1):
 *         return '"'             # <<<<<<<<<<<<<<
 *     elif(phInput == 2):
 *         return '#'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__30);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__30);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":116
 *     elif(phInput == 1):
 *         return '"'
 *     elif(phInput == 2):             # <<<<<<<<<<<<<<
 *         return '#'
 *     elif(phInput == 3):
 */
    case 2:

    /* "utilBMF/Inliners.pxd":117
 *         return '"'
 *     elif(phInput == 2):
 *         return '#'             # <<<<<<<<<<<<<<
 *     elif(phInput == 3):
 *         return '$'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__12);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__12);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":118
 *     elif(phInput == 2):
 *         return '#'
 *     elif(phInput == 3):             # <<<<<<<<<<<<<<
 *         return '$'
 *     elif(phInput == 4):
 */
    case 3:

    /* "utilBMF/Inliners.pxd":119
 *         return '#'
 *     elif(phInput == 3):
 *         return '$'             # <<<<<<<<<<<<<<
 *     elif(phInput == 4):
 *         return '%'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__31);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__31);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":120
 *     elif(phInput == 3):
 *         return '$'
 *     elif(phInput == 4):             # <<<<<<<<<<<<<<
 *         return '%'
 *     elif(phInput == 5):
 */
    case 4:

    /* "utilBMF/Inliners.pxd":121
 *         return '$'
 *     elif(phInput == 4):
 *         return '%'             # <<<<<<<<<<<<<<
 *     elif(phInput == 5):
 *         return '&'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__32);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__32);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":122
 *     elif(phInput == 4):
 *         return '%'
 *     elif(phInput == 5):             # <<<<<<<<<<<<<<
 *         return '&'
 *     elif(phInput == 6):
 */
    case 5:

    /* "utilBMF/Inliners.pxd":123
 *         return '%'
 *     elif(phInput == 5):
 *         return '&'             # <<<<<<<<<<<<<<
 *     elif(phInput == 6):
 *         return '\''
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__33);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__33);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":124
 *     elif(phInput == 5):
 *         return '&'
 *     elif(phInput == 6):             # <<<<<<<<<<<<<<
 *         return '\''
 *     elif(phInput == 7):
 */
    case 6:

    /* "utilBMF/Inliners.pxd":125
 *         return '&'
 *     elif(phInput == 6):
 *         return '\''             # <<<<<<<<<<<<<<
 *     elif(phInput == 7):
 *         return '('
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__34);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__34);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":126
 *     elif(phInput == 6):
 *         return '\''
 *     elif(phInput == 7):             # <<<<<<<<<<<<<<
 *         return '('
 *     elif(phInput == 8):
 */
    case 7:

    /* "utilBMF/Inliners.pxd":127
 *         return '\''
 *     elif(phInput == 7):
 *         return '('             # <<<<<<<<<<<<<<
 *     elif(phInput == 8):
 *         return ')'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__35);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__35);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":128
 *     elif(phInput == 7):
 *         return '('
 *     elif(phInput == 8):             # <<<<<<<<<<<<<<
 *         return ')'
 *     elif(phInput == 9):
 */
    case 8:

    /* "utilBMF/Inliners.pxd":129
 *         return '('
 *     elif(phInput == 8):
 *         return ')'             # <<<<<<<<<<<<<<
 *     elif(phInput == 9):
 *         return '*'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__36);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__36);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":130
 *     elif(phInput == 8):
 *         return ')'
 *     elif(phInput == 9):             # <<<<<<<<<<<<<<
 *         return '*'
 *     elif(phInput == 10):
 */
    case 9:

    /* "utilBMF/Inliners.pxd":131
 *         return ')'
 *     elif(phInput == 9):
 *         return '*'             # <<<<<<<<<<<<<<
 *     elif(phInput == 10):
 *         return '+'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__37);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__37);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":132
 *     elif(phInput == 9):
 *         return '*'
 *     elif(phInput == 10):             # <<<<<<<<<<<<<<
 *         return '+'
 *     elif(phInput == 11):
 */
    case 10:

    /* "utilBMF/Inliners.pxd":133
 *         return '*'
 *     elif(phInput == 10):
 *         return '+'             # <<<<<<<<<<<<<<
 *     elif(phInput == 11):
 *         return ','
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__38);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__38);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":134
 *     elif(phInput == 10):
 *         return '+'
 *     elif(phInput == 11):             # <<<<<<<<<<<<<<
 *         return ','
 *     elif(phInput == 12):
 */
    case 11:

    /* "utilBMF/Inliners.pxd":135
 *         return '+'
 *     elif(phInput == 11):
 *         return ','             # <<<<<<<<<<<<<<
 *     elif(phInput == 12):
 *         return '-'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__2);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":136
 *     elif(phInput == 11):
 *         return ','
 *     elif(phInput == 12):             # <<<<<<<<<<<<<<
 *         return '-'
 *     elif(phInput == 13):
 */
    case 12:

    /* "utilBMF/Inliners.pxd":137
 *         return ','
 *     elif(phInput == 12):
 *         return '-'             # <<<<<<<<<<<<<<
 *     elif(phInput == 13):
 *         return '.'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__17);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__17);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":138
 *     elif(phInput == 12):
 *         return '-'
 *     elif(phInput == 13):             # <<<<<<<<<<<<<<
 *         return '.'
 *     elif(phInput == 14):
 */
    case 13:

    /* "utilBMF/Inliners.pxd":139
 *         return '-'
 *     elif(phInput == 13):
 *         return '.'             # <<<<<<<<<<<<<<
 *     elif(phInput == 14):
 *         return '/'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__39);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__39);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":140
 *     elif(phInput == 13):
 *         return '.'
 *     elif(phInput == 14):             # <<<<<<<<<<<<<<
 *         return '/'
 *     elif(phInput == 15):
 */
    case 14:

    /* "utilBMF/Inliners.pxd":141
 *         return '.'
 *     elif(phInput == 14):
 *         return '/'             # <<<<<<<<<<<<<<
 *     elif(phInput == 15):
 *         return '0'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__40);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__40);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":142
 *     elif(phInput == 14):
 *         return '/'
 *     elif(phInput == 15):             # <<<<<<<<<<<<<<
 *         return '0'
 *     elif(phInput == 16):
 */
    case 15:

    /* "utilBMF/Inliners.pxd":143
 *         return '/'
 *     elif(phInput == 15):
 *         return '0'             # <<<<<<<<<<<<<<
 *     elif(phInput == 16):
 *         return '1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_0);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_0);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":144
 *     elif(phInput == 15):
 *         return '0'
 *     elif(phInput == 16):             # <<<<<<<<<<<<<<
 *         return '1'
 *     elif(phInput == 17):
 */
    case 16:

    /* "utilBMF/Inliners.pxd":145
 *         return '0'
 *     elif(phInput == 16):
 *         return '1'             # <<<<<<<<<<<<<<
 *     elif(phInput == 17):
 *         return '2'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_1);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":146
 *     elif(phInput == 16):
 *         return '1'
 *     elif(phInput == 17):             # <<<<<<<<<<<<<<
 *         return '2'
 *     elif(phInput == 18):
 */
    case 17:

    /* "utilBMF/Inliners.pxd":147
 *         return '1'
 *     elif(phInput == 17):
 *         return '2'             # <<<<<<<<<<<<<<
 *     elif(phInput == 18):
 *         return '3'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_2);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_2);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":148
 *     elif(phInput == 17):
 *         return '2'
 *     elif(phInput == 18):             # <<<<<<<<<<<<<<
 *         return '3'
 *     elif(phInput == 19):
 */
    case 18:

    /* "utilBMF/Inliners.pxd":149
 *         return '2'
 *     elif(phInput == 18):
 *         return '3'             # <<<<<<<<<<<<<<
 *     elif(phInput == 19):
 *         return '4'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_3);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_3);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":150
 *     elif(phInput == 18):
 *         return '3'
 *     elif(phInput == 19):             # <<<<<<<<<<<<<<
 *         return '4'
 *     elif(phInput == 20):
 */
    case 19:

    /* "utilBMF/Inliners.pxd":151
 *         return '3'
 *     elif(phInput == 19):
 *         return '4'             # <<<<<<<<<<<<<<
 *     elif(phInput == 20):
 *         return '5'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_4);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_4);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":152
 *     elif(phInput == 19):
 *         return '4'
 *     elif(phInput == 20):             # <<<<<<<<<<<<<<
 *         return '5'
 *     elif(phInput == 21):
 */
    case 20:

    /* "utilBMF/Inliners.pxd":153
 *         return '4'
 *     elif(phInput == 20):
 *         return '5'             # <<<<<<<<<<<<<<
 *     elif(phInput == 21):
 *         return '6'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_5);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_5);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":154
 *     elif(phInput == 20):
 *         return '5'
 *     elif(phInput == 21):             # <<<<<<<<<<<<<<
 *         return '6'
 *     elif(phInput == 22):
 */
    case 21:

    /* "utilBMF/Inliners.pxd":155
 *         return '5'
 *     elif(phInput == 21):
 *         return '6'             # <<<<<<<<<<<<<<
 *     elif(phInput == 22):
 *         return '7'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_6);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_6);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":156
 *     elif(phInput == 21):
 *         return '6'
 *     elif(phInput == 22):             # <<<<<<<<<<<<<<
 *         return '7'
 *     elif(phInput == 23):
 */
    case 22:

    /* "utilBMF/Inliners.pxd":157
 *         return '6'
 *     elif(phInput == 22):
 *         return '7'             # <<<<<<<<<<<<<<
 *     elif(phInput == 23):
 *         return '8'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_7);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_7);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":158
 *     elif(phInput == 22):
 *         return '7'
 *     elif(phInput == 23):             # <<<<<<<<<<<<<<
 *         return '8'
 *     elif(phInput == 24):
 */
    case 23:

    /* "utilBMF/Inliners.pxd":159
 *         return '7'
 *     elif(phInput == 23):
 *         return '8'             # <<<<<<<<<<<<<<
 *     elif(phInput == 24):
 *         return '9'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_8);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_8);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":160
 *     elif(phInput == 23):
 *         return '8'
 *     elif(phInput == 24):             # <<<<<<<<<<<<<<
 *         return '9'
 *     elif(phInput == 25):
 */
    case 24:

    /* "utilBMF/Inliners.pxd":161
 *         return '8'
 *     elif(phInput == 24):
 *         return '9'             # <<<<<<<<<<<<<<
 *     elif(phInput == 25):
 *         return ':'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_9);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_9);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":162
 *     elif(phInput == 24):
 *         return '9'
 *     elif(phInput == 25):             # <<<<<<<<<<<<<<
 *         return ':'
 *     elif(phInput == 26):
 */
    case 25:

    /* "utilBMF/Inliners.pxd":163
 *         return '9'
 *     elif(phInput == 25):
 *         return ':'             # <<<<<<<<<<<<<<
 *     elif(phInput == 26):
 *         return ';'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__41);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__41);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":164
 *     elif(phInput == 25):
 *         return ':'
 *     elif(phInput == 26):             # <<<<<<<<<<<<<<
 *         return ';'
 *     elif(phInput == 27):
 */
    case 26:

    /* "utilBMF/Inliners.pxd":165
 *         return ':'
 *     elif(phInput == 26):
 *         return ';'             # <<<<<<<<<<<<<<
 *     elif(phInput == 27):
 *         return '<'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__42);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__42);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":166
 *     elif(phInput == 26):
 *         return ';'
 *     elif(phInput == 27):             # <<<<<<<<<<<<<<
 *         return '<'
 *     elif(phInput == 28):
 */
    case 27:

    /* "utilBMF/Inliners.pxd":167
 *         return ';'
 *     elif(phInput == 27):
 *         return '<'             # <<<<<<<<<<<<<<
 *     elif(phInput == 28):
 *         return '='
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__43);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__43);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":168
 *     elif(phInput == 27):
 *         return '<'
 *     elif(phInput == 28):             # <<<<<<<<<<<<<<
 *         return '='
 *     elif(phInput == 29):
 */
    case 28:

    /* "utilBMF/Inliners.pxd":169
 *         return '<'
 *     elif(phInput == 28):
 *         return '='             # <<<<<<<<<<<<<<
 *     elif(phInput == 29):
 *         return '>'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__28);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__28);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":170
 *     elif(phInput == 28):
 *         return '='
 *     elif(phInput == 29):             # <<<<<<<<<<<<<<
 *         return '>'
 *     elif(phInput == 30):
 */
    case 29:

    /* "utilBMF/Inliners.pxd":171
 *         return '='
 *     elif(phInput == 29):
 *         return '>'             # <<<<<<<<<<<<<<
 *     elif(phInput == 30):
 *         return '?'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__44);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__44);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":172
 *     elif(phInput == 29):
 *         return '>'
 *     elif(phInput == 30):             # <<<<<<<<<<<<<<
 *         return '?'
 *     elif(phInput == 31):
 */
    case 30:

    /* "utilBMF/Inliners.pxd":173
 *         return '>'
 *     elif(phInput == 30):
 *         return '?'             # <<<<<<<<<<<<<<
 *     elif(phInput == 31):
 *         return '@'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__45);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__45);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":174
 *     elif(phInput == 30):
 *         return '?'
 *     elif(phInput == 31):             # <<<<<<<<<<<<<<
 *         return '@'
 *     elif(phInput == 32):
 */
    case 31:

    /* "utilBMF/Inliners.pxd":175
 *         return '?'
 *     elif(phInput == 31):
 *         return '@'             # <<<<<<<<<<<<<<
 *     elif(phInput == 32):
 *         return 'A'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__46);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__46);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":176
 *     elif(phInput == 31):
 *         return '@'
 *     elif(phInput == 32):             # <<<<<<<<<<<<<<
 *         return 'A'
 *     elif(phInput == 33):
 */
    case 32:

    /* "utilBMF/Inliners.pxd":177
 *         return '@'
 *     elif(phInput == 32):
 *         return 'A'             # <<<<<<<<<<<<<<
 *     elif(phInput == 33):
 *         return 'B'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_A);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_A);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":178
 *     elif(phInput == 32):
 *         return 'A'
 *     elif(phInput == 33):             # <<<<<<<<<<<<<<
 *         return 'B'
 *     elif(phInput == 34):
 */
    case 33:

    /* "utilBMF/Inliners.pxd":179
 *         return 'A'
 *     elif(phInput == 33):
 *         return 'B'             # <<<<<<<<<<<<<<
 *     elif(phInput == 34):
 *         return 'C'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_B);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_B);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":180
 *     elif(phInput == 33):
 *         return 'B'
 *     elif(phInput == 34):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     elif(phInput == 35):
 */
    case 34:

    /* "utilBMF/Inliners.pxd":181
 *         return 'B'
 *     elif(phInput == 34):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     elif(phInput == 35):
 *         return 'D'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_C);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_C);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":182
 *     elif(phInput == 34):
 *         return 'C'
 *     elif(phInput == 35):             # <<<<<<<<<<<<<<
 *         return 'D'
 *     elif(phInput == 36):
 */
    case 35:

    /* "utilBMF/Inliners.pxd":183
 *         return 'C'
 *     elif(phInput == 35):
 *         return 'D'             # <<<<<<<<<<<<<<
 *     elif(phInput == 36):
 *         return 'E'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_D);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_D);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":184
 *     elif(phInput == 35):
 *         return 'D'
 *     elif(phInput == 36):             # <<<<<<<<<<<<<<
 *         return 'E'
 *     elif(phInput == 37):
 */
    case 36:

    /* "utilBMF/Inliners.pxd":185
 *         return 'D'
 *     elif(phInput == 36):
 *         return 'E'             # <<<<<<<<<<<<<<
 *     elif(phInput == 37):
 *         return 'F'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_E);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_E);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":186
 *     elif(phInput == 36):
 *         return 'E'
 *     elif(phInput == 37):             # <<<<<<<<<<<<<<
 *         return 'F'
 *     elif(phInput == 38):
 */
    case 37:

    /* "utilBMF/Inliners.pxd":187
 *         return 'E'
 *     elif(phInput == 37):
 *         return 'F'             # <<<<<<<<<<<<<<
 *     elif(phInput == 38):
 *         return 'G'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_F);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_F);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":188
 *     elif(phInput == 37):
 *         return 'F'
 *     elif(phInput == 38):             # <<<<<<<<<<<<<<
 *         return 'G'
 *     elif(phInput == 39):
 */
    case 38:

    /* "utilBMF/Inliners.pxd":189
 *         return 'F'
 *     elif(phInput == 38):
 *         return 'G'             # <<<<<<<<<<<<<<
 *     elif(phInput == 39):
 *         return 'H'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_G);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_G);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":190
 *     elif(phInput == 38):
 *         return 'G'
 *     elif(phInput == 39):             # <<<<<<<<<<<<<<
 *         return 'H'
 *     elif(phInput == 40):
 */
    case 39:

    /* "utilBMF/Inliners.pxd":191
 *         return 'G'
 *     elif(phInput == 39):
 *         return 'H'             # <<<<<<<<<<<<<<
 *     elif(phInput == 40):
 *         return 'I'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_H);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_H);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":192
 *     elif(phInput == 39):
 *         return 'H'
 *     elif(phInput == 40):             # <<<<<<<<<<<<<<
 *         return 'I'
 *     elif(phInput == 41):
 */
    case 40:

    /* "utilBMF/Inliners.pxd":193
 *         return 'H'
 *     elif(phInput == 40):
 *         return 'I'             # <<<<<<<<<<<<<<
 *     elif(phInput == 41):
 *         return 'J'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_I);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_I);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":194
 *     elif(phInput == 40):
 *         return 'I'
 *     elif(phInput == 41):             # <<<<<<<<<<<<<<
 *         return 'J'
 *     elif(phInput == 42):
 */
    case 41:

    /* "utilBMF/Inliners.pxd":195
 *         return 'I'
 *     elif(phInput == 41):
 *         return 'J'             # <<<<<<<<<<<<<<
 *     elif(phInput == 42):
 *         return 'K'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_J);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_J);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":196
 *     elif(phInput == 41):
 *         return 'J'
 *     elif(phInput == 42):             # <<<<<<<<<<<<<<
 *         return 'K'
 *     elif(phInput == 43):
 */
    case 42:

    /* "utilBMF/Inliners.pxd":197
 *         return 'J'
 *     elif(phInput == 42):
 *         return 'K'             # <<<<<<<<<<<<<<
 *     elif(phInput == 43):
 *         return 'L'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_K);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_K);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":198
 *     elif(phInput == 42):
 *         return 'K'
 *     elif(phInput == 43):             # <<<<<<<<<<<<<<
 *         return 'L'
 *     elif(phInput == 44):
 */
    case 43:

    /* "utilBMF/Inliners.pxd":199
 *         return 'K'
 *     elif(phInput == 43):
 *         return 'L'             # <<<<<<<<<<<<<<
 *     elif(phInput == 44):
 *         return 'M'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_L);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_L);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":200
 *     elif(phInput == 43):
 *         return 'L'
 *     elif(phInput == 44):             # <<<<<<<<<<<<<<
 *         return 'M'
 *     elif(phInput == 45):
 */
    case 44:

    /* "utilBMF/Inliners.pxd":201
 *         return 'L'
 *     elif(phInput == 44):
 *         return 'M'             # <<<<<<<<<<<<<<
 *     elif(phInput == 45):
 *         return 'N'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_M);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_M);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":202
 *     elif(phInput == 44):
 *         return 'M'
 *     elif(phInput == 45):             # <<<<<<<<<<<<<<
 *         return 'N'
 *     elif(phInput == 46):
 */
    case 45:

    /* "utilBMF/Inliners.pxd":203
 *         return 'M'
 *     elif(phInput == 45):
 *         return 'N'             # <<<<<<<<<<<<<<
 *     elif(phInput == 46):
 *         return 'O'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_N);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_N);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":204
 *     elif(phInput == 45):
 *         return 'N'
 *     elif(phInput == 46):             # <<<<<<<<<<<<<<
 *         return 'O'
 *     elif(phInput == 47):
 */
    case 46:

    /* "utilBMF/Inliners.pxd":205
 *         return 'N'
 *     elif(phInput == 46):
 *         return 'O'             # <<<<<<<<<<<<<<
 *     elif(phInput == 47):
 *         return 'P'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_O);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_O);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":206
 *     elif(phInput == 46):
 *         return 'O'
 *     elif(phInput == 47):             # <<<<<<<<<<<<<<
 *         return 'P'
 *     elif(phInput == 48):
 */
    case 47:

    /* "utilBMF/Inliners.pxd":207
 *         return 'O'
 *     elif(phInput == 47):
 *         return 'P'             # <<<<<<<<<<<<<<
 *     elif(phInput == 48):
 *         return 'Q'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_P);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_P);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":208
 *     elif(phInput == 47):
 *         return 'P'
 *     elif(phInput == 48):             # <<<<<<<<<<<<<<
 *         return 'Q'
 *     elif(phInput == 49):
 */
    case 48:

    /* "utilBMF/Inliners.pxd":209
 *         return 'P'
 *     elif(phInput == 48):
 *         return 'Q'             # <<<<<<<<<<<<<<
 *     elif(phInput == 49):
 *         return 'R'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_Q);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_Q);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":210
 *     elif(phInput == 48):
 *         return 'Q'
 *     elif(phInput == 49):             # <<<<<<<<<<<<<<
 *         return 'R'
 *     elif(phInput == 50):
 */
    case 49:

    /* "utilBMF/Inliners.pxd":211
 *         return 'Q'
 *     elif(phInput == 49):
 *         return 'R'             # <<<<<<<<<<<<<<
 *     elif(phInput == 50):
 *         return 'S'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_R);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_R);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":212
 *     elif(phInput == 49):
 *         return 'R'
 *     elif(phInput == 50):             # <<<<<<<<<<<<<<
 *         return 'S'
 *     elif(phInput == 51):
 */
    case 50:

    /* "utilBMF/Inliners.pxd":213
 *         return 'R'
 *     elif(phInput == 50):
 *         return 'S'             # <<<<<<<<<<<<<<
 *     elif(phInput == 51):
 *         return 'T'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_S);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_S);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":214
 *     elif(phInput == 50):
 *         return 'S'
 *     elif(phInput == 51):             # <<<<<<<<<<<<<<
 *         return 'T'
 *     elif(phInput == 52):
 */
    case 51:

    /* "utilBMF/Inliners.pxd":215
 *         return 'S'
 *     elif(phInput == 51):
 *         return 'T'             # <<<<<<<<<<<<<<
 *     elif(phInput == 52):
 *         return 'U'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_T);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_T);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":216
 *     elif(phInput == 51):
 *         return 'T'
 *     elif(phInput == 52):             # <<<<<<<<<<<<<<
 *         return 'U'
 *     elif(phInput == 53):
 */
    case 52:

    /* "utilBMF/Inliners.pxd":217
 *         return 'T'
 *     elif(phInput == 52):
 *         return 'U'             # <<<<<<<<<<<<<<
 *     elif(phInput == 53):
 *         return 'V'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_U);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_U);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":218
 *     elif(phInput == 52):
 *         return 'U'
 *     elif(phInput == 53):             # <<<<<<<<<<<<<<
 *         return 'V'
 *     elif(phInput == 54):
 */
    case 53:

    /* "utilBMF/Inliners.pxd":219
 *         return 'U'
 *     elif(phInput == 53):
 *         return 'V'             # <<<<<<<<<<<<<<
 *     elif(phInput == 54):
 *         return 'W'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_V);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_V);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":220
 *     elif(phInput == 53):
 *         return 'V'
 *     elif(phInput == 54):             # <<<<<<<<<<<<<<
 *         return 'W'
 *     elif(phInput == 55):
 */
    case 54:

    /* "utilBMF/Inliners.pxd":221
 *         return 'V'
 *     elif(phInput == 54):
 *         return 'W'             # <<<<<<<<<<<<<<
 *     elif(phInput == 55):
 *         return 'X'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_W);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_W);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":222
 *     elif(phInput == 54):
 *         return 'W'
 *     elif(phInput == 55):             # <<<<<<<<<<<<<<
 *         return 'X'
 *     elif(phInput == 56):
 */
    case 55:

    /* "utilBMF/Inliners.pxd":223
 *         return 'W'
 *     elif(phInput == 55):
 *         return 'X'             # <<<<<<<<<<<<<<
 *     elif(phInput == 56):
 *         return 'Y'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_X);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_X);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":224
 *     elif(phInput == 55):
 *         return 'X'
 *     elif(phInput == 56):             # <<<<<<<<<<<<<<
 *         return 'Y'
 *     elif(phInput == 57):
 */
    case 56:

    /* "utilBMF/Inliners.pxd":225
 *         return 'X'
 *     elif(phInput == 56):
 *         return 'Y'             # <<<<<<<<<<<<<<
 *     elif(phInput == 57):
 *         return 'Z'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_Y);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_Y);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":226
 *     elif(phInput == 56):
 *         return 'Y'
 *     elif(phInput == 57):             # <<<<<<<<<<<<<<
 *         return 'Z'
 *     elif(phInput == 58):
 */
    case 57:

    /* "utilBMF/Inliners.pxd":227
 *         return 'Y'
 *     elif(phInput == 57):
 *         return 'Z'             # <<<<<<<<<<<<<<
 *     elif(phInput == 58):
 *         return '['
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_Z);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_Z);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":228
 *     elif(phInput == 57):
 *         return 'Z'
 *     elif(phInput == 58):             # <<<<<<<<<<<<<<
 *         return '['
 *     elif(phInput == 59):
 */
    case 58:

    /* "utilBMF/Inliners.pxd":229
 *         return 'Z'
 *     elif(phInput == 58):
 *         return '['             # <<<<<<<<<<<<<<
 *     elif(phInput == 59):
 *         return '\\'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__47);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__47);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":230
 *     elif(phInput == 58):
 *         return '['
 *     elif(phInput == 59):             # <<<<<<<<<<<<<<
 *         return '\\'
 *     elif(phInput == 60):
 */
    case 59:

    /* "utilBMF/Inliners.pxd":231
 *         return '['
 *     elif(phInput == 59):
 *         return '\\'             # <<<<<<<<<<<<<<
 *     elif(phInput == 60):
 *         return ']'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__48);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__48);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":232
 *     elif(phInput == 59):
 *         return '\\'
 *     elif(phInput == 60):             # <<<<<<<<<<<<<<
 *         return ']'
 *     elif(phInput == 61):
 */
    case 60:

    /* "utilBMF/Inliners.pxd":233
 *         return '\\'
 *     elif(phInput == 60):
 *         return ']'             # <<<<<<<<<<<<<<
 *     elif(phInput == 61):
 *         return '^'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__49);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__49);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":234
 *     elif(phInput == 60):
 *         return ']'
 *     elif(phInput == 61):             # <<<<<<<<<<<<<<
 *         return '^'
 *     elif(phInput == 62):
 */
    case 61:

    /* "utilBMF/Inliners.pxd":235
 *         return ']'
 *     elif(phInput == 61):
 *         return '^'             # <<<<<<<<<<<<<<
 *     elif(phInput == 62):
 *         return '_'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__50);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__50);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":236
 *     elif(phInput == 61):
 *         return '^'
 *     elif(phInput == 62):             # <<<<<<<<<<<<<<
 *         return '_'
 *     elif(phInput == 63):
 */
    case 62:

    /* "utilBMF/Inliners.pxd":237
 *         return '^'
 *     elif(phInput == 62):
 *         return '_'             # <<<<<<<<<<<<<<
 *     elif(phInput == 63):
 *         return '`'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s__51);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s__51);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":238
 *     elif(phInput == 62):
 *         return '_'
 *     elif(phInput == 63):             # <<<<<<<<<<<<<<
 *         return '`'
 *     elif(phInput == 64):
 */
    case 63:

    /* "utilBMF/Inliners.pxd":239
 *         return '_'
 *     elif(phInput == 63):
 *         return '`'             # <<<<<<<<<<<<<<
 *     elif(phInput == 64):
 *         return 'a'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__52);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__52);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":240
 *     elif(phInput == 63):
 *         return '`'
 *     elif(phInput == 64):             # <<<<<<<<<<<<<<
 *         return 'a'
 *     elif(phInput == 65):
 */
    case 64:

    /* "utilBMF/Inliners.pxd":241
 *         return '`'
 *     elif(phInput == 64):
 *         return 'a'             # <<<<<<<<<<<<<<
 *     elif(phInput == 65):
 *         return 'b'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_a);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_a);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":242
 *     elif(phInput == 64):
 *         return 'a'
 *     elif(phInput == 65):             # <<<<<<<<<<<<<<
 *         return 'b'
 *     elif(phInput == 66):
 */
    case 65:

    /* "utilBMF/Inliners.pxd":243
 *         return 'a'
 *     elif(phInput == 65):
 *         return 'b'             # <<<<<<<<<<<<<<
 *     elif(phInput == 66):
 *         return 'c'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_b);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_b);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":244
 *     elif(phInput == 65):
 *         return 'b'
 *     elif(phInput == 66):             # <<<<<<<<<<<<<<
 *         return 'c'
 *     elif(phInput == 67):
 */
    case 66:

    /* "utilBMF/Inliners.pxd":245
 *         return 'b'
 *     elif(phInput == 66):
 *         return 'c'             # <<<<<<<<<<<<<<
 *     elif(phInput == 67):
 *         return 'd'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_c);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_c);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":246
 *     elif(phInput == 66):
 *         return 'c'
 *     elif(phInput == 67):             # <<<<<<<<<<<<<<
 *         return 'd'
 *     elif(phInput == 68):
 */
    case 67:

    /* "utilBMF/Inliners.pxd":247
 *         return 'c'
 *     elif(phInput == 67):
 *         return 'd'             # <<<<<<<<<<<<<<
 *     elif(phInput == 68):
 *         return 'e'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_d);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_d);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":248
 *     elif(phInput == 67):
 *         return 'd'
 *     elif(phInput == 68):             # <<<<<<<<<<<<<<
 *         return 'e'
 *     elif(phInput == 69):
 */
    case 68:

    /* "utilBMF/Inliners.pxd":249
 *         return 'd'
 *     elif(phInput == 68):
 *         return 'e'             # <<<<<<<<<<<<<<
 *     elif(phInput == 69):
 *         return 'f'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_e);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_e);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":250
 *     elif(phInput == 68):
 *         return 'e'
 *     elif(phInput == 69):             # <<<<<<<<<<<<<<
 *         return 'f'
 *     elif(phInput == 70):
 */
    case 69:

    /* "utilBMF/Inliners.pxd":251
 *         return 'e'
 *     elif(phInput == 69):
 *         return 'f'             # <<<<<<<<<<<<<<
 *     elif(phInput == 70):
 *         return 'g'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_f);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_f);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":252
 *     elif(phInput == 69):
 *         return 'f'
 *     elif(phInput == 70):             # <<<<<<<<<<<<<<
 *         return 'g'
 *     elif(phInput == 71):
 */
    case 70:

    /* "utilBMF/Inliners.pxd":253
 *         return 'f'
 *     elif(phInput == 70):
 *         return 'g'             # <<<<<<<<<<<<<<
 *     elif(phInput == 71):
 *         return 'h'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_g);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_g);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":254
 *     elif(phInput == 70):
 *         return 'g'
 *     elif(phInput == 71):             # <<<<<<<<<<<<<<
 *         return 'h'
 *     elif(phInput == 72):
 */
    case 71:

    /* "utilBMF/Inliners.pxd":255
 *         return 'g'
 *     elif(phInput == 71):
 *         return 'h'             # <<<<<<<<<<<<<<
 *     elif(phInput == 72):
 *         return 'i'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_h);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_h);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":256
 *     elif(phInput == 71):
 *         return 'h'
 *     elif(phInput == 72):             # <<<<<<<<<<<<<<
 *         return 'i'
 *     elif(phInput == 73):
 */
    case 72:

    /* "utilBMF/Inliners.pxd":257
 *         return 'h'
 *     elif(phInput == 72):
 *         return 'i'             # <<<<<<<<<<<<<<
 *     elif(phInput == 73):
 *         return 'j'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_i);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_i);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":258
 *     elif(phInput == 72):
 *         return 'i'
 *     elif(phInput == 73):             # <<<<<<<<<<<<<<
 *         return 'j'
 *     elif(phInput == 74):
 */
    case 73:

    /* "utilBMF/Inliners.pxd":259
 *         return 'i'
 *     elif(phInput == 73):
 *         return 'j'             # <<<<<<<<<<<<<<
 *     elif(phInput == 74):
 *         return 'k'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_j);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_j);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":260
 *     elif(phInput == 73):
 *         return 'j'
 *     elif(phInput == 74):             # <<<<<<<<<<<<<<
 *         return 'k'
 *     elif(phInput == 75):
 */
    case 74:

    /* "utilBMF/Inliners.pxd":261
 *         return 'j'
 *     elif(phInput == 74):
 *         return 'k'             # <<<<<<<<<<<<<<
 *     elif(phInput == 75):
 *         return 'l'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_k);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_k);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":262
 *     elif(phInput == 74):
 *         return 'k'
 *     elif(phInput == 75):             # <<<<<<<<<<<<<<
 *         return 'l'
 *     elif(phInput == 76):
 */
    case 75:

    /* "utilBMF/Inliners.pxd":263
 *         return 'k'
 *     elif(phInput == 75):
 *         return 'l'             # <<<<<<<<<<<<<<
 *     elif(phInput == 76):
 *         return 'm'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_l);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_l);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":264
 *     elif(phInput == 75):
 *         return 'l'
 *     elif(phInput == 76):             # <<<<<<<<<<<<<<
 *         return 'm'
 *     elif(phInput == 77):
 */
    case 76:

    /* "utilBMF/Inliners.pxd":265
 *         return 'l'
 *     elif(phInput == 76):
 *         return 'm'             # <<<<<<<<<<<<<<
 *     elif(phInput == 77):
 *         return 'n'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_m);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_m);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":266
 *     elif(phInput == 76):
 *         return 'm'
 *     elif(phInput == 77):             # <<<<<<<<<<<<<<
 *         return 'n'
 *     elif(phInput == 78):
 */
    case 77:

    /* "utilBMF/Inliners.pxd":267
 *         return 'm'
 *     elif(phInput == 77):
 *         return 'n'             # <<<<<<<<<<<<<<
 *     elif(phInput == 78):
 *         return 'o'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_n);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_n);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":268
 *     elif(phInput == 77):
 *         return 'n'
 *     elif(phInput == 78):             # <<<<<<<<<<<<<<
 *         return 'o'
 *     elif(phInput == 79):
 */
    case 78:

    /* "utilBMF/Inliners.pxd":269
 *         return 'n'
 *     elif(phInput == 78):
 *         return 'o'             # <<<<<<<<<<<<<<
 *     elif(phInput == 79):
 *         return 'p'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_o);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_o);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":270
 *     elif(phInput == 78):
 *         return 'o'
 *     elif(phInput == 79):             # <<<<<<<<<<<<<<
 *         return 'p'
 *     elif(phInput == 80):
 */
    case 79:

    /* "utilBMF/Inliners.pxd":271
 *         return 'o'
 *     elif(phInput == 79):
 *         return 'p'             # <<<<<<<<<<<<<<
 *     elif(phInput == 80):
 *         return 'q'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_p);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_p);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":272
 *     elif(phInput == 79):
 *         return 'p'
 *     elif(phInput == 80):             # <<<<<<<<<<<<<<
 *         return 'q'
 *     elif(phInput == 81):
 */
    case 80:

    /* "utilBMF/Inliners.pxd":273
 *         return 'p'
 *     elif(phInput == 80):
 *         return 'q'             # <<<<<<<<<<<<<<
 *     elif(phInput == 81):
 *         return 'r'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_q);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_q);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":274
 *     elif(phInput == 80):
 *         return 'q'
 *     elif(phInput == 81):             # <<<<<<<<<<<<<<
 *         return 'r'
 *     elif(phInput == 82):
 */
    case 81:

    /* "utilBMF/Inliners.pxd":275
 *         return 'q'
 *     elif(phInput == 81):
 *         return 'r'             # <<<<<<<<<<<<<<
 *     elif(phInput == 82):
 *         return 's'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_r);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_r);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":276
 *     elif(phInput == 81):
 *         return 'r'
 *     elif(phInput == 82):             # <<<<<<<<<<<<<<
 *         return 's'
 *     elif(phInput == 83):
 */
    case 82:

    /* "utilBMF/Inliners.pxd":277
 *         return 'r'
 *     elif(phInput == 82):
 *         return 's'             # <<<<<<<<<<<<<<
 *     elif(phInput == 83):
 *         return 't'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_s_2);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_s_2);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":278
 *     elif(phInput == 82):
 *         return 's'
 *     elif(phInput == 83):             # <<<<<<<<<<<<<<
 *         return 't'
 *     elif(phInput == 84):
 */
    case 83:

    /* "utilBMF/Inliners.pxd":279
 *         return 's'
 *     elif(phInput == 83):
 *         return 't'             # <<<<<<<<<<<<<<
 *     elif(phInput == 84):
 *         return 'u'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_t);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_t);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":280
 *     elif(phInput == 83):
 *         return 't'
 *     elif(phInput == 84):             # <<<<<<<<<<<<<<
 *         return 'u'
 *     elif(phInput == 85):
 */
    case 84:

    /* "utilBMF/Inliners.pxd":281
 *         return 't'
 *     elif(phInput == 84):
 *         return 'u'             # <<<<<<<<<<<<<<
 *     elif(phInput == 85):
 *         return 'v'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_u);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_u);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":282
 *     elif(phInput == 84):
 *         return 'u'
 *     elif(phInput == 85):             # <<<<<<<<<<<<<<
 *         return 'v'
 *     elif(phInput == 86):
 */
    case 85:

    /* "utilBMF/Inliners.pxd":283
 *         return 'u'
 *     elif(phInput == 85):
 *         return 'v'             # <<<<<<<<<<<<<<
 *     elif(phInput == 86):
 *         return 'w'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_v);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_v);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":284
 *     elif(phInput == 85):
 *         return 'v'
 *     elif(phInput == 86):             # <<<<<<<<<<<<<<
 *         return 'w'
 *     elif(phInput == 87):
 */
    case 86:

    /* "utilBMF/Inliners.pxd":285
 *         return 'v'
 *     elif(phInput == 86):
 *         return 'w'             # <<<<<<<<<<<<<<
 *     elif(phInput == 87):
 *         return 'x'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_w);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_w);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":286
 *     elif(phInput == 86):
 *         return 'w'
 *     elif(phInput == 87):             # <<<<<<<<<<<<<<
 *         return 'x'
 *     elif(phInput == 88):
 */
    case 87:

    /* "utilBMF/Inliners.pxd":287
 *         return 'w'
 *     elif(phInput == 87):
 *         return 'x'             # <<<<<<<<<<<<<<
 *     elif(phInput == 88):
 *         return 'y'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_x);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_x);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":288
 *     elif(phInput == 87):
 *         return 'x'
 *     elif(phInput == 88):             # <<<<<<<<<<<<<<
 *         return 'y'
 *     elif(phInput == 89):
 */
    case 88:

    /* "utilBMF/Inliners.pxd":289
 *         return 'x'
 *     elif(phInput == 88):
 *         return 'y'             # <<<<<<<<<<<<<<
 *     elif(phInput == 89):
 *         return 'z'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_y);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_y);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":290
 *     elif(phInput == 88):
 *         return 'y'
 *     elif(phInput == 89):             # <<<<<<<<<<<<<<
 *         return 'z'
 *     elif(phInput == 90):
 */
    case 89:

    /* "utilBMF/Inliners.pxd":291
 *         return 'y'
 *     elif(phInput == 89):
 *         return 'z'             # <<<<<<<<<<<<<<
 *     elif(phInput == 90):
 *         return '{'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_z);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_z);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":292
 *     elif(phInput == 89):
 *         return 'z'
 *     elif(phInput == 90):             # <<<<<<<<<<<<<<
 *         return '{'
 *     elif(phInput == 91):
 */
    case 90:

    /* "utilBMF/Inliners.pxd":293
 *         return 'z'
 *     elif(phInput == 90):
 *         return '{'             # <<<<<<<<<<<<<<
 *     elif(phInput == 91):
 *         return '|'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__53);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__53);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":294
 *     elif(phInput == 90):
 *         return '{'
 *     elif(phInput == 91):             # <<<<<<<<<<<<<<
 *         return '|'
 *     elif(phInput == 92):
 */
    case 91:

    /* "utilBMF/Inliners.pxd":295
 *         return '{'
 *     elif(phInput == 91):
 *         return '|'             # <<<<<<<<<<<<<<
 *     elif(phInput == 92):
 *         return '}'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__20);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__20);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":296
 *     elif(phInput == 91):
 *         return '|'
 *     elif(phInput == 92):             # <<<<<<<<<<<<<<
 *         return '}'
 *     else:
 */
    case 92:

    /* "utilBMF/Inliners.pxd":297
 *         return '|'
 *     elif(phInput == 92):
 *         return '}'             # <<<<<<<<<<<<<<
 *     else:
 *         return '~'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__54);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__54);
    goto __pyx_L0;
    break;
    default:

    /* "utilBMF/Inliners.pxd":299
 *         return '}'
 *     else:
 *         return '~'             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__55);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__55);
    goto __pyx_L0;
    break;
  }

  /* "utilBMF/Inliners.pxd":111
 * 
 * 
 * cdef inline cystr ph2chrInline(np_int32_t phInput):             # <<<<<<<<<<<<<<
 *     if(phInput == 0):
 *         return '!'
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/Inliners.pxd":302
 * 
 * 
 * cdef inline char chr2phInline(cystr character):             # <<<<<<<<<<<<<<
 *     if(character == '$'):
 *         return 3
 */

static CYTHON_INLINE char __pyx_f_7utilBMF_8Inliners_chr2phInline(__pyx_t_7utilBMF_8Inliners_cystr __pyx_v_character) {
  char __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("chr2phInline", 0);

  /* "utilBMF/Inliners.pxd":303
 * 
 * cdef inline char chr2phInline(cystr character):
 *     if(character == '$'):             # <<<<<<<<<<<<<<
 *         return 3
 *     elif(character == '('):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__31, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":304
 * cdef inline char chr2phInline(cystr character):
 *     if(character == '$'):
 *         return 3             # <<<<<<<<<<<<<<
 *     elif(character == '('):
 *         return 7
 */
    __pyx_r = 3;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":305
 *     if(character == '$'):
 *         return 3
 *     elif(character == '('):             # <<<<<<<<<<<<<<
 *         return 7
 *     elif(character == ','):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__35, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":306
 *         return 3
 *     elif(character == '('):
 *         return 7             # <<<<<<<<<<<<<<
 *     elif(character == ','):
 *         return 11
 */
    __pyx_r = 7;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":307
 *     elif(character == '('):
 *         return 7
 *     elif(character == ','):             # <<<<<<<<<<<<<<
 *         return 11
 *     elif(character == '0'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":308
 *         return 7
 *     elif(character == ','):
 *         return 11             # <<<<<<<<<<<<<<
 *     elif(character == '0'):
 *         return 15
 */
    __pyx_r = 11;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":309
 *     elif(character == ','):
 *         return 11
 *     elif(character == '0'):             # <<<<<<<<<<<<<<
 *         return 15
 *     elif(character == '4'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s_0, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":310
 *         return 11
 *     elif(character == '0'):
 *         return 15             # <<<<<<<<<<<<<<
 *     elif(character == '4'):
 *         return 19
 */
    __pyx_r = 15;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":311
 *     elif(character == '0'):
 *         return 15
 *     elif(character == '4'):             # <<<<<<<<<<<<<<
 *         return 19
 *     elif(character == '8'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s_4, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":312
 *         return 15
 *     elif(character == '4'):
 *         return 19             # <<<<<<<<<<<<<<
 *     elif(character == '8'):
 *         return 23
 */
    __pyx_r = 19;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":313
 *     elif(character == '4'):
 *         return 19
 *     elif(character == '8'):             # <<<<<<<<<<<<<<
 *         return 23
 *     elif(character == '<'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s_8, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":314
 *         return 19
 *     elif(character == '8'):
 *         return 23             # <<<<<<<<<<<<<<
 *     elif(character == '<'):
 *         return 27
 */
    __pyx_r = 23;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":315
 *     elif(character == '8'):
 *         return 23
 *     elif(character == '<'):             # <<<<<<<<<<<<<<
 *         return 27
 *     elif(character == '@'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__43, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":316
 *         return 23
 *     elif(character == '<'):
 *         return 27             # <<<<<<<<<<<<<<
 *     elif(character == '@'):
 *         return 31
 */
    __pyx_r = 27;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":317
 *     elif(character == '<'):
 *         return 27
 *     elif(character == '@'):             # <<<<<<<<<<<<<<
 *         return 31
 *     elif(character == 'D'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__46, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":318
 *         return 27
 *     elif(character == '@'):
 *         return 31             # <<<<<<<<<<<<<<
 *     elif(character == 'D'):
 *         return 35
 */
    __pyx_r = 31;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":319
 *     elif(character == '@'):
 *         return 31
 *     elif(character == 'D'):             # <<<<<<<<<<<<<<
 *         return 35
 *     elif(character == 'H'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_D, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":320
 *         return 31
 *     elif(character == 'D'):
 *         return 35             # <<<<<<<<<<<<<<
 *     elif(character == 'H'):
 *         return 39
 */
    __pyx_r = 35;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":321
 *     elif(character == 'D'):
 *         return 35
 *     elif(character == 'H'):             # <<<<<<<<<<<<<<
 *         return 39
 *     elif(character == 'L'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_H, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":322
 *         return 35
 *     elif(character == 'H'):
 *         return 39             # <<<<<<<<<<<<<<
 *     elif(character == 'L'):
 *         return 43
 */
    __pyx_r = 39;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":323
 *     elif(character == 'H'):
 *         return 39
 *     elif(character == 'L'):             # <<<<<<<<<<<<<<
 *         return 43
 *     elif(character == 'P'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_L, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":324
 *         return 39
 *     elif(character == 'L'):
 *         return 43             # <<<<<<<<<<<<<<
 *     elif(character == 'P'):
 *         return 47
 */
    __pyx_r = 43;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":325
 *     elif(character == 'L'):
 *         return 43
 *     elif(character == 'P'):             # <<<<<<<<<<<<<<
 *         return 47
 *     elif(character == 'T'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_P, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":326
 *         return 43
 *     elif(character == 'P'):
 *         return 47             # <<<<<<<<<<<<<<
 *     elif(character == 'T'):
 *         return 51
 */
    __pyx_r = 47;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":327
 *     elif(character == 'P'):
 *         return 47
 *     elif(character == 'T'):             # <<<<<<<<<<<<<<
 *         return 51
 *     elif(character == 'X'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_T, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":328
 *         return 47
 *     elif(character == 'T'):
 *         return 51             # <<<<<<<<<<<<<<
 *     elif(character == 'X'):
 *         return 55
 */
    __pyx_r = 51;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":329
 *     elif(character == 'T'):
 *         return 51
 *     elif(character == 'X'):             # <<<<<<<<<<<<<<
 *         return 55
 *     elif(character == '\\'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_X, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":330
 *         return 51
 *     elif(character == 'X'):
 *         return 55             # <<<<<<<<<<<<<<
 *     elif(character == '\\'):
 *         return 59
 */
    __pyx_r = 55;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":331
 *     elif(character == 'X'):
 *         return 55
 *     elif(character == '\\'):             # <<<<<<<<<<<<<<
 *         return 59
 *     elif(character == '`'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__48, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":332
 *         return 55
 *     elif(character == '\\'):
 *         return 59             # <<<<<<<<<<<<<<
 *     elif(character == '`'):
 *         return 63
 */
    __pyx_r = 59;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":333
 *     elif(character == '\\'):
 *         return 59
 *     elif(character == '`'):             # <<<<<<<<<<<<<<
 *         return 63
 *     elif(character == 'd'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__52, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":334
 *         return 59
 *     elif(character == '`'):
 *         return 63             # <<<<<<<<<<<<<<
 *     elif(character == 'd'):
 *         return 67
 */
    __pyx_r = 63;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":335
 *     elif(character == '`'):
 *         return 63
 *     elif(character == 'd'):             # <<<<<<<<<<<<<<
 *         return 67
 *     elif(character == 'h'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_d, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":336
 *         return 63
 *     elif(character == 'd'):
 *         return 67             # <<<<<<<<<<<<<<
 *     elif(character == 'h'):
 *         return 71
 */
    __pyx_r = 67;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":337
 *     elif(character == 'd'):
 *         return 67
 *     elif(character == 'h'):             # <<<<<<<<<<<<<<
 *         return 71
 *     elif(character == 'l'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_h, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":338
 *         return 67
 *     elif(character == 'h'):
 *         return 71             # <<<<<<<<<<<<<<
 *     elif(character == 'l'):
 *         return 75
 */
    __pyx_r = 71;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":339
 *     elif(character == 'h'):
 *         return 71
 *     elif(character == 'l'):             # <<<<<<<<<<<<<<
 *         return 75
 *     elif(character == 'p'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_l, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":340
 *         return 71
 *     elif(character == 'l'):
 *         return 75             # <<<<<<<<<<<<<<
 *     elif(character == 'p'):
 *         return 79
 */
    __pyx_r = 75;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":341
 *     elif(character == 'l'):
 *         return 75
 *     elif(character == 'p'):             # <<<<<<<<<<<<<<
 *         return 79
 *     elif(character == 't'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_p, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":342
 *         return 75
 *     elif(character == 'p'):
 *         return 79             # <<<<<<<<<<<<<<
 *     elif(character == 't'):
 *         return 83
 */
    __pyx_r = 79;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":343
 *     elif(character == 'p'):
 *         return 79
 *     elif(character == 't'):             # <<<<<<<<<<<<<<
 *         return 83
 *     elif(character == 'x'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_t, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":344
 *         return 79
 *     elif(character == 't'):
 *         return 83             # <<<<<<<<<<<<<<
 *     elif(character == 'x'):
 *         return 87
 */
    __pyx_r = 83;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":345
 *     elif(character == 't'):
 *         return 83
 *     elif(character == 'x'):             # <<<<<<<<<<<<<<
 *         return 87
 *     elif(character == '|'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_x, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":346
 *         return 83
 *     elif(character == 'x'):
 *         return 87             # <<<<<<<<<<<<<<
 *     elif(character == '|'):
 *         return 91
 */
    __pyx_r = 87;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":347
 *     elif(character == 'x'):
 *         return 87
 *     elif(character == '|'):             # <<<<<<<<<<<<<<
 *         return 91
 *     elif(character == '#'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__20, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":348
 *         return 87
 *     elif(character == '|'):
 *         return 91             # <<<<<<<<<<<<<<
 *     elif(character == '#'):
 *         return 2
 */
    __pyx_r = 91;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":349
 *     elif(character == '|'):
 *         return 91
 *     elif(character == '#'):             # <<<<<<<<<<<<<<
 *         return 2
 *     elif(character == '\''):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__12, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":350
 *         return 91
 *     elif(character == '#'):
 *         return 2             # <<<<<<<<<<<<<<
 *     elif(character == '\''):
 *         return 6
 */
    __pyx_r = 2;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":351
 *     elif(character == '#'):
 *         return 2
 *     elif(character == '\''):             # <<<<<<<<<<<<<<
 *         return 6
 *     elif(character == '+'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__34, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":352
 *         return 2
 *     elif(character == '\''):
 *         return 6             # <<<<<<<<<<<<<<
 *     elif(character == '+'):
 *         return 10
 */
    __pyx_r = 6;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":353
 *     elif(character == '\''):
 *         return 6
 *     elif(character == '+'):             # <<<<<<<<<<<<<<
 *         return 10
 *     elif(character == '/'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__38, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":354
 *         return 6
 *     elif(character == '+'):
 *         return 10             # <<<<<<<<<<<<<<
 *     elif(character == '/'):
 *         return 14
 */
    __pyx_r = 10;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":355
 *     elif(character == '+'):
 *         return 10
 *     elif(character == '/'):             # <<<<<<<<<<<<<<
 *         return 14
 *     elif(character == '3'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__40, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":356
 *         return 10
 *     elif(character == '/'):
 *         return 14             # <<<<<<<<<<<<<<
 *     elif(character == '3'):
 *         return 18
 */
    __pyx_r = 14;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":357
 *     elif(character == '/'):
 *         return 14
 *     elif(character == '3'):             # <<<<<<<<<<<<<<
 *         return 18
 *     elif(character == '7'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s_3, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":358
 *         return 14
 *     elif(character == '3'):
 *         return 18             # <<<<<<<<<<<<<<
 *     elif(character == '7'):
 *         return 22
 */
    __pyx_r = 18;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":359
 *     elif(character == '3'):
 *         return 18
 *     elif(character == '7'):             # <<<<<<<<<<<<<<
 *         return 22
 *     elif(character == ';'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s_7, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":360
 *         return 18
 *     elif(character == '7'):
 *         return 22             # <<<<<<<<<<<<<<
 *     elif(character == ';'):
 *         return 26
 */
    __pyx_r = 22;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":361
 *     elif(character == '7'):
 *         return 22
 *     elif(character == ';'):             # <<<<<<<<<<<<<<
 *         return 26
 *     elif(character == '?'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__42, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":362
 *         return 22
 *     elif(character == ';'):
 *         return 26             # <<<<<<<<<<<<<<
 *     elif(character == '?'):
 *         return 30
 */
    __pyx_r = 26;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":363
 *     elif(character == ';'):
 *         return 26
 *     elif(character == '?'):             # <<<<<<<<<<<<<<
 *         return 30
 *     elif(character == 'C'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__45, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":364
 *         return 26
 *     elif(character == '?'):
 *         return 30             # <<<<<<<<<<<<<<
 *     elif(character == 'C'):
 *         return 34
 */
    __pyx_r = 30;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":365
 *     elif(character == '?'):
 *         return 30
 *     elif(character == 'C'):             # <<<<<<<<<<<<<<
 *         return 34
 *     elif(character == 'G'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_C, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":366
 *         return 30
 *     elif(character == 'C'):
 *         return 34             # <<<<<<<<<<<<<<
 *     elif(character == 'G'):
 *         return 38
 */
    __pyx_r = 34;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":367
 *     elif(character == 'C'):
 *         return 34
 *     elif(character == 'G'):             # <<<<<<<<<<<<<<
 *         return 38
 *     elif(character == 'K'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_G, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":368
 *         return 34
 *     elif(character == 'G'):
 *         return 38             # <<<<<<<<<<<<<<
 *     elif(character == 'K'):
 *         return 42
 */
    __pyx_r = 38;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":369
 *     elif(character == 'G'):
 *         return 38
 *     elif(character == 'K'):             # <<<<<<<<<<<<<<
 *         return 42
 *     elif(character == 'O'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_K, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":370
 *         return 38
 *     elif(character == 'K'):
 *         return 42             # <<<<<<<<<<<<<<
 *     elif(character == 'O'):
 *         return 46
 */
    __pyx_r = 42;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":371
 *     elif(character == 'K'):
 *         return 42
 *     elif(character == 'O'):             # <<<<<<<<<<<<<<
 *         return 46
 *     elif(character == 'S'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_O, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":372
 *         return 42
 *     elif(character == 'O'):
 *         return 46             # <<<<<<<<<<<<<<
 *     elif(character == 'S'):
 *         return 50
 */
    __pyx_r = 46;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":373
 *     elif(character == 'O'):
 *         return 46
 *     elif(character == 'S'):             # <<<<<<<<<<<<<<
 *         return 50
 *     elif(character == 'W'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_S, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":374
 *         return 46
 *     elif(character == 'S'):
 *         return 50             # <<<<<<<<<<<<<<
 *     elif(character == 'W'):
 *         return 54
 */
    __pyx_r = 50;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":375
 *     elif(character == 'S'):
 *         return 50
 *     elif(character == 'W'):             # <<<<<<<<<<<<<<
 *         return 54
 *     elif(character == '['):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_W, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":376
 *         return 50
 *     elif(character == 'W'):
 *         return 54             # <<<<<<<<<<<<<<
 *     elif(character == '['):
 *         return 58
 */
    __pyx_r = 54;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":377
 *     elif(character == 'W'):
 *         return 54
 *     elif(character == '['):             # <<<<<<<<<<<<<<
 *         return 58
 *     elif(character == '_'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__47, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":378
 *         return 54
 *     elif(character == '['):
 *         return 58             # <<<<<<<<<<<<<<
 *     elif(character == '_'):
 *         return 62
 */
    __pyx_r = 58;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":379
 *     elif(character == '['):
 *         return 58
 *     elif(character == '_'):             # <<<<<<<<<<<<<<
 *         return 62
 *     elif(character == 'c'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s__51, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":380
 *         return 58
 *     elif(character == '_'):
 *         return 62             # <<<<<<<<<<<<<<
 *     elif(character == 'c'):
 *         return 66
 */
    __pyx_r = 62;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":381
 *     elif(character == '_'):
 *         return 62
 *     elif(character == 'c'):             # <<<<<<<<<<<<<<
 *         return 66
 *     elif(character == 'g'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":382
 *         return 62
 *     elif(character == 'c'):
 *         return 66             # <<<<<<<<<<<<<<
 *     elif(character == 'g'):
 *         return 70
 */
    __pyx_r = 66;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":383
 *     elif(character == 'c'):
 *         return 66
 *     elif(character == 'g'):             # <<<<<<<<<<<<<<
 *         return 70
 *     elif(character == 'k'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_g, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":384
 *         return 66
 *     elif(character == 'g'):
 *         return 70             # <<<<<<<<<<<<<<
 *     elif(character == 'k'):
 *         return 74
 */
    __pyx_r = 70;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":385
 *     elif(character == 'g'):
 *         return 70
 *     elif(character == 'k'):             # <<<<<<<<<<<<<<
 *         return 74
 *     elif(character == 'o'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_k, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":386
 *         return 70
 *     elif(character == 'k'):
 *         return 74             # <<<<<<<<<<<<<<
 *     elif(character == 'o'):
 *         return 78
 */
    __pyx_r = 74;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":387
 *     elif(character == 'k'):
 *         return 74
 *     elif(character == 'o'):             # <<<<<<<<<<<<<<
 *         return 78
 *     elif(character == 's'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_o, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":388
 *         return 74
 *     elif(character == 'o'):
 *         return 78             # <<<<<<<<<<<<<<
 *     elif(character == 's'):
 *         return 82
 */
    __pyx_r = 78;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":389
 *     elif(character == 'o'):
 *         return 78
 *     elif(character == 's'):             # <<<<<<<<<<<<<<
 *         return 82
 *     elif(character == 'w'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_s_2, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":390
 *         return 78
 *     elif(character == 's'):
 *         return 82             # <<<<<<<<<<<<<<
 *     elif(character == 'w'):
 *         return 86
 */
    __pyx_r = 82;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":391
 *     elif(character == 's'):
 *         return 82
 *     elif(character == 'w'):             # <<<<<<<<<<<<<<
 *         return 86
 *     elif(character == '{'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_w, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":392
 *         return 82
 *     elif(character == 'w'):
 *         return 86             # <<<<<<<<<<<<<<
 *     elif(character == '{'):
 *         return 90
 */
    __pyx_r = 86;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":393
 *     elif(character == 'w'):
 *         return 86
 *     elif(character == '{'):             # <<<<<<<<<<<<<<
 *         return 90
 *     elif(character == '"'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__53, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":394
 *         return 86
 *     elif(character == '{'):
 *         return 90             # <<<<<<<<<<<<<<
 *     elif(character == '"'):
 *         return 1
 */
    __pyx_r = 90;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":395
 *     elif(character == '{'):
 *         return 90
 *     elif(character == '"'):             # <<<<<<<<<<<<<<
 *         return 1
 *     elif(character == '&'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__30, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":396
 *         return 90
 *     elif(character == '"'):
 *         return 1             # <<<<<<<<<<<<<<
 *     elif(character == '&'):
 *         return 5
 */
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":397
 *     elif(character == '"'):
 *         return 1
 *     elif(character == '&'):             # <<<<<<<<<<<<<<
 *         return 5
 *     elif(character == '*'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__33, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":398
 *         return 1
 *     elif(character == '&'):
 *         return 5             # <<<<<<<<<<<<<<
 *     elif(character == '*'):
 *         return 9
 */
    __pyx_r = 5;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":399
 *     elif(character == '&'):
 *         return 5
 *     elif(character == '*'):             # <<<<<<<<<<<<<<
 *         return 9
 *     elif(character == '.'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__37, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":400
 *         return 5
 *     elif(character == '*'):
 *         return 9             # <<<<<<<<<<<<<<
 *     elif(character == '.'):
 *         return 13
 */
    __pyx_r = 9;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":401
 *     elif(character == '*'):
 *         return 9
 *     elif(character == '.'):             # <<<<<<<<<<<<<<
 *         return 13
 *     elif(character == '2'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__39, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":402
 *         return 9
 *     elif(character == '.'):
 *         return 13             # <<<<<<<<<<<<<<
 *     elif(character == '2'):
 *         return 17
 */
    __pyx_r = 13;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":403
 *     elif(character == '.'):
 *         return 13
 *     elif(character == '2'):             # <<<<<<<<<<<<<<
 *         return 17
 *     elif(character == '6'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s_2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":404
 *         return 13
 *     elif(character == '2'):
 *         return 17             # <<<<<<<<<<<<<<
 *     elif(character == '6'):
 *         return 21
 */
    __pyx_r = 17;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":405
 *     elif(character == '2'):
 *         return 17
 *     elif(character == '6'):             # <<<<<<<<<<<<<<
 *         return 21
 *     elif(character == ':'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s_6, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":406
 *         return 17
 *     elif(character == '6'):
 *         return 21             # <<<<<<<<<<<<<<
 *     elif(character == ':'):
 *         return 25
 */
    __pyx_r = 21;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":407
 *     elif(character == '6'):
 *         return 21
 *     elif(character == ':'):             # <<<<<<<<<<<<<<
 *         return 25
 *     elif(character == '>'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__41, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":408
 *         return 21
 *     elif(character == ':'):
 *         return 25             # <<<<<<<<<<<<<<
 *     elif(character == '>'):
 *         return 29
 */
    __pyx_r = 25;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":409
 *     elif(character == ':'):
 *         return 25
 *     elif(character == '>'):             # <<<<<<<<<<<<<<
 *         return 29
 *     elif(character == 'B'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__44, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":410
 *         return 25
 *     elif(character == '>'):
 *         return 29             # <<<<<<<<<<<<<<
 *     elif(character == 'B'):
 *         return 33
 */
    __pyx_r = 29;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":411
 *     elif(character == '>'):
 *         return 29
 *     elif(character == 'B'):             # <<<<<<<<<<<<<<
 *         return 33
 *     elif(character == 'F'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_B, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":412
 *         return 29
 *     elif(character == 'B'):
 *         return 33             # <<<<<<<<<<<<<<
 *     elif(character == 'F'):
 *         return 37
 */
    __pyx_r = 33;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":413
 *     elif(character == 'B'):
 *         return 33
 *     elif(character == 'F'):             # <<<<<<<<<<<<<<
 *         return 37
 *     elif(character == 'J'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_F, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":414
 *         return 33
 *     elif(character == 'F'):
 *         return 37             # <<<<<<<<<<<<<<
 *     elif(character == 'J'):
 *         return 41
 */
    __pyx_r = 37;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":415
 *     elif(character == 'F'):
 *         return 37
 *     elif(character == 'J'):             # <<<<<<<<<<<<<<
 *         return 41
 *     elif(character == 'N'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_J, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":416
 *         return 37
 *     elif(character == 'J'):
 *         return 41             # <<<<<<<<<<<<<<
 *     elif(character == 'N'):
 *         return 45
 */
    __pyx_r = 41;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":417
 *     elif(character == 'J'):
 *         return 41
 *     elif(character == 'N'):             # <<<<<<<<<<<<<<
 *         return 45
 *     elif(character == 'R'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_N, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":418
 *         return 41
 *     elif(character == 'N'):
 *         return 45             # <<<<<<<<<<<<<<
 *     elif(character == 'R'):
 *         return 49
 */
    __pyx_r = 45;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":419
 *     elif(character == 'N'):
 *         return 45
 *     elif(character == 'R'):             # <<<<<<<<<<<<<<
 *         return 49
 *     elif(character == 'V'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_R, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":420
 *         return 45
 *     elif(character == 'R'):
 *         return 49             # <<<<<<<<<<<<<<
 *     elif(character == 'V'):
 *         return 53
 */
    __pyx_r = 49;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":421
 *     elif(character == 'R'):
 *         return 49
 *     elif(character == 'V'):             # <<<<<<<<<<<<<<
 *         return 53
 *     elif(character == 'Z'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_V, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":422
 *         return 49
 *     elif(character == 'V'):
 *         return 53             # <<<<<<<<<<<<<<
 *     elif(character == 'Z'):
 *         return 57
 */
    __pyx_r = 53;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":423
 *     elif(character == 'V'):
 *         return 53
 *     elif(character == 'Z'):             # <<<<<<<<<<<<<<
 *         return 57
 *     elif(character == '^'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_Z, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":424
 *         return 53
 *     elif(character == 'Z'):
 *         return 57             # <<<<<<<<<<<<<<
 *     elif(character == '^'):
 *         return 61
 */
    __pyx_r = 57;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":425
 *     elif(character == 'Z'):
 *         return 57
 *     elif(character == '^'):             # <<<<<<<<<<<<<<
 *         return 61
 *     elif(character == 'b'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__50, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":426
 *         return 57
 *     elif(character == '^'):
 *         return 61             # <<<<<<<<<<<<<<
 *     elif(character == 'b'):
 *         return 65
 */
    __pyx_r = 61;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":427
 *     elif(character == '^'):
 *         return 61
 *     elif(character == 'b'):             # <<<<<<<<<<<<<<
 *         return 65
 *     elif(character == 'f'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_b, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":428
 *         return 61
 *     elif(character == 'b'):
 *         return 65             # <<<<<<<<<<<<<<
 *     elif(character == 'f'):
 *         return 69
 */
    __pyx_r = 65;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":429
 *     elif(character == 'b'):
 *         return 65
 *     elif(character == 'f'):             # <<<<<<<<<<<<<<
 *         return 69
 *     elif(character == 'j'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_f, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":430
 *         return 65
 *     elif(character == 'f'):
 *         return 69             # <<<<<<<<<<<<<<
 *     elif(character == 'j'):
 *         return 73
 */
    __pyx_r = 69;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":431
 *     elif(character == 'f'):
 *         return 69
 *     elif(character == 'j'):             # <<<<<<<<<<<<<<
 *         return 73
 *     elif(character == 'n'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_j, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":432
 *         return 69
 *     elif(character == 'j'):
 *         return 73             # <<<<<<<<<<<<<<
 *     elif(character == 'n'):
 *         return 77
 */
    __pyx_r = 73;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":433
 *     elif(character == 'j'):
 *         return 73
 *     elif(character == 'n'):             # <<<<<<<<<<<<<<
 *         return 77
 *     elif(character == 'r'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_n, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":434
 *         return 73
 *     elif(character == 'n'):
 *         return 77             # <<<<<<<<<<<<<<
 *     elif(character == 'r'):
 *         return 81
 */
    __pyx_r = 77;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":435
 *     elif(character == 'n'):
 *         return 77
 *     elif(character == 'r'):             # <<<<<<<<<<<<<<
 *         return 81
 *     elif(character == 'v'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_r, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":436
 *         return 77
 *     elif(character == 'r'):
 *         return 81             # <<<<<<<<<<<<<<
 *     elif(character == 'v'):
 *         return 85
 */
    __pyx_r = 81;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":437
 *     elif(character == 'r'):
 *         return 81
 *     elif(character == 'v'):             # <<<<<<<<<<<<<<
 *         return 85
 *     elif(character == 'z'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_v, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":438
 *         return 81
 *     elif(character == 'v'):
 *         return 85             # <<<<<<<<<<<<<<
 *     elif(character == 'z'):
 *         return 89
 */
    __pyx_r = 85;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":439
 *     elif(character == 'v'):
 *         return 85
 *     elif(character == 'z'):             # <<<<<<<<<<<<<<
 *         return 89
 *     elif(character == '!'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_z, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":440
 *         return 85
 *     elif(character == 'z'):
 *         return 89             # <<<<<<<<<<<<<<
 *     elif(character == '!'):
 *         return 0
 */
    __pyx_r = 89;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":441
 *     elif(character == 'z'):
 *         return 89
 *     elif(character == '!'):             # <<<<<<<<<<<<<<
 *         return 0
 *     elif(character == '%'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__29, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":442
 *         return 89
 *     elif(character == '!'):
 *         return 0             # <<<<<<<<<<<<<<
 *     elif(character == '%'):
 *         return 4
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":443
 *     elif(character == '!'):
 *         return 0
 *     elif(character == '%'):             # <<<<<<<<<<<<<<
 *         return 4
 *     elif(character == ')'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__32, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":444
 *         return 0
 *     elif(character == '%'):
 *         return 4             # <<<<<<<<<<<<<<
 *     elif(character == ')'):
 *         return 8
 */
    __pyx_r = 4;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":445
 *     elif(character == '%'):
 *         return 4
 *     elif(character == ')'):             # <<<<<<<<<<<<<<
 *         return 8
 *     elif(character == '-'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__36, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":446
 *         return 4
 *     elif(character == ')'):
 *         return 8             # <<<<<<<<<<<<<<
 *     elif(character == '-'):
 *         return 12
 */
    __pyx_r = 8;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":447
 *     elif(character == ')'):
 *         return 8
 *     elif(character == '-'):             # <<<<<<<<<<<<<<
 *         return 12
 *     elif(character == '1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__17, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":448
 *         return 8
 *     elif(character == '-'):
 *         return 12             # <<<<<<<<<<<<<<
 *     elif(character == '1'):
 *         return 16
 */
    __pyx_r = 12;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":449
 *     elif(character == '-'):
 *         return 12
 *     elif(character == '1'):             # <<<<<<<<<<<<<<
 *         return 16
 *     elif(character == '5'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":450
 *         return 12
 *     elif(character == '1'):
 *         return 16             # <<<<<<<<<<<<<<
 *     elif(character == '5'):
 *         return 20
 */
    __pyx_r = 16;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":451
 *     elif(character == '1'):
 *         return 16
 *     elif(character == '5'):             # <<<<<<<<<<<<<<
 *         return 20
 *     elif(character == '9'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s_5, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":452
 *         return 16
 *     elif(character == '5'):
 *         return 20             # <<<<<<<<<<<<<<
 *     elif(character == '9'):
 *         return 24
 */
    __pyx_r = 20;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":453
 *     elif(character == '5'):
 *         return 20
 *     elif(character == '9'):             # <<<<<<<<<<<<<<
 *         return 24
 *     elif(character == '='):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s_9, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":454
 *         return 20
 *     elif(character == '9'):
 *         return 24             # <<<<<<<<<<<<<<
 *     elif(character == '='):
 *         return 28
 */
    __pyx_r = 24;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":455
 *     elif(character == '9'):
 *         return 24
 *     elif(character == '='):             # <<<<<<<<<<<<<<
 *         return 28
 *     elif(character == 'A'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__28, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":456
 *         return 24
 *     elif(character == '='):
 *         return 28             # <<<<<<<<<<<<<<
 *     elif(character == 'A'):
 *         return 32
 */
    __pyx_r = 28;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":457
 *     elif(character == '='):
 *         return 28
 *     elif(character == 'A'):             # <<<<<<<<<<<<<<
 *         return 32
 *     elif(character == 'E'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_A, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":458
 *         return 28
 *     elif(character == 'A'):
 *         return 32             # <<<<<<<<<<<<<<
 *     elif(character == 'E'):
 *         return 36
 */
    __pyx_r = 32;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":459
 *     elif(character == 'A'):
 *         return 32
 *     elif(character == 'E'):             # <<<<<<<<<<<<<<
 *         return 36
 *     elif(character == 'I'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_E, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":460
 *         return 32
 *     elif(character == 'E'):
 *         return 36             # <<<<<<<<<<<<<<
 *     elif(character == 'I'):
 *         return 40
 */
    __pyx_r = 36;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":461
 *     elif(character == 'E'):
 *         return 36
 *     elif(character == 'I'):             # <<<<<<<<<<<<<<
 *         return 40
 *     elif(character == 'M'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_I, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":462
 *         return 36
 *     elif(character == 'I'):
 *         return 40             # <<<<<<<<<<<<<<
 *     elif(character == 'M'):
 *         return 44
 */
    __pyx_r = 40;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":463
 *     elif(character == 'I'):
 *         return 40
 *     elif(character == 'M'):             # <<<<<<<<<<<<<<
 *         return 44
 *     elif(character == 'Q'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_M, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":464
 *         return 40
 *     elif(character == 'M'):
 *         return 44             # <<<<<<<<<<<<<<
 *     elif(character == 'Q'):
 *         return 48
 */
    __pyx_r = 44;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":465
 *     elif(character == 'M'):
 *         return 44
 *     elif(character == 'Q'):             # <<<<<<<<<<<<<<
 *         return 48
 *     elif(character == 'U'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_Q, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":466
 *         return 44
 *     elif(character == 'Q'):
 *         return 48             # <<<<<<<<<<<<<<
 *     elif(character == 'U'):
 *         return 52
 */
    __pyx_r = 48;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":467
 *     elif(character == 'Q'):
 *         return 48
 *     elif(character == 'U'):             # <<<<<<<<<<<<<<
 *         return 52
 *     elif(character == 'Y'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_U, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":468
 *         return 48
 *     elif(character == 'U'):
 *         return 52             # <<<<<<<<<<<<<<
 *     elif(character == 'Y'):
 *         return 56
 */
    __pyx_r = 52;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":469
 *     elif(character == 'U'):
 *         return 52
 *     elif(character == 'Y'):             # <<<<<<<<<<<<<<
 *         return 56
 *     elif(character == ']'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_Y, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":470
 *         return 52
 *     elif(character == 'Y'):
 *         return 56             # <<<<<<<<<<<<<<
 *     elif(character == ']'):
 *         return 60
 */
    __pyx_r = 56;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":471
 *     elif(character == 'Y'):
 *         return 56
 *     elif(character == ']'):             # <<<<<<<<<<<<<<
 *         return 60
 *     elif(character == 'a'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__49, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":472
 *         return 56
 *     elif(character == ']'):
 *         return 60             # <<<<<<<<<<<<<<
 *     elif(character == 'a'):
 *         return 64
 */
    __pyx_r = 60;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":473
 *     elif(character == ']'):
 *         return 60
 *     elif(character == 'a'):             # <<<<<<<<<<<<<<
 *         return 64
 *     elif(character == 'e'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_a, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":474
 *         return 60
 *     elif(character == 'a'):
 *         return 64             # <<<<<<<<<<<<<<
 *     elif(character == 'e'):
 *         return 68
 */
    __pyx_r = 64;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":475
 *     elif(character == 'a'):
 *         return 64
 *     elif(character == 'e'):             # <<<<<<<<<<<<<<
 *         return 68
 *     elif(character == 'i'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_e, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":476
 *         return 64
 *     elif(character == 'e'):
 *         return 68             # <<<<<<<<<<<<<<
 *     elif(character == 'i'):
 *         return 72
 */
    __pyx_r = 68;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":477
 *     elif(character == 'e'):
 *         return 68
 *     elif(character == 'i'):             # <<<<<<<<<<<<<<
 *         return 72
 *     elif(character == 'm'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_i, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":478
 *         return 68
 *     elif(character == 'i'):
 *         return 72             # <<<<<<<<<<<<<<
 *     elif(character == 'm'):
 *         return 76
 */
    __pyx_r = 72;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":479
 *     elif(character == 'i'):
 *         return 72
 *     elif(character == 'm'):             # <<<<<<<<<<<<<<
 *         return 76
 *     elif(character == 'q'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_m, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":480
 *         return 72
 *     elif(character == 'm'):
 *         return 76             # <<<<<<<<<<<<<<
 *     elif(character == 'q'):
 *         return 80
 */
    __pyx_r = 76;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":481
 *     elif(character == 'm'):
 *         return 76
 *     elif(character == 'q'):             # <<<<<<<<<<<<<<
 *         return 80
 *     elif(character == 'u'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_q, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":482
 *         return 76
 *     elif(character == 'q'):
 *         return 80             # <<<<<<<<<<<<<<
 *     elif(character == 'u'):
 *         return 84
 */
    __pyx_r = 80;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":483
 *     elif(character == 'q'):
 *         return 80
 *     elif(character == 'u'):             # <<<<<<<<<<<<<<
 *         return 84
 *     elif(character == 'y'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_u, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":484
 *         return 80
 *     elif(character == 'u'):
 *         return 84             # <<<<<<<<<<<<<<
 *     elif(character == 'y'):
 *         return 88
 */
    __pyx_r = 84;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":485
 *     elif(character == 'u'):
 *         return 84
 *     elif(character == 'y'):             # <<<<<<<<<<<<<<
 *         return 88
 *     elif(character == '}'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_n_s_y, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":486
 *         return 84
 *     elif(character == 'y'):
 *         return 88             # <<<<<<<<<<<<<<
 *     elif(character == '}'):
 *         return 92
 */
    __pyx_r = 88;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":487
 *     elif(character == 'y'):
 *         return 88
 *     elif(character == '}'):             # <<<<<<<<<<<<<<
 *         return 92
 *     else:
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_character, __pyx_kp_s__54, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":488
 *         return 88
 *     elif(character == '}'):
 *         return 92             # <<<<<<<<<<<<<<
 *     else:
 *         return 93
 */
    __pyx_r = 92;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "utilBMF/Inliners.pxd":490
 *         return 92
 *     else:
 *         return 93             # <<<<<<<<<<<<<<
 * 
 * cdef inline char chr2phImplicit(char character):
 */
    __pyx_r = 93;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":302
 * 
 * 
 * cdef inline char chr2phInline(cystr character):             # <<<<<<<<<<<<<<
 *     if(character == '$'):
 *         return 3
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("utilBMF.Inliners.chr2phInline", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/Inliners.pxd":492
 *         return 93
 * 
 * cdef inline char chr2phImplicit(char character):             # <<<<<<<<<<<<<<
 *     if(character == 33):
 *         return 0
 */

static CYTHON_INLINE char __pyx_f_7utilBMF_8Inliners_chr2phImplicit(char __pyx_v_character) {
  char __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("chr2phImplicit", 0);

  /* "utilBMF/Inliners.pxd":677
 *     elif(character == 124):
 *         return 91
 *     elif(character == 125):             # <<<<<<<<<<<<<<
 *         return 92
 *     else:
 */
  switch (__pyx_v_character) {

    /* "utilBMF/Inliners.pxd":493
 * 
 * cdef inline char chr2phImplicit(char character):
 *     if(character == 33):             # <<<<<<<<<<<<<<
 *         return 0
 *     elif(character == 34):
 */
    case 33:

    /* "utilBMF/Inliners.pxd":494
 * cdef inline char chr2phImplicit(char character):
 *     if(character == 33):
 *         return 0             # <<<<<<<<<<<<<<
 *     elif(character == 34):
 *         return 1
 */
    __pyx_r = 0;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":495
 *     if(character == 33):
 *         return 0
 *     elif(character == 34):             # <<<<<<<<<<<<<<
 *         return 1
 *     elif(character == 35):
 */
    case 34:

    /* "utilBMF/Inliners.pxd":496
 *         return 0
 *     elif(character == 34):
 *         return 1             # <<<<<<<<<<<<<<
 *     elif(character == 35):
 *         return 2
 */
    __pyx_r = 1;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":497
 *     elif(character == 34):
 *         return 1
 *     elif(character == 35):             # <<<<<<<<<<<<<<
 *         return 2
 *     elif(character == 36):
 */
    case 35:

    /* "utilBMF/Inliners.pxd":498
 *         return 1
 *     elif(character == 35):
 *         return 2             # <<<<<<<<<<<<<<
 *     elif(character == 36):
 *         return 3
 */
    __pyx_r = 2;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":499
 *     elif(character == 35):
 *         return 2
 *     elif(character == 36):             # <<<<<<<<<<<<<<
 *         return 3
 *     elif(character == 37):
 */
    case 36:

    /* "utilBMF/Inliners.pxd":500
 *         return 2
 *     elif(character == 36):
 *         return 3             # <<<<<<<<<<<<<<
 *     elif(character == 37):
 *         return 4
 */
    __pyx_r = 3;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":501
 *     elif(character == 36):
 *         return 3
 *     elif(character == 37):             # <<<<<<<<<<<<<<
 *         return 4
 *     elif(character == 38):
 */
    case 37:

    /* "utilBMF/Inliners.pxd":502
 *         return 3
 *     elif(character == 37):
 *         return 4             # <<<<<<<<<<<<<<
 *     elif(character == 38):
 *         return 5
 */
    __pyx_r = 4;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":503
 *     elif(character == 37):
 *         return 4
 *     elif(character == 38):             # <<<<<<<<<<<<<<
 *         return 5
 *     elif(character == 39):
 */
    case 38:

    /* "utilBMF/Inliners.pxd":504
 *         return 4
 *     elif(character == 38):
 *         return 5             # <<<<<<<<<<<<<<
 *     elif(character == 39):
 *         return 6
 */
    __pyx_r = 5;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":505
 *     elif(character == 38):
 *         return 5
 *     elif(character == 39):             # <<<<<<<<<<<<<<
 *         return 6
 *     elif(character == 40):
 */
    case 39:

    /* "utilBMF/Inliners.pxd":506
 *         return 5
 *     elif(character == 39):
 *         return 6             # <<<<<<<<<<<<<<
 *     elif(character == 40):
 *         return 7
 */
    __pyx_r = 6;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":507
 *     elif(character == 39):
 *         return 6
 *     elif(character == 40):             # <<<<<<<<<<<<<<
 *         return 7
 *     elif(character == 41):
 */
    case 40:

    /* "utilBMF/Inliners.pxd":508
 *         return 6
 *     elif(character == 40):
 *         return 7             # <<<<<<<<<<<<<<
 *     elif(character == 41):
 *         return 8
 */
    __pyx_r = 7;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":509
 *     elif(character == 40):
 *         return 7
 *     elif(character == 41):             # <<<<<<<<<<<<<<
 *         return 8
 *     elif(character == 42):
 */
    case 41:

    /* "utilBMF/Inliners.pxd":510
 *         return 7
 *     elif(character == 41):
 *         return 8             # <<<<<<<<<<<<<<
 *     elif(character == 42):
 *         return 9
 */
    __pyx_r = 8;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":511
 *     elif(character == 41):
 *         return 8
 *     elif(character == 42):             # <<<<<<<<<<<<<<
 *         return 9
 *     elif(character == 43):
 */
    case 42:

    /* "utilBMF/Inliners.pxd":512
 *         return 8
 *     elif(character == 42):
 *         return 9             # <<<<<<<<<<<<<<
 *     elif(character == 43):
 *         return 10
 */
    __pyx_r = 9;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":513
 *     elif(character == 42):
 *         return 9
 *     elif(character == 43):             # <<<<<<<<<<<<<<
 *         return 10
 *     elif(character == 44):
 */
    case 43:

    /* "utilBMF/Inliners.pxd":514
 *         return 9
 *     elif(character == 43):
 *         return 10             # <<<<<<<<<<<<<<
 *     elif(character == 44):
 *         return 11
 */
    __pyx_r = 10;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":515
 *     elif(character == 43):
 *         return 10
 *     elif(character == 44):             # <<<<<<<<<<<<<<
 *         return 11
 *     elif(character == 45):
 */
    case 44:

    /* "utilBMF/Inliners.pxd":516
 *         return 10
 *     elif(character == 44):
 *         return 11             # <<<<<<<<<<<<<<
 *     elif(character == 45):
 *         return 12
 */
    __pyx_r = 11;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":517
 *     elif(character == 44):
 *         return 11
 *     elif(character == 45):             # <<<<<<<<<<<<<<
 *         return 12
 *     elif(character == 46):
 */
    case 45:

    /* "utilBMF/Inliners.pxd":518
 *         return 11
 *     elif(character == 45):
 *         return 12             # <<<<<<<<<<<<<<
 *     elif(character == 46):
 *         return 13
 */
    __pyx_r = 12;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":519
 *     elif(character == 45):
 *         return 12
 *     elif(character == 46):             # <<<<<<<<<<<<<<
 *         return 13
 *     elif(character == 47):
 */
    case 46:

    /* "utilBMF/Inliners.pxd":520
 *         return 12
 *     elif(character == 46):
 *         return 13             # <<<<<<<<<<<<<<
 *     elif(character == 47):
 *         return 14
 */
    __pyx_r = 13;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":521
 *     elif(character == 46):
 *         return 13
 *     elif(character == 47):             # <<<<<<<<<<<<<<
 *         return 14
 *     elif(character == 48):
 */
    case 47:

    /* "utilBMF/Inliners.pxd":522
 *         return 13
 *     elif(character == 47):
 *         return 14             # <<<<<<<<<<<<<<
 *     elif(character == 48):
 *         return 15
 */
    __pyx_r = 14;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":523
 *     elif(character == 47):
 *         return 14
 *     elif(character == 48):             # <<<<<<<<<<<<<<
 *         return 15
 *     elif(character == 49):
 */
    case 48:

    /* "utilBMF/Inliners.pxd":524
 *         return 14
 *     elif(character == 48):
 *         return 15             # <<<<<<<<<<<<<<
 *     elif(character == 49):
 *         return 16
 */
    __pyx_r = 15;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":525
 *     elif(character == 48):
 *         return 15
 *     elif(character == 49):             # <<<<<<<<<<<<<<
 *         return 16
 *     elif(character == 50):
 */
    case 49:

    /* "utilBMF/Inliners.pxd":526
 *         return 15
 *     elif(character == 49):
 *         return 16             # <<<<<<<<<<<<<<
 *     elif(character == 50):
 *         return 17
 */
    __pyx_r = 16;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":527
 *     elif(character == 49):
 *         return 16
 *     elif(character == 50):             # <<<<<<<<<<<<<<
 *         return 17
 *     elif(character == 51):
 */
    case 50:

    /* "utilBMF/Inliners.pxd":528
 *         return 16
 *     elif(character == 50):
 *         return 17             # <<<<<<<<<<<<<<
 *     elif(character == 51):
 *         return 18
 */
    __pyx_r = 17;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":529
 *     elif(character == 50):
 *         return 17
 *     elif(character == 51):             # <<<<<<<<<<<<<<
 *         return 18
 *     elif(character == 52):
 */
    case 51:

    /* "utilBMF/Inliners.pxd":530
 *         return 17
 *     elif(character == 51):
 *         return 18             # <<<<<<<<<<<<<<
 *     elif(character == 52):
 *         return 19
 */
    __pyx_r = 18;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":531
 *     elif(character == 51):
 *         return 18
 *     elif(character == 52):             # <<<<<<<<<<<<<<
 *         return 19
 *     elif(character == 53):
 */
    case 52:

    /* "utilBMF/Inliners.pxd":532
 *         return 18
 *     elif(character == 52):
 *         return 19             # <<<<<<<<<<<<<<
 *     elif(character == 53):
 *         return 20
 */
    __pyx_r = 19;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":533
 *     elif(character == 52):
 *         return 19
 *     elif(character == 53):             # <<<<<<<<<<<<<<
 *         return 20
 *     elif(character == 54):
 */
    case 53:

    /* "utilBMF/Inliners.pxd":534
 *         return 19
 *     elif(character == 53):
 *         return 20             # <<<<<<<<<<<<<<
 *     elif(character == 54):
 *         return 21
 */
    __pyx_r = 20;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":535
 *     elif(character == 53):
 *         return 20
 *     elif(character == 54):             # <<<<<<<<<<<<<<
 *         return 21
 *     elif(character == 55):
 */
    case 54:

    /* "utilBMF/Inliners.pxd":536
 *         return 20
 *     elif(character == 54):
 *         return 21             # <<<<<<<<<<<<<<
 *     elif(character == 55):
 *         return 22
 */
    __pyx_r = 21;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":537
 *     elif(character == 54):
 *         return 21
 *     elif(character == 55):             # <<<<<<<<<<<<<<
 *         return 22
 *     elif(character == 56):
 */
    case 55:

    /* "utilBMF/Inliners.pxd":538
 *         return 21
 *     elif(character == 55):
 *         return 22             # <<<<<<<<<<<<<<
 *     elif(character == 56):
 *         return 23
 */
    __pyx_r = 22;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":539
 *     elif(character == 55):
 *         return 22
 *     elif(character == 56):             # <<<<<<<<<<<<<<
 *         return 23
 *     elif(character == 57):
 */
    case 56:

    /* "utilBMF/Inliners.pxd":540
 *         return 22
 *     elif(character == 56):
 *         return 23             # <<<<<<<<<<<<<<
 *     elif(character == 57):
 *         return 24
 */
    __pyx_r = 23;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":541
 *     elif(character == 56):
 *         return 23
 *     elif(character == 57):             # <<<<<<<<<<<<<<
 *         return 24
 *     elif(character == 58):
 */
    case 57:

    /* "utilBMF/Inliners.pxd":542
 *         return 23
 *     elif(character == 57):
 *         return 24             # <<<<<<<<<<<<<<
 *     elif(character == 58):
 *         return 25
 */
    __pyx_r = 24;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":543
 *     elif(character == 57):
 *         return 24
 *     elif(character == 58):             # <<<<<<<<<<<<<<
 *         return 25
 *     elif(character == 59):
 */
    case 58:

    /* "utilBMF/Inliners.pxd":544
 *         return 24
 *     elif(character == 58):
 *         return 25             # <<<<<<<<<<<<<<
 *     elif(character == 59):
 *         return 26
 */
    __pyx_r = 25;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":545
 *     elif(character == 58):
 *         return 25
 *     elif(character == 59):             # <<<<<<<<<<<<<<
 *         return 26
 *     elif(character == 60):
 */
    case 59:

    /* "utilBMF/Inliners.pxd":546
 *         return 25
 *     elif(character == 59):
 *         return 26             # <<<<<<<<<<<<<<
 *     elif(character == 60):
 *         return 27
 */
    __pyx_r = 26;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":547
 *     elif(character == 59):
 *         return 26
 *     elif(character == 60):             # <<<<<<<<<<<<<<
 *         return 27
 *     elif(character == 61):
 */
    case 60:

    /* "utilBMF/Inliners.pxd":548
 *         return 26
 *     elif(character == 60):
 *         return 27             # <<<<<<<<<<<<<<
 *     elif(character == 61):
 *         return 28
 */
    __pyx_r = 27;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":549
 *     elif(character == 60):
 *         return 27
 *     elif(character == 61):             # <<<<<<<<<<<<<<
 *         return 28
 *     elif(character == 62):
 */
    case 61:

    /* "utilBMF/Inliners.pxd":550
 *         return 27
 *     elif(character == 61):
 *         return 28             # <<<<<<<<<<<<<<
 *     elif(character == 62):
 *         return 29
 */
    __pyx_r = 28;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":551
 *     elif(character == 61):
 *         return 28
 *     elif(character == 62):             # <<<<<<<<<<<<<<
 *         return 29
 *     elif(character == 63):
 */
    case 62:

    /* "utilBMF/Inliners.pxd":552
 *         return 28
 *     elif(character == 62):
 *         return 29             # <<<<<<<<<<<<<<
 *     elif(character == 63):
 *         return 30
 */
    __pyx_r = 29;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":553
 *     elif(character == 62):
 *         return 29
 *     elif(character == 63):             # <<<<<<<<<<<<<<
 *         return 30
 *     elif(character == 64):
 */
    case 63:

    /* "utilBMF/Inliners.pxd":554
 *         return 29
 *     elif(character == 63):
 *         return 30             # <<<<<<<<<<<<<<
 *     elif(character == 64):
 *         return 31
 */
    __pyx_r = 30;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":555
 *     elif(character == 63):
 *         return 30
 *     elif(character == 64):             # <<<<<<<<<<<<<<
 *         return 31
 *     elif(character == 65):
 */
    case 64:

    /* "utilBMF/Inliners.pxd":556
 *         return 30
 *     elif(character == 64):
 *         return 31             # <<<<<<<<<<<<<<
 *     elif(character == 65):
 *         return 32
 */
    __pyx_r = 31;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":557
 *     elif(character == 64):
 *         return 31
 *     elif(character == 65):             # <<<<<<<<<<<<<<
 *         return 32
 *     elif(character == 66):
 */
    case 65:

    /* "utilBMF/Inliners.pxd":558
 *         return 31
 *     elif(character == 65):
 *         return 32             # <<<<<<<<<<<<<<
 *     elif(character == 66):
 *         return 33
 */
    __pyx_r = 32;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":559
 *     elif(character == 65):
 *         return 32
 *     elif(character == 66):             # <<<<<<<<<<<<<<
 *         return 33
 *     elif(character == 67):
 */
    case 66:

    /* "utilBMF/Inliners.pxd":560
 *         return 32
 *     elif(character == 66):
 *         return 33             # <<<<<<<<<<<<<<
 *     elif(character == 67):
 *         return 34
 */
    __pyx_r = 33;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":561
 *     elif(character == 66):
 *         return 33
 *     elif(character == 67):             # <<<<<<<<<<<<<<
 *         return 34
 *     elif(character == 68):
 */
    case 67:

    /* "utilBMF/Inliners.pxd":562
 *         return 33
 *     elif(character == 67):
 *         return 34             # <<<<<<<<<<<<<<
 *     elif(character == 68):
 *         return 35
 */
    __pyx_r = 34;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":563
 *     elif(character == 67):
 *         return 34
 *     elif(character == 68):             # <<<<<<<<<<<<<<
 *         return 35
 *     elif(character == 69):
 */
    case 68:

    /* "utilBMF/Inliners.pxd":564
 *         return 34
 *     elif(character == 68):
 *         return 35             # <<<<<<<<<<<<<<
 *     elif(character == 69):
 *         return 36
 */
    __pyx_r = 35;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":565
 *     elif(character == 68):
 *         return 35
 *     elif(character == 69):             # <<<<<<<<<<<<<<
 *         return 36
 *     elif(character == 70):
 */
    case 69:

    /* "utilBMF/Inliners.pxd":566
 *         return 35
 *     elif(character == 69):
 *         return 36             # <<<<<<<<<<<<<<
 *     elif(character == 70):
 *         return 37
 */
    __pyx_r = 36;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":567
 *     elif(character == 69):
 *         return 36
 *     elif(character == 70):             # <<<<<<<<<<<<<<
 *         return 37
 *     elif(character == 71):
 */
    case 70:

    /* "utilBMF/Inliners.pxd":568
 *         return 36
 *     elif(character == 70):
 *         return 37             # <<<<<<<<<<<<<<
 *     elif(character == 71):
 *         return 38
 */
    __pyx_r = 37;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":569
 *     elif(character == 70):
 *         return 37
 *     elif(character == 71):             # <<<<<<<<<<<<<<
 *         return 38
 *     elif(character == 72):
 */
    case 71:

    /* "utilBMF/Inliners.pxd":570
 *         return 37
 *     elif(character == 71):
 *         return 38             # <<<<<<<<<<<<<<
 *     elif(character == 72):
 *         return 39
 */
    __pyx_r = 38;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":571
 *     elif(character == 71):
 *         return 38
 *     elif(character == 72):             # <<<<<<<<<<<<<<
 *         return 39
 *     elif(character == 73):
 */
    case 72:

    /* "utilBMF/Inliners.pxd":572
 *         return 38
 *     elif(character == 72):
 *         return 39             # <<<<<<<<<<<<<<
 *     elif(character == 73):
 *         return 40
 */
    __pyx_r = 39;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":573
 *     elif(character == 72):
 *         return 39
 *     elif(character == 73):             # <<<<<<<<<<<<<<
 *         return 40
 *     elif(character == 74):
 */
    case 73:

    /* "utilBMF/Inliners.pxd":574
 *         return 39
 *     elif(character == 73):
 *         return 40             # <<<<<<<<<<<<<<
 *     elif(character == 74):
 *         return 41
 */
    __pyx_r = 40;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":575
 *     elif(character == 73):
 *         return 40
 *     elif(character == 74):             # <<<<<<<<<<<<<<
 *         return 41
 *     elif(character == 75):
 */
    case 74:

    /* "utilBMF/Inliners.pxd":576
 *         return 40
 *     elif(character == 74):
 *         return 41             # <<<<<<<<<<<<<<
 *     elif(character == 75):
 *         return 42
 */
    __pyx_r = 41;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":577
 *     elif(character == 74):
 *         return 41
 *     elif(character == 75):             # <<<<<<<<<<<<<<
 *         return 42
 *     elif(character == 76):
 */
    case 75:

    /* "utilBMF/Inliners.pxd":578
 *         return 41
 *     elif(character == 75):
 *         return 42             # <<<<<<<<<<<<<<
 *     elif(character == 76):
 *         return 43
 */
    __pyx_r = 42;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":579
 *     elif(character == 75):
 *         return 42
 *     elif(character == 76):             # <<<<<<<<<<<<<<
 *         return 43
 *     elif(character == 77):
 */
    case 76:

    /* "utilBMF/Inliners.pxd":580
 *         return 42
 *     elif(character == 76):
 *         return 43             # <<<<<<<<<<<<<<
 *     elif(character == 77):
 *         return 44
 */
    __pyx_r = 43;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":581
 *     elif(character == 76):
 *         return 43
 *     elif(character == 77):             # <<<<<<<<<<<<<<
 *         return 44
 *     elif(character == 78):
 */
    case 77:

    /* "utilBMF/Inliners.pxd":582
 *         return 43
 *     elif(character == 77):
 *         return 44             # <<<<<<<<<<<<<<
 *     elif(character == 78):
 *         return 45
 */
    __pyx_r = 44;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":583
 *     elif(character == 77):
 *         return 44
 *     elif(character == 78):             # <<<<<<<<<<<<<<
 *         return 45
 *     elif(character == 79):
 */
    case 78:

    /* "utilBMF/Inliners.pxd":584
 *         return 44
 *     elif(character == 78):
 *         return 45             # <<<<<<<<<<<<<<
 *     elif(character == 79):
 *         return 46
 */
    __pyx_r = 45;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":585
 *     elif(character == 78):
 *         return 45
 *     elif(character == 79):             # <<<<<<<<<<<<<<
 *         return 46
 *     elif(character == 80):
 */
    case 79:

    /* "utilBMF/Inliners.pxd":586
 *         return 45
 *     elif(character == 79):
 *         return 46             # <<<<<<<<<<<<<<
 *     elif(character == 80):
 *         return 47
 */
    __pyx_r = 46;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":587
 *     elif(character == 79):
 *         return 46
 *     elif(character == 80):             # <<<<<<<<<<<<<<
 *         return 47
 *     elif(character == 81):
 */
    case 80:

    /* "utilBMF/Inliners.pxd":588
 *         return 46
 *     elif(character == 80):
 *         return 47             # <<<<<<<<<<<<<<
 *     elif(character == 81):
 *         return 48
 */
    __pyx_r = 47;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":589
 *     elif(character == 80):
 *         return 47
 *     elif(character == 81):             # <<<<<<<<<<<<<<
 *         return 48
 *     elif(character == 82):
 */
    case 81:

    /* "utilBMF/Inliners.pxd":590
 *         return 47
 *     elif(character == 81):
 *         return 48             # <<<<<<<<<<<<<<
 *     elif(character == 82):
 *         return 49
 */
    __pyx_r = 48;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":591
 *     elif(character == 81):
 *         return 48
 *     elif(character == 82):             # <<<<<<<<<<<<<<
 *         return 49
 *     elif(character == 83):
 */
    case 82:

    /* "utilBMF/Inliners.pxd":592
 *         return 48
 *     elif(character == 82):
 *         return 49             # <<<<<<<<<<<<<<
 *     elif(character == 83):
 *         return 50
 */
    __pyx_r = 49;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":593
 *     elif(character == 82):
 *         return 49
 *     elif(character == 83):             # <<<<<<<<<<<<<<
 *         return 50
 *     elif(character == 84):
 */
    case 83:

    /* "utilBMF/Inliners.pxd":594
 *         return 49
 *     elif(character == 83):
 *         return 50             # <<<<<<<<<<<<<<
 *     elif(character == 84):
 *         return 51
 */
    __pyx_r = 50;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":595
 *     elif(character == 83):
 *         return 50
 *     elif(character == 84):             # <<<<<<<<<<<<<<
 *         return 51
 *     elif(character == 85):
 */
    case 84:

    /* "utilBMF/Inliners.pxd":596
 *         return 50
 *     elif(character == 84):
 *         return 51             # <<<<<<<<<<<<<<
 *     elif(character == 85):
 *         return 52
 */
    __pyx_r = 51;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":597
 *     elif(character == 84):
 *         return 51
 *     elif(character == 85):             # <<<<<<<<<<<<<<
 *         return 52
 *     elif(character == 86):
 */
    case 85:

    /* "utilBMF/Inliners.pxd":598
 *         return 51
 *     elif(character == 85):
 *         return 52             # <<<<<<<<<<<<<<
 *     elif(character == 86):
 *         return 53
 */
    __pyx_r = 52;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":599
 *     elif(character == 85):
 *         return 52
 *     elif(character == 86):             # <<<<<<<<<<<<<<
 *         return 53
 *     elif(character == 87):
 */
    case 86:

    /* "utilBMF/Inliners.pxd":600
 *         return 52
 *     elif(character == 86):
 *         return 53             # <<<<<<<<<<<<<<
 *     elif(character == 87):
 *         return 54
 */
    __pyx_r = 53;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":601
 *     elif(character == 86):
 *         return 53
 *     elif(character == 87):             # <<<<<<<<<<<<<<
 *         return 54
 *     elif(character == 88):
 */
    case 87:

    /* "utilBMF/Inliners.pxd":602
 *         return 53
 *     elif(character == 87):
 *         return 54             # <<<<<<<<<<<<<<
 *     elif(character == 88):
 *         return 55
 */
    __pyx_r = 54;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":603
 *     elif(character == 87):
 *         return 54
 *     elif(character == 88):             # <<<<<<<<<<<<<<
 *         return 55
 *     elif(character == 89):
 */
    case 88:

    /* "utilBMF/Inliners.pxd":604
 *         return 54
 *     elif(character == 88):
 *         return 55             # <<<<<<<<<<<<<<
 *     elif(character == 89):
 *         return 56
 */
    __pyx_r = 55;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":605
 *     elif(character == 88):
 *         return 55
 *     elif(character == 89):             # <<<<<<<<<<<<<<
 *         return 56
 *     elif(character == 90):
 */
    case 89:

    /* "utilBMF/Inliners.pxd":606
 *         return 55
 *     elif(character == 89):
 *         return 56             # <<<<<<<<<<<<<<
 *     elif(character == 90):
 *         return 57
 */
    __pyx_r = 56;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":607
 *     elif(character == 89):
 *         return 56
 *     elif(character == 90):             # <<<<<<<<<<<<<<
 *         return 57
 *     elif(character == 91):
 */
    case 90:

    /* "utilBMF/Inliners.pxd":608
 *         return 56
 *     elif(character == 90):
 *         return 57             # <<<<<<<<<<<<<<
 *     elif(character == 91):
 *         return 58
 */
    __pyx_r = 57;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":609
 *     elif(character == 90):
 *         return 57
 *     elif(character == 91):             # <<<<<<<<<<<<<<
 *         return 58
 *     elif(character == 92):
 */
    case 91:

    /* "utilBMF/Inliners.pxd":610
 *         return 57
 *     elif(character == 91):
 *         return 58             # <<<<<<<<<<<<<<
 *     elif(character == 92):
 *         return 59
 */
    __pyx_r = 58;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":611
 *     elif(character == 91):
 *         return 58
 *     elif(character == 92):             # <<<<<<<<<<<<<<
 *         return 59
 *     elif(character == 93):
 */
    case 92:

    /* "utilBMF/Inliners.pxd":612
 *         return 58
 *     elif(character == 92):
 *         return 59             # <<<<<<<<<<<<<<
 *     elif(character == 93):
 *         return 60
 */
    __pyx_r = 59;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":613
 *     elif(character == 92):
 *         return 59
 *     elif(character == 93):             # <<<<<<<<<<<<<<
 *         return 60
 *     elif(character == 94):
 */
    case 93:

    /* "utilBMF/Inliners.pxd":614
 *         return 59
 *     elif(character == 93):
 *         return 60             # <<<<<<<<<<<<<<
 *     elif(character == 94):
 *         return 61
 */
    __pyx_r = 60;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":615
 *     elif(character == 93):
 *         return 60
 *     elif(character == 94):             # <<<<<<<<<<<<<<
 *         return 61
 *     elif(character == 95):
 */
    case 94:

    /* "utilBMF/Inliners.pxd":616
 *         return 60
 *     elif(character == 94):
 *         return 61             # <<<<<<<<<<<<<<
 *     elif(character == 95):
 *         return 62
 */
    __pyx_r = 61;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":617
 *     elif(character == 94):
 *         return 61
 *     elif(character == 95):             # <<<<<<<<<<<<<<
 *         return 62
 *     elif(character == 96):
 */
    case 95:

    /* "utilBMF/Inliners.pxd":618
 *         return 61
 *     elif(character == 95):
 *         return 62             # <<<<<<<<<<<<<<
 *     elif(character == 96):
 *         return 63
 */
    __pyx_r = 62;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":619
 *     elif(character == 95):
 *         return 62
 *     elif(character == 96):             # <<<<<<<<<<<<<<
 *         return 63
 *     elif(character == 97):
 */
    case 96:

    /* "utilBMF/Inliners.pxd":620
 *         return 62
 *     elif(character == 96):
 *         return 63             # <<<<<<<<<<<<<<
 *     elif(character == 97):
 *         return 64
 */
    __pyx_r = 63;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":621
 *     elif(character == 96):
 *         return 63
 *     elif(character == 97):             # <<<<<<<<<<<<<<
 *         return 64
 *     elif(character == 98):
 */
    case 97:

    /* "utilBMF/Inliners.pxd":622
 *         return 63
 *     elif(character == 97):
 *         return 64             # <<<<<<<<<<<<<<
 *     elif(character == 98):
 *         return 65
 */
    __pyx_r = 64;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":623
 *     elif(character == 97):
 *         return 64
 *     elif(character == 98):             # <<<<<<<<<<<<<<
 *         return 65
 *     elif(character == 99):
 */
    case 98:

    /* "utilBMF/Inliners.pxd":624
 *         return 64
 *     elif(character == 98):
 *         return 65             # <<<<<<<<<<<<<<
 *     elif(character == 99):
 *         return 66
 */
    __pyx_r = 65;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":625
 *     elif(character == 98):
 *         return 65
 *     elif(character == 99):             # <<<<<<<<<<<<<<
 *         return 66
 *     elif(character == 100):
 */
    case 99:

    /* "utilBMF/Inliners.pxd":626
 *         return 65
 *     elif(character == 99):
 *         return 66             # <<<<<<<<<<<<<<
 *     elif(character == 100):
 *         return 67
 */
    __pyx_r = 66;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":627
 *     elif(character == 99):
 *         return 66
 *     elif(character == 100):             # <<<<<<<<<<<<<<
 *         return 67
 *     elif(character == 101):
 */
    case 100:

    /* "utilBMF/Inliners.pxd":628
 *         return 66
 *     elif(character == 100):
 *         return 67             # <<<<<<<<<<<<<<
 *     elif(character == 101):
 *         return 68
 */
    __pyx_r = 67;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":629
 *     elif(character == 100):
 *         return 67
 *     elif(character == 101):             # <<<<<<<<<<<<<<
 *         return 68
 *     elif(character == 102):
 */
    case 101:

    /* "utilBMF/Inliners.pxd":630
 *         return 67
 *     elif(character == 101):
 *         return 68             # <<<<<<<<<<<<<<
 *     elif(character == 102):
 *         return 69
 */
    __pyx_r = 68;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":631
 *     elif(character == 101):
 *         return 68
 *     elif(character == 102):             # <<<<<<<<<<<<<<
 *         return 69
 *     elif(character == 103):
 */
    case 102:

    /* "utilBMF/Inliners.pxd":632
 *         return 68
 *     elif(character == 102):
 *         return 69             # <<<<<<<<<<<<<<
 *     elif(character == 103):
 *         return 70
 */
    __pyx_r = 69;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":633
 *     elif(character == 102):
 *         return 69
 *     elif(character == 103):             # <<<<<<<<<<<<<<
 *         return 70
 *     elif(character == 104):
 */
    case 103:

    /* "utilBMF/Inliners.pxd":634
 *         return 69
 *     elif(character == 103):
 *         return 70             # <<<<<<<<<<<<<<
 *     elif(character == 104):
 *         return 71
 */
    __pyx_r = 70;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":635
 *     elif(character == 103):
 *         return 70
 *     elif(character == 104):             # <<<<<<<<<<<<<<
 *         return 71
 *     elif(character == 105):
 */
    case 104:

    /* "utilBMF/Inliners.pxd":636
 *         return 70
 *     elif(character == 104):
 *         return 71             # <<<<<<<<<<<<<<
 *     elif(character == 105):
 *         return 72
 */
    __pyx_r = 71;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":637
 *     elif(character == 104):
 *         return 71
 *     elif(character == 105):             # <<<<<<<<<<<<<<
 *         return 72
 *     elif(character == 106):
 */
    case 105:

    /* "utilBMF/Inliners.pxd":638
 *         return 71
 *     elif(character == 105):
 *         return 72             # <<<<<<<<<<<<<<
 *     elif(character == 106):
 *         return 73
 */
    __pyx_r = 72;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":639
 *     elif(character == 105):
 *         return 72
 *     elif(character == 106):             # <<<<<<<<<<<<<<
 *         return 73
 *     elif(character == 107):
 */
    case 106:

    /* "utilBMF/Inliners.pxd":640
 *         return 72
 *     elif(character == 106):
 *         return 73             # <<<<<<<<<<<<<<
 *     elif(character == 107):
 *         return 74
 */
    __pyx_r = 73;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":641
 *     elif(character == 106):
 *         return 73
 *     elif(character == 107):             # <<<<<<<<<<<<<<
 *         return 74
 *     elif(character == 108):
 */
    case 107:

    /* "utilBMF/Inliners.pxd":642
 *         return 73
 *     elif(character == 107):
 *         return 74             # <<<<<<<<<<<<<<
 *     elif(character == 108):
 *         return 75
 */
    __pyx_r = 74;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":643
 *     elif(character == 107):
 *         return 74
 *     elif(character == 108):             # <<<<<<<<<<<<<<
 *         return 75
 *     elif(character == 109):
 */
    case 108:

    /* "utilBMF/Inliners.pxd":644
 *         return 74
 *     elif(character == 108):
 *         return 75             # <<<<<<<<<<<<<<
 *     elif(character == 109):
 *         return 76
 */
    __pyx_r = 75;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":645
 *     elif(character == 108):
 *         return 75
 *     elif(character == 109):             # <<<<<<<<<<<<<<
 *         return 76
 *     elif(character == 110):
 */
    case 109:

    /* "utilBMF/Inliners.pxd":646
 *         return 75
 *     elif(character == 109):
 *         return 76             # <<<<<<<<<<<<<<
 *     elif(character == 110):
 *         return 77
 */
    __pyx_r = 76;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":647
 *     elif(character == 109):
 *         return 76
 *     elif(character == 110):             # <<<<<<<<<<<<<<
 *         return 77
 *     elif(character == 111):
 */
    case 110:

    /* "utilBMF/Inliners.pxd":648
 *         return 76
 *     elif(character == 110):
 *         return 77             # <<<<<<<<<<<<<<
 *     elif(character == 111):
 *         return 78
 */
    __pyx_r = 77;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":649
 *     elif(character == 110):
 *         return 77
 *     elif(character == 111):             # <<<<<<<<<<<<<<
 *         return 78
 *     elif(character == 112):
 */
    case 111:

    /* "utilBMF/Inliners.pxd":650
 *         return 77
 *     elif(character == 111):
 *         return 78             # <<<<<<<<<<<<<<
 *     elif(character == 112):
 *         return 79
 */
    __pyx_r = 78;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":651
 *     elif(character == 111):
 *         return 78
 *     elif(character == 112):             # <<<<<<<<<<<<<<
 *         return 79
 *     elif(character == 113):
 */
    case 112:

    /* "utilBMF/Inliners.pxd":652
 *         return 78
 *     elif(character == 112):
 *         return 79             # <<<<<<<<<<<<<<
 *     elif(character == 113):
 *         return 80
 */
    __pyx_r = 79;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":653
 *     elif(character == 112):
 *         return 79
 *     elif(character == 113):             # <<<<<<<<<<<<<<
 *         return 80
 *     elif(character == 114):
 */
    case 113:

    /* "utilBMF/Inliners.pxd":654
 *         return 79
 *     elif(character == 113):
 *         return 80             # <<<<<<<<<<<<<<
 *     elif(character == 114):
 *         return 81
 */
    __pyx_r = 80;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":655
 *     elif(character == 113):
 *         return 80
 *     elif(character == 114):             # <<<<<<<<<<<<<<
 *         return 81
 *     elif(character == 115):
 */
    case 114:

    /* "utilBMF/Inliners.pxd":656
 *         return 80
 *     elif(character == 114):
 *         return 81             # <<<<<<<<<<<<<<
 *     elif(character == 115):
 *         return 82
 */
    __pyx_r = 81;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":657
 *     elif(character == 114):
 *         return 81
 *     elif(character == 115):             # <<<<<<<<<<<<<<
 *         return 82
 *     elif(character == 116):
 */
    case 115:

    /* "utilBMF/Inliners.pxd":658
 *         return 81
 *     elif(character == 115):
 *         return 82             # <<<<<<<<<<<<<<
 *     elif(character == 116):
 *         return 83
 */
    __pyx_r = 82;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":659
 *     elif(character == 115):
 *         return 82
 *     elif(character == 116):             # <<<<<<<<<<<<<<
 *         return 83
 *     elif(character == 117):
 */
    case 116:

    /* "utilBMF/Inliners.pxd":660
 *         return 82
 *     elif(character == 116):
 *         return 83             # <<<<<<<<<<<<<<
 *     elif(character == 117):
 *         return 84
 */
    __pyx_r = 83;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":661
 *     elif(character == 116):
 *         return 83
 *     elif(character == 117):             # <<<<<<<<<<<<<<
 *         return 84
 *     elif(character == 118):
 */
    case 117:

    /* "utilBMF/Inliners.pxd":662
 *         return 83
 *     elif(character == 117):
 *         return 84             # <<<<<<<<<<<<<<
 *     elif(character == 118):
 *         return 85
 */
    __pyx_r = 84;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":663
 *     elif(character == 117):
 *         return 84
 *     elif(character == 118):             # <<<<<<<<<<<<<<
 *         return 85
 *     elif(character == 119):
 */
    case 118:

    /* "utilBMF/Inliners.pxd":664
 *         return 84
 *     elif(character == 118):
 *         return 85             # <<<<<<<<<<<<<<
 *     elif(character == 119):
 *         return 86
 */
    __pyx_r = 85;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":665
 *     elif(character == 118):
 *         return 85
 *     elif(character == 119):             # <<<<<<<<<<<<<<
 *         return 86
 *     elif(character == 120):
 */
    case 119:

    /* "utilBMF/Inliners.pxd":666
 *         return 85
 *     elif(character == 119):
 *         return 86             # <<<<<<<<<<<<<<
 *     elif(character == 120):
 *         return 87
 */
    __pyx_r = 86;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":667
 *     elif(character == 119):
 *         return 86
 *     elif(character == 120):             # <<<<<<<<<<<<<<
 *         return 87
 *     elif(character == 121):
 */
    case 120:

    /* "utilBMF/Inliners.pxd":668
 *         return 86
 *     elif(character == 120):
 *         return 87             # <<<<<<<<<<<<<<
 *     elif(character == 121):
 *         return 88
 */
    __pyx_r = 87;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":669
 *     elif(character == 120):
 *         return 87
 *     elif(character == 121):             # <<<<<<<<<<<<<<
 *         return 88
 *     elif(character == 122):
 */
    case 121:

    /* "utilBMF/Inliners.pxd":670
 *         return 87
 *     elif(character == 121):
 *         return 88             # <<<<<<<<<<<<<<
 *     elif(character == 122):
 *         return 89
 */
    __pyx_r = 88;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":671
 *     elif(character == 121):
 *         return 88
 *     elif(character == 122):             # <<<<<<<<<<<<<<
 *         return 89
 *     elif(character == 123):
 */
    case 122:

    /* "utilBMF/Inliners.pxd":672
 *         return 88
 *     elif(character == 122):
 *         return 89             # <<<<<<<<<<<<<<
 *     elif(character == 123):
 *         return 90
 */
    __pyx_r = 89;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":673
 *     elif(character == 122):
 *         return 89
 *     elif(character == 123):             # <<<<<<<<<<<<<<
 *         return 90
 *     elif(character == 124):
 */
    case 123:

    /* "utilBMF/Inliners.pxd":674
 *         return 89
 *     elif(character == 123):
 *         return 90             # <<<<<<<<<<<<<<
 *     elif(character == 124):
 *         return 91
 */
    __pyx_r = 90;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":675
 *     elif(character == 123):
 *         return 90
 *     elif(character == 124):             # <<<<<<<<<<<<<<
 *         return 91
 *     elif(character == 125):
 */
    case 124:

    /* "utilBMF/Inliners.pxd":676
 *         return 90
 *     elif(character == 124):
 *         return 91             # <<<<<<<<<<<<<<
 *     elif(character == 125):
 *         return 92
 */
    __pyx_r = 91;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":677
 *     elif(character == 124):
 *         return 91
 *     elif(character == 125):             # <<<<<<<<<<<<<<
 *         return 92
 *     else:
 */
    case 125:

    /* "utilBMF/Inliners.pxd":678
 *         return 91
 *     elif(character == 125):
 *         return 92             # <<<<<<<<<<<<<<
 *     else:
 *         return 93
 */
    __pyx_r = 92;
    goto __pyx_L0;
    break;
    default:

    /* "utilBMF/Inliners.pxd":680
 *         return 92
 *     else:
 *         return 93             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 93;
    goto __pyx_L0;
    break;
  }

  /* "utilBMF/Inliners.pxd":492
 *         return 93
 * 
 * cdef inline char chr2phImplicit(char character):             # <<<<<<<<<<<<<<
 *     if(character == 33):
 *         return 0
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/Inliners.pxd":683
 * 
 * 
 * cdef inline cystr chrACGNTInline(char character):             # <<<<<<<<<<<<<<
 *     if(character == 65):
 *         return "A"
 */

static CYTHON_INLINE __pyx_t_7utilBMF_8Inliners_cystr __pyx_f_7utilBMF_8Inliners_chrACGNTInline(char __pyx_v_character) {
  __pyx_t_7utilBMF_8Inliners_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("chrACGNTInline", 0);

  /* "utilBMF/Inliners.pxd":692
 *     elif(character == 84):
 *         return "T"
 *     elif(character == 78):             # <<<<<<<<<<<<<<
 *         return "N"
 *     else:
 */
  switch (__pyx_v_character) {

    /* "utilBMF/Inliners.pxd":684
 * 
 * cdef inline cystr chrACGNTInline(char character):
 *     if(character == 65):             # <<<<<<<<<<<<<<
 *         return "A"
 *     elif(character == 67):
 */
    case 65:

    /* "utilBMF/Inliners.pxd":685
 * cdef inline cystr chrACGNTInline(char character):
 *     if(character == 65):
 *         return "A"             # <<<<<<<<<<<<<<
 *     elif(character == 67):
 *         return "C"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_A);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_A);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":686
 *     if(character == 65):
 *         return "A"
 *     elif(character == 67):             # <<<<<<<<<<<<<<
 *         return "C"
 *     elif(character == 71):
 */
    case 67:

    /* "utilBMF/Inliners.pxd":687
 *         return "A"
 *     elif(character == 67):
 *         return "C"             # <<<<<<<<<<<<<<
 *     elif(character == 71):
 *         return "G"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_C);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_C);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":688
 *     elif(character == 67):
 *         return "C"
 *     elif(character == 71):             # <<<<<<<<<<<<<<
 *         return "G"
 *     elif(character == 84):
 */
    case 71:

    /* "utilBMF/Inliners.pxd":689
 *         return "C"
 *     elif(character == 71):
 *         return "G"             # <<<<<<<<<<<<<<
 *     elif(character == 84):
 *         return "T"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_G);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_G);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":690
 *     elif(character == 71):
 *         return "G"
 *     elif(character == 84):             # <<<<<<<<<<<<<<
 *         return "T"
 *     elif(character == 78):
 */
    case 84:

    /* "utilBMF/Inliners.pxd":691
 *         return "G"
 *     elif(character == 84):
 *         return "T"             # <<<<<<<<<<<<<<
 *     elif(character == 78):
 *         return "N"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_T);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_T);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":692
 *     elif(character == 84):
 *         return "T"
 *     elif(character == 78):             # <<<<<<<<<<<<<<
 *         return "N"
 *     else:
 */
    case 78:

    /* "utilBMF/Inliners.pxd":693
 *         return "T"
 *     elif(character == 78):
 *         return "N"             # <<<<<<<<<<<<<<
 *     else:
 *         return "X"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_N);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_N);
    goto __pyx_L0;
    break;
    default:

    /* "utilBMF/Inliners.pxd":695
 *         return "N"
 *     else:
 *         return "X"             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_X);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_X);
    goto __pyx_L0;
    break;
  }

  /* "utilBMF/Inliners.pxd":683
 * 
 * 
 * cdef inline cystr chrACGNTInline(char character):             # <<<<<<<<<<<<<<
 *     if(character == 65):
 *         return "A"
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/Inliners.pxd":698
 * 
 * 
 * cdef inline cystr chrInline(char character):             # <<<<<<<<<<<<<<
 *     if(character == 33):
 *             return '!'
 */

static CYTHON_INLINE __pyx_t_7utilBMF_8Inliners_cystr __pyx_f_7utilBMF_8Inliners_chrInline(char __pyx_v_character) {
  __pyx_t_7utilBMF_8Inliners_cystr __pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("chrInline", 0);

  /* "utilBMF/Inliners.pxd":883
 *     elif(character == 124):
 *             return '|'
 *     elif(character == 125):             # <<<<<<<<<<<<<<
 *             return '}'
 *     else:
 */
  switch (__pyx_v_character) {

    /* "utilBMF/Inliners.pxd":699
 * 
 * cdef inline cystr chrInline(char character):
 *     if(character == 33):             # <<<<<<<<<<<<<<
 *             return '!'
 *     elif(character == 34):
 */
    case 33:

    /* "utilBMF/Inliners.pxd":700
 * cdef inline cystr chrInline(char character):
 *     if(character == 33):
 *             return '!'             # <<<<<<<<<<<<<<
 *     elif(character == 34):
 *             return '"'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__29);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__29);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":701
 *     if(character == 33):
 *             return '!'
 *     elif(character == 34):             # <<<<<<<<<<<<<<
 *             return '"'
 *     elif(character == 35):
 */
    case 34:

    /* "utilBMF/Inliners.pxd":702
 *             return '!'
 *     elif(character == 34):
 *             return '"'             # <<<<<<<<<<<<<<
 *     elif(character == 35):
 *             return '#'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__30);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__30);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":703
 *     elif(character == 34):
 *             return '"'
 *     elif(character == 35):             # <<<<<<<<<<<<<<
 *             return '#'
 *     elif(character == 36):
 */
    case 35:

    /* "utilBMF/Inliners.pxd":704
 *             return '"'
 *     elif(character == 35):
 *             return '#'             # <<<<<<<<<<<<<<
 *     elif(character == 36):
 *             return '$'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__12);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__12);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":705
 *     elif(character == 35):
 *             return '#'
 *     elif(character == 36):             # <<<<<<<<<<<<<<
 *             return '$'
 *     elif(character == 37):
 */
    case 36:

    /* "utilBMF/Inliners.pxd":706
 *             return '#'
 *     elif(character == 36):
 *             return '$'             # <<<<<<<<<<<<<<
 *     elif(character == 37):
 *             return '%'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__31);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__31);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":707
 *     elif(character == 36):
 *             return '$'
 *     elif(character == 37):             # <<<<<<<<<<<<<<
 *             return '%'
 *     elif(character == 38):
 */
    case 37:

    /* "utilBMF/Inliners.pxd":708
 *             return '$'
 *     elif(character == 37):
 *             return '%'             # <<<<<<<<<<<<<<
 *     elif(character == 38):
 *             return '&'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__32);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__32);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":709
 *     elif(character == 37):
 *             return '%'
 *     elif(character == 38):             # <<<<<<<<<<<<<<
 *             return '&'
 *     elif(character == 39):
 */
    case 38:

    /* "utilBMF/Inliners.pxd":710
 *             return '%'
 *     elif(character == 38):
 *             return '&'             # <<<<<<<<<<<<<<
 *     elif(character == 39):
 *             return '\''
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__33);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__33);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":711
 *     elif(character == 38):
 *             return '&'
 *     elif(character == 39):             # <<<<<<<<<<<<<<
 *             return '\''
 *     elif(character == 40):
 */
    case 39:

    /* "utilBMF/Inliners.pxd":712
 *             return '&'
 *     elif(character == 39):
 *             return '\''             # <<<<<<<<<<<<<<
 *     elif(character == 40):
 *             return '('
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__34);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__34);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":713
 *     elif(character == 39):
 *             return '\''
 *     elif(character == 40):             # <<<<<<<<<<<<<<
 *             return '('
 *     elif(character == 41):
 */
    case 40:

    /* "utilBMF/Inliners.pxd":714
 *             return '\''
 *     elif(character == 40):
 *             return '('             # <<<<<<<<<<<<<<
 *     elif(character == 41):
 *             return ')'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__35);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__35);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":715
 *     elif(character == 40):
 *             return '('
 *     elif(character == 41):             # <<<<<<<<<<<<<<
 *             return ')'
 *     elif(character == 42):
 */
    case 41:

    /* "utilBMF/Inliners.pxd":716
 *             return '('
 *     elif(character == 41):
 *             return ')'             # <<<<<<<<<<<<<<
 *     elif(character == 42):
 *             return '*'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__36);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__36);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":717
 *     elif(character == 41):
 *             return ')'
 *     elif(character == 42):             # <<<<<<<<<<<<<<
 *             return '*'
 *     elif(character == 43):
 */
    case 42:

    /* "utilBMF/Inliners.pxd":718
 *             return ')'
 *     elif(character == 42):
 *             return '*'             # <<<<<<<<<<<<<<
 *     elif(character == 43):
 *             return '+'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__37);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__37);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":719
 *     elif(character == 42):
 *             return '*'
 *     elif(character == 43):             # <<<<<<<<<<<<<<
 *             return '+'
 *     elif(character == 44):
 */
    case 43:

    /* "utilBMF/Inliners.pxd":720
 *             return '*'
 *     elif(character == 43):
 *             return '+'             # <<<<<<<<<<<<<<
 *     elif(character == 44):
 *             return ','
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__38);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__38);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":721
 *     elif(character == 43):
 *             return '+'
 *     elif(character == 44):             # <<<<<<<<<<<<<<
 *             return ','
 *     elif(character == 45):
 */
    case 44:

    /* "utilBMF/Inliners.pxd":722
 *             return '+'
 *     elif(character == 44):
 *             return ','             # <<<<<<<<<<<<<<
 *     elif(character == 45):
 *             return '-'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__2);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__2);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":723
 *     elif(character == 44):
 *             return ','
 *     elif(character == 45):             # <<<<<<<<<<<<<<
 *             return '-'
 *     elif(character == 46):
 */
    case 45:

    /* "utilBMF/Inliners.pxd":724
 *             return ','
 *     elif(character == 45):
 *             return '-'             # <<<<<<<<<<<<<<
 *     elif(character == 46):
 *             return '.'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__17);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__17);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":725
 *     elif(character == 45):
 *             return '-'
 *     elif(character == 46):             # <<<<<<<<<<<<<<
 *             return '.'
 *     elif(character == 47):
 */
    case 46:

    /* "utilBMF/Inliners.pxd":726
 *             return '-'
 *     elif(character == 46):
 *             return '.'             # <<<<<<<<<<<<<<
 *     elif(character == 47):
 *             return '/'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__39);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__39);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":727
 *     elif(character == 46):
 *             return '.'
 *     elif(character == 47):             # <<<<<<<<<<<<<<
 *             return '/'
 *     elif(character == 48):
 */
    case 47:

    /* "utilBMF/Inliners.pxd":728
 *             return '.'
 *     elif(character == 47):
 *             return '/'             # <<<<<<<<<<<<<<
 *     elif(character == 48):
 *             return '0'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__40);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__40);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":729
 *     elif(character == 47):
 *             return '/'
 *     elif(character == 48):             # <<<<<<<<<<<<<<
 *             return '0'
 *     elif(character == 49):
 */
    case 48:

    /* "utilBMF/Inliners.pxd":730
 *             return '/'
 *     elif(character == 48):
 *             return '0'             # <<<<<<<<<<<<<<
 *     elif(character == 49):
 *             return '1'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_0);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_0);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":731
 *     elif(character == 48):
 *             return '0'
 *     elif(character == 49):             # <<<<<<<<<<<<<<
 *             return '1'
 *     elif(character == 50):
 */
    case 49:

    /* "utilBMF/Inliners.pxd":732
 *             return '0'
 *     elif(character == 49):
 *             return '1'             # <<<<<<<<<<<<<<
 *     elif(character == 50):
 *             return '2'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_1);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_1);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":733
 *     elif(character == 49):
 *             return '1'
 *     elif(character == 50):             # <<<<<<<<<<<<<<
 *             return '2'
 *     elif(character == 51):
 */
    case 50:

    /* "utilBMF/Inliners.pxd":734
 *             return '1'
 *     elif(character == 50):
 *             return '2'             # <<<<<<<<<<<<<<
 *     elif(character == 51):
 *             return '3'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_2);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_2);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":735
 *     elif(character == 50):
 *             return '2'
 *     elif(character == 51):             # <<<<<<<<<<<<<<
 *             return '3'
 *     elif(character == 52):
 */
    case 51:

    /* "utilBMF/Inliners.pxd":736
 *             return '2'
 *     elif(character == 51):
 *             return '3'             # <<<<<<<<<<<<<<
 *     elif(character == 52):
 *             return '4'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_3);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_3);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":737
 *     elif(character == 51):
 *             return '3'
 *     elif(character == 52):             # <<<<<<<<<<<<<<
 *             return '4'
 *     elif(character == 53):
 */
    case 52:

    /* "utilBMF/Inliners.pxd":738
 *             return '3'
 *     elif(character == 52):
 *             return '4'             # <<<<<<<<<<<<<<
 *     elif(character == 53):
 *             return '5'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_4);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_4);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":739
 *     elif(character == 52):
 *             return '4'
 *     elif(character == 53):             # <<<<<<<<<<<<<<
 *             return '5'
 *     elif(character == 54):
 */
    case 53:

    /* "utilBMF/Inliners.pxd":740
 *             return '4'
 *     elif(character == 53):
 *             return '5'             # <<<<<<<<<<<<<<
 *     elif(character == 54):
 *             return '6'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_5);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_5);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":741
 *     elif(character == 53):
 *             return '5'
 *     elif(character == 54):             # <<<<<<<<<<<<<<
 *             return '6'
 *     elif(character == 55):
 */
    case 54:

    /* "utilBMF/Inliners.pxd":742
 *             return '5'
 *     elif(character == 54):
 *             return '6'             # <<<<<<<<<<<<<<
 *     elif(character == 55):
 *             return '7'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_6);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_6);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":743
 *     elif(character == 54):
 *             return '6'
 *     elif(character == 55):             # <<<<<<<<<<<<<<
 *             return '7'
 *     elif(character == 56):
 */
    case 55:

    /* "utilBMF/Inliners.pxd":744
 *             return '6'
 *     elif(character == 55):
 *             return '7'             # <<<<<<<<<<<<<<
 *     elif(character == 56):
 *             return '8'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_7);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_7);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":745
 *     elif(character == 55):
 *             return '7'
 *     elif(character == 56):             # <<<<<<<<<<<<<<
 *             return '8'
 *     elif(character == 57):
 */
    case 56:

    /* "utilBMF/Inliners.pxd":746
 *             return '7'
 *     elif(character == 56):
 *             return '8'             # <<<<<<<<<<<<<<
 *     elif(character == 57):
 *             return '9'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_8);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_8);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":747
 *     elif(character == 56):
 *             return '8'
 *     elif(character == 57):             # <<<<<<<<<<<<<<
 *             return '9'
 *     elif(character == 58):
 */
    case 57:

    /* "utilBMF/Inliners.pxd":748
 *             return '8'
 *     elif(character == 57):
 *             return '9'             # <<<<<<<<<<<<<<
 *     elif(character == 58):
 *             return ':'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_9);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s_9);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":749
 *     elif(character == 57):
 *             return '9'
 *     elif(character == 58):             # <<<<<<<<<<<<<<
 *             return ':'
 *     elif(character == 59):
 */
    case 58:

    /* "utilBMF/Inliners.pxd":750
 *             return '9'
 *     elif(character == 58):
 *             return ':'             # <<<<<<<<<<<<<<
 *     elif(character == 59):
 *             return ';'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__41);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__41);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":751
 *     elif(character == 58):
 *             return ':'
 *     elif(character == 59):             # <<<<<<<<<<<<<<
 *             return ';'
 *     elif(character == 60):
 */
    case 59:

    /* "utilBMF/Inliners.pxd":752
 *             return ':'
 *     elif(character == 59):
 *             return ';'             # <<<<<<<<<<<<<<
 *     elif(character == 60):
 *             return '<'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__42);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__42);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":753
 *     elif(character == 59):
 *             return ';'
 *     elif(character == 60):             # <<<<<<<<<<<<<<
 *             return '<'
 *     elif(character == 61):
 */
    case 60:

    /* "utilBMF/Inliners.pxd":754
 *             return ';'
 *     elif(character == 60):
 *             return '<'             # <<<<<<<<<<<<<<
 *     elif(character == 61):
 *             return '='
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__43);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__43);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":755
 *     elif(character == 60):
 *             return '<'
 *     elif(character == 61):             # <<<<<<<<<<<<<<
 *             return '='
 *     elif(character == 62):
 */
    case 61:

    /* "utilBMF/Inliners.pxd":756
 *             return '<'
 *     elif(character == 61):
 *             return '='             # <<<<<<<<<<<<<<
 *     elif(character == 62):
 *             return '>'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__28);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__28);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":757
 *     elif(character == 61):
 *             return '='
 *     elif(character == 62):             # <<<<<<<<<<<<<<
 *             return '>'
 *     elif(character == 63):
 */
    case 62:

    /* "utilBMF/Inliners.pxd":758
 *             return '='
 *     elif(character == 62):
 *             return '>'             # <<<<<<<<<<<<<<
 *     elif(character == 63):
 *             return '?'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__44);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__44);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":759
 *     elif(character == 62):
 *             return '>'
 *     elif(character == 63):             # <<<<<<<<<<<<<<
 *             return '?'
 *     elif(character == 64):
 */
    case 63:

    /* "utilBMF/Inliners.pxd":760
 *             return '>'
 *     elif(character == 63):
 *             return '?'             # <<<<<<<<<<<<<<
 *     elif(character == 64):
 *             return '@'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__45);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__45);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":761
 *     elif(character == 63):
 *             return '?'
 *     elif(character == 64):             # <<<<<<<<<<<<<<
 *             return '@'
 *     elif(character == 65):
 */
    case 64:

    /* "utilBMF/Inliners.pxd":762
 *             return '?'
 *     elif(character == 64):
 *             return '@'             # <<<<<<<<<<<<<<
 *     elif(character == 65):
 *             return 'A'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__46);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__46);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":763
 *     elif(character == 64):
 *             return '@'
 *     elif(character == 65):             # <<<<<<<<<<<<<<
 *             return 'A'
 *     elif(character == 66):
 */
    case 65:

    /* "utilBMF/Inliners.pxd":764
 *             return '@'
 *     elif(character == 65):
 *             return 'A'             # <<<<<<<<<<<<<<
 *     elif(character == 66):
 *             return 'B'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_A);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_A);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":765
 *     elif(character == 65):
 *             return 'A'
 *     elif(character == 66):             # <<<<<<<<<<<<<<
 *             return 'B'
 *     elif(character == 67):
 */
    case 66:

    /* "utilBMF/Inliners.pxd":766
 *             return 'A'
 *     elif(character == 66):
 *             return 'B'             # <<<<<<<<<<<<<<
 *     elif(character == 67):
 *             return 'C'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_B);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_B);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":767
 *     elif(character == 66):
 *             return 'B'
 *     elif(character == 67):             # <<<<<<<<<<<<<<
 *             return 'C'
 *     elif(character == 68):
 */
    case 67:

    /* "utilBMF/Inliners.pxd":768
 *             return 'B'
 *     elif(character == 67):
 *             return 'C'             # <<<<<<<<<<<<<<
 *     elif(character == 68):
 *             return 'D'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_C);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_C);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":769
 *     elif(character == 67):
 *             return 'C'
 *     elif(character == 68):             # <<<<<<<<<<<<<<
 *             return 'D'
 *     elif(character == 69):
 */
    case 68:

    /* "utilBMF/Inliners.pxd":770
 *             return 'C'
 *     elif(character == 68):
 *             return 'D'             # <<<<<<<<<<<<<<
 *     elif(character == 69):
 *             return 'E'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_D);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_D);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":771
 *     elif(character == 68):
 *             return 'D'
 *     elif(character == 69):             # <<<<<<<<<<<<<<
 *             return 'E'
 *     elif(character == 70):
 */
    case 69:

    /* "utilBMF/Inliners.pxd":772
 *             return 'D'
 *     elif(character == 69):
 *             return 'E'             # <<<<<<<<<<<<<<
 *     elif(character == 70):
 *             return 'F'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_E);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_E);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":773
 *     elif(character == 69):
 *             return 'E'
 *     elif(character == 70):             # <<<<<<<<<<<<<<
 *             return 'F'
 *     elif(character == 71):
 */
    case 70:

    /* "utilBMF/Inliners.pxd":774
 *             return 'E'
 *     elif(character == 70):
 *             return 'F'             # <<<<<<<<<<<<<<
 *     elif(character == 71):
 *             return 'G'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_F);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_F);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":775
 *     elif(character == 70):
 *             return 'F'
 *     elif(character == 71):             # <<<<<<<<<<<<<<
 *             return 'G'
 *     elif(character == 72):
 */
    case 71:

    /* "utilBMF/Inliners.pxd":776
 *             return 'F'
 *     elif(character == 71):
 *             return 'G'             # <<<<<<<<<<<<<<
 *     elif(character == 72):
 *             return 'H'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_G);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_G);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":777
 *     elif(character == 71):
 *             return 'G'
 *     elif(character == 72):             # <<<<<<<<<<<<<<
 *             return 'H'
 *     elif(character == 73):
 */
    case 72:

    /* "utilBMF/Inliners.pxd":778
 *             return 'G'
 *     elif(character == 72):
 *             return 'H'             # <<<<<<<<<<<<<<
 *     elif(character == 73):
 *             return 'I'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_H);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_H);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":779
 *     elif(character == 72):
 *             return 'H'
 *     elif(character == 73):             # <<<<<<<<<<<<<<
 *             return 'I'
 *     elif(character == 74):
 */
    case 73:

    /* "utilBMF/Inliners.pxd":780
 *             return 'H'
 *     elif(character == 73):
 *             return 'I'             # <<<<<<<<<<<<<<
 *     elif(character == 74):
 *             return 'J'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_I);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_I);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":781
 *     elif(character == 73):
 *             return 'I'
 *     elif(character == 74):             # <<<<<<<<<<<<<<
 *             return 'J'
 *     elif(character == 75):
 */
    case 74:

    /* "utilBMF/Inliners.pxd":782
 *             return 'I'
 *     elif(character == 74):
 *             return 'J'             # <<<<<<<<<<<<<<
 *     elif(character == 75):
 *             return 'K'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_J);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_J);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":783
 *     elif(character == 74):
 *             return 'J'
 *     elif(character == 75):             # <<<<<<<<<<<<<<
 *             return 'K'
 *     elif(character == 76):
 */
    case 75:

    /* "utilBMF/Inliners.pxd":784
 *             return 'J'
 *     elif(character == 75):
 *             return 'K'             # <<<<<<<<<<<<<<
 *     elif(character == 76):
 *             return 'L'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_K);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_K);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":785
 *     elif(character == 75):
 *             return 'K'
 *     elif(character == 76):             # <<<<<<<<<<<<<<
 *             return 'L'
 *     elif(character == 77):
 */
    case 76:

    /* "utilBMF/Inliners.pxd":786
 *             return 'K'
 *     elif(character == 76):
 *             return 'L'             # <<<<<<<<<<<<<<
 *     elif(character == 77):
 *             return 'M'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_L);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_L);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":787
 *     elif(character == 76):
 *             return 'L'
 *     elif(character == 77):             # <<<<<<<<<<<<<<
 *             return 'M'
 *     elif(character == 78):
 */
    case 77:

    /* "utilBMF/Inliners.pxd":788
 *             return 'L'
 *     elif(character == 77):
 *             return 'M'             # <<<<<<<<<<<<<<
 *     elif(character == 78):
 *             return 'N'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_M);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_M);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":789
 *     elif(character == 77):
 *             return 'M'
 *     elif(character == 78):             # <<<<<<<<<<<<<<
 *             return 'N'
 *     elif(character == 79):
 */
    case 78:

    /* "utilBMF/Inliners.pxd":790
 *             return 'M'
 *     elif(character == 78):
 *             return 'N'             # <<<<<<<<<<<<<<
 *     elif(character == 79):
 *             return 'O'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_N);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_N);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":791
 *     elif(character == 78):
 *             return 'N'
 *     elif(character == 79):             # <<<<<<<<<<<<<<
 *             return 'O'
 *     elif(character == 80):
 */
    case 79:

    /* "utilBMF/Inliners.pxd":792
 *             return 'N'
 *     elif(character == 79):
 *             return 'O'             # <<<<<<<<<<<<<<
 *     elif(character == 80):
 *             return 'P'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_O);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_O);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":793
 *     elif(character == 79):
 *             return 'O'
 *     elif(character == 80):             # <<<<<<<<<<<<<<
 *             return 'P'
 *     elif(character == 81):
 */
    case 80:

    /* "utilBMF/Inliners.pxd":794
 *             return 'O'
 *     elif(character == 80):
 *             return 'P'             # <<<<<<<<<<<<<<
 *     elif(character == 81):
 *             return 'Q'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_P);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_P);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":795
 *     elif(character == 80):
 *             return 'P'
 *     elif(character == 81):             # <<<<<<<<<<<<<<
 *             return 'Q'
 *     elif(character == 82):
 */
    case 81:

    /* "utilBMF/Inliners.pxd":796
 *             return 'P'
 *     elif(character == 81):
 *             return 'Q'             # <<<<<<<<<<<<<<
 *     elif(character == 82):
 *             return 'R'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_Q);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_Q);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":797
 *     elif(character == 81):
 *             return 'Q'
 *     elif(character == 82):             # <<<<<<<<<<<<<<
 *             return 'R'
 *     elif(character == 83):
 */
    case 82:

    /* "utilBMF/Inliners.pxd":798
 *             return 'Q'
 *     elif(character == 82):
 *             return 'R'             # <<<<<<<<<<<<<<
 *     elif(character == 83):
 *             return 'S'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_R);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_R);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":799
 *     elif(character == 82):
 *             return 'R'
 *     elif(character == 83):             # <<<<<<<<<<<<<<
 *             return 'S'
 *     elif(character == 84):
 */
    case 83:

    /* "utilBMF/Inliners.pxd":800
 *             return 'R'
 *     elif(character == 83):
 *             return 'S'             # <<<<<<<<<<<<<<
 *     elif(character == 84):
 *             return 'T'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_S);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_S);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":801
 *     elif(character == 83):
 *             return 'S'
 *     elif(character == 84):             # <<<<<<<<<<<<<<
 *             return 'T'
 *     elif(character == 85):
 */
    case 84:

    /* "utilBMF/Inliners.pxd":802
 *             return 'S'
 *     elif(character == 84):
 *             return 'T'             # <<<<<<<<<<<<<<
 *     elif(character == 85):
 *             return 'U'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_T);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_T);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":803
 *     elif(character == 84):
 *             return 'T'
 *     elif(character == 85):             # <<<<<<<<<<<<<<
 *             return 'U'
 *     elif(character == 86):
 */
    case 85:

    /* "utilBMF/Inliners.pxd":804
 *             return 'T'
 *     elif(character == 85):
 *             return 'U'             # <<<<<<<<<<<<<<
 *     elif(character == 86):
 *             return 'V'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_U);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_U);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":805
 *     elif(character == 85):
 *             return 'U'
 *     elif(character == 86):             # <<<<<<<<<<<<<<
 *             return 'V'
 *     elif(character == 87):
 */
    case 86:

    /* "utilBMF/Inliners.pxd":806
 *             return 'U'
 *     elif(character == 86):
 *             return 'V'             # <<<<<<<<<<<<<<
 *     elif(character == 87):
 *             return 'W'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_V);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_V);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":807
 *     elif(character == 86):
 *             return 'V'
 *     elif(character == 87):             # <<<<<<<<<<<<<<
 *             return 'W'
 *     elif(character == 88):
 */
    case 87:

    /* "utilBMF/Inliners.pxd":808
 *             return 'V'
 *     elif(character == 87):
 *             return 'W'             # <<<<<<<<<<<<<<
 *     elif(character == 88):
 *             return 'X'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_W);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_W);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":809
 *     elif(character == 87):
 *             return 'W'
 *     elif(character == 88):             # <<<<<<<<<<<<<<
 *             return 'X'
 *     elif(character == 89):
 */
    case 88:

    /* "utilBMF/Inliners.pxd":810
 *             return 'W'
 *     elif(character == 88):
 *             return 'X'             # <<<<<<<<<<<<<<
 *     elif(character == 89):
 *             return 'Y'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_X);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_X);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":811
 *     elif(character == 88):
 *             return 'X'
 *     elif(character == 89):             # <<<<<<<<<<<<<<
 *             return 'Y'
 *     elif(character == 90):
 */
    case 89:

    /* "utilBMF/Inliners.pxd":812
 *             return 'X'
 *     elif(character == 89):
 *             return 'Y'             # <<<<<<<<<<<<<<
 *     elif(character == 90):
 *             return 'Z'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_Y);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_Y);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":813
 *     elif(character == 89):
 *             return 'Y'
 *     elif(character == 90):             # <<<<<<<<<<<<<<
 *             return 'Z'
 *     elif(character == 91):
 */
    case 90:

    /* "utilBMF/Inliners.pxd":814
 *             return 'Y'
 *     elif(character == 90):
 *             return 'Z'             # <<<<<<<<<<<<<<
 *     elif(character == 91):
 *             return '['
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_Z);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_Z);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":815
 *     elif(character == 90):
 *             return 'Z'
 *     elif(character == 91):             # <<<<<<<<<<<<<<
 *             return '['
 *     elif(character == 92):
 */
    case 91:

    /* "utilBMF/Inliners.pxd":816
 *             return 'Z'
 *     elif(character == 91):
 *             return '['             # <<<<<<<<<<<<<<
 *     elif(character == 92):
 *             return '\\'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__47);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__47);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":817
 *     elif(character == 91):
 *             return '['
 *     elif(character == 92):             # <<<<<<<<<<<<<<
 *             return '\\'
 *     elif(character == 93):
 */
    case 92:

    /* "utilBMF/Inliners.pxd":818
 *             return '['
 *     elif(character == 92):
 *             return '\\'             # <<<<<<<<<<<<<<
 *     elif(character == 93):
 *             return ']'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__48);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__48);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":819
 *     elif(character == 92):
 *             return '\\'
 *     elif(character == 93):             # <<<<<<<<<<<<<<
 *             return ']'
 *     elif(character == 94):
 */
    case 93:

    /* "utilBMF/Inliners.pxd":820
 *             return '\\'
 *     elif(character == 93):
 *             return ']'             # <<<<<<<<<<<<<<
 *     elif(character == 94):
 *             return '^'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__49);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__49);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":821
 *     elif(character == 93):
 *             return ']'
 *     elif(character == 94):             # <<<<<<<<<<<<<<
 *             return '^'
 *     elif(character == 95):
 */
    case 94:

    /* "utilBMF/Inliners.pxd":822
 *             return ']'
 *     elif(character == 94):
 *             return '^'             # <<<<<<<<<<<<<<
 *     elif(character == 95):
 *             return '_'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__50);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__50);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":823
 *     elif(character == 94):
 *             return '^'
 *     elif(character == 95):             # <<<<<<<<<<<<<<
 *             return '_'
 *     elif(character == 96):
 */
    case 95:

    /* "utilBMF/Inliners.pxd":824
 *             return '^'
 *     elif(character == 95):
 *             return '_'             # <<<<<<<<<<<<<<
 *     elif(character == 96):
 *             return '`'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s__51);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s__51);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":825
 *     elif(character == 95):
 *             return '_'
 *     elif(character == 96):             # <<<<<<<<<<<<<<
 *             return '`'
 *     elif(character == 97):
 */
    case 96:

    /* "utilBMF/Inliners.pxd":826
 *             return '_'
 *     elif(character == 96):
 *             return '`'             # <<<<<<<<<<<<<<
 *     elif(character == 97):
 *             return 'a'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__52);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__52);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":827
 *     elif(character == 96):
 *             return '`'
 *     elif(character == 97):             # <<<<<<<<<<<<<<
 *             return 'a'
 *     elif(character == 98):
 */
    case 97:

    /* "utilBMF/Inliners.pxd":828
 *             return '`'
 *     elif(character == 97):
 *             return 'a'             # <<<<<<<<<<<<<<
 *     elif(character == 98):
 *             return 'b'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_a);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_a);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":829
 *     elif(character == 97):
 *             return 'a'
 *     elif(character == 98):             # <<<<<<<<<<<<<<
 *             return 'b'
 *     elif(character == 99):
 */
    case 98:

    /* "utilBMF/Inliners.pxd":830
 *             return 'a'
 *     elif(character == 98):
 *             return 'b'             # <<<<<<<<<<<<<<
 *     elif(character == 99):
 *             return 'c'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_b);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_b);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":831
 *     elif(character == 98):
 *             return 'b'
 *     elif(character == 99):             # <<<<<<<<<<<<<<
 *             return 'c'
 *     elif(character == 100):
 */
    case 99:

    /* "utilBMF/Inliners.pxd":832
 *             return 'b'
 *     elif(character == 99):
 *             return 'c'             # <<<<<<<<<<<<<<
 *     elif(character == 100):
 *             return 'd'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_c);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_c);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":833
 *     elif(character == 99):
 *             return 'c'
 *     elif(character == 100):             # <<<<<<<<<<<<<<
 *             return 'd'
 *     elif(character == 101):
 */
    case 100:

    /* "utilBMF/Inliners.pxd":834
 *             return 'c'
 *     elif(character == 100):
 *             return 'd'             # <<<<<<<<<<<<<<
 *     elif(character == 101):
 *             return 'e'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_d);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_d);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":835
 *     elif(character == 100):
 *             return 'd'
 *     elif(character == 101):             # <<<<<<<<<<<<<<
 *             return 'e'
 *     elif(character == 102):
 */
    case 101:

    /* "utilBMF/Inliners.pxd":836
 *             return 'd'
 *     elif(character == 101):
 *             return 'e'             # <<<<<<<<<<<<<<
 *     elif(character == 102):
 *             return 'f'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_e);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_e);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":837
 *     elif(character == 101):
 *             return 'e'
 *     elif(character == 102):             # <<<<<<<<<<<<<<
 *             return 'f'
 *     elif(character == 103):
 */
    case 102:

    /* "utilBMF/Inliners.pxd":838
 *             return 'e'
 *     elif(character == 102):
 *             return 'f'             # <<<<<<<<<<<<<<
 *     elif(character == 103):
 *             return 'g'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_f);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_f);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":839
 *     elif(character == 102):
 *             return 'f'
 *     elif(character == 103):             # <<<<<<<<<<<<<<
 *             return 'g'
 *     elif(character == 104):
 */
    case 103:

    /* "utilBMF/Inliners.pxd":840
 *             return 'f'
 *     elif(character == 103):
 *             return 'g'             # <<<<<<<<<<<<<<
 *     elif(character == 104):
 *             return 'h'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_g);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_g);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":841
 *     elif(character == 103):
 *             return 'g'
 *     elif(character == 104):             # <<<<<<<<<<<<<<
 *             return 'h'
 *     elif(character == 105):
 */
    case 104:

    /* "utilBMF/Inliners.pxd":842
 *             return 'g'
 *     elif(character == 104):
 *             return 'h'             # <<<<<<<<<<<<<<
 *     elif(character == 105):
 *             return 'i'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_h);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_h);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":843
 *     elif(character == 104):
 *             return 'h'
 *     elif(character == 105):             # <<<<<<<<<<<<<<
 *             return 'i'
 *     elif(character == 106):
 */
    case 105:

    /* "utilBMF/Inliners.pxd":844
 *             return 'h'
 *     elif(character == 105):
 *             return 'i'             # <<<<<<<<<<<<<<
 *     elif(character == 106):
 *             return 'j'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_i);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_i);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":845
 *     elif(character == 105):
 *             return 'i'
 *     elif(character == 106):             # <<<<<<<<<<<<<<
 *             return 'j'
 *     elif(character == 107):
 */
    case 106:

    /* "utilBMF/Inliners.pxd":846
 *             return 'i'
 *     elif(character == 106):
 *             return 'j'             # <<<<<<<<<<<<<<
 *     elif(character == 107):
 *             return 'k'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_j);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_j);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":847
 *     elif(character == 106):
 *             return 'j'
 *     elif(character == 107):             # <<<<<<<<<<<<<<
 *             return 'k'
 *     elif(character == 108):
 */
    case 107:

    /* "utilBMF/Inliners.pxd":848
 *             return 'j'
 *     elif(character == 107):
 *             return 'k'             # <<<<<<<<<<<<<<
 *     elif(character == 108):
 *             return 'l'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_k);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_k);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":849
 *     elif(character == 107):
 *             return 'k'
 *     elif(character == 108):             # <<<<<<<<<<<<<<
 *             return 'l'
 *     elif(character == 109):
 */
    case 108:

    /* "utilBMF/Inliners.pxd":850
 *             return 'k'
 *     elif(character == 108):
 *             return 'l'             # <<<<<<<<<<<<<<
 *     elif(character == 109):
 *             return 'm'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_l);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_l);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":851
 *     elif(character == 108):
 *             return 'l'
 *     elif(character == 109):             # <<<<<<<<<<<<<<
 *             return 'm'
 *     elif(character == 110):
 */
    case 109:

    /* "utilBMF/Inliners.pxd":852
 *             return 'l'
 *     elif(character == 109):
 *             return 'm'             # <<<<<<<<<<<<<<
 *     elif(character == 110):
 *             return 'n'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_m);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_m);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":853
 *     elif(character == 109):
 *             return 'm'
 *     elif(character == 110):             # <<<<<<<<<<<<<<
 *             return 'n'
 *     elif(character == 111):
 */
    case 110:

    /* "utilBMF/Inliners.pxd":854
 *             return 'm'
 *     elif(character == 110):
 *             return 'n'             # <<<<<<<<<<<<<<
 *     elif(character == 111):
 *             return 'o'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_n);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_n);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":855
 *     elif(character == 110):
 *             return 'n'
 *     elif(character == 111):             # <<<<<<<<<<<<<<
 *             return 'o'
 *     elif(character == 112):
 */
    case 111:

    /* "utilBMF/Inliners.pxd":856
 *             return 'n'
 *     elif(character == 111):
 *             return 'o'             # <<<<<<<<<<<<<<
 *     elif(character == 112):
 *             return 'p'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_o);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_o);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":857
 *     elif(character == 111):
 *             return 'o'
 *     elif(character == 112):             # <<<<<<<<<<<<<<
 *             return 'p'
 *     elif(character == 113):
 */
    case 112:

    /* "utilBMF/Inliners.pxd":858
 *             return 'o'
 *     elif(character == 112):
 *             return 'p'             # <<<<<<<<<<<<<<
 *     elif(character == 113):
 *             return 'q'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_p);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_p);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":859
 *     elif(character == 112):
 *             return 'p'
 *     elif(character == 113):             # <<<<<<<<<<<<<<
 *             return 'q'
 *     elif(character == 114):
 */
    case 113:

    /* "utilBMF/Inliners.pxd":860
 *             return 'p'
 *     elif(character == 113):
 *             return 'q'             # <<<<<<<<<<<<<<
 *     elif(character == 114):
 *             return 'r'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_q);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_q);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":861
 *     elif(character == 113):
 *             return 'q'
 *     elif(character == 114):             # <<<<<<<<<<<<<<
 *             return 'r'
 *     elif(character == 115):
 */
    case 114:

    /* "utilBMF/Inliners.pxd":862
 *             return 'q'
 *     elif(character == 114):
 *             return 'r'             # <<<<<<<<<<<<<<
 *     elif(character == 115):
 *             return 's'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_r);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_r);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":863
 *     elif(character == 114):
 *             return 'r'
 *     elif(character == 115):             # <<<<<<<<<<<<<<
 *             return 's'
 *     elif(character == 116):
 */
    case 115:

    /* "utilBMF/Inliners.pxd":864
 *             return 'r'
 *     elif(character == 115):
 *             return 's'             # <<<<<<<<<<<<<<
 *     elif(character == 116):
 *             return 't'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_s_2);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_s_2);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":865
 *     elif(character == 115):
 *             return 's'
 *     elif(character == 116):             # <<<<<<<<<<<<<<
 *             return 't'
 *     elif(character == 117):
 */
    case 116:

    /* "utilBMF/Inliners.pxd":866
 *             return 's'
 *     elif(character == 116):
 *             return 't'             # <<<<<<<<<<<<<<
 *     elif(character == 117):
 *             return 'u'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_t);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_t);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":867
 *     elif(character == 116):
 *             return 't'
 *     elif(character == 117):             # <<<<<<<<<<<<<<
 *             return 'u'
 *     elif(character == 118):
 */
    case 117:

    /* "utilBMF/Inliners.pxd":868
 *             return 't'
 *     elif(character == 117):
 *             return 'u'             # <<<<<<<<<<<<<<
 *     elif(character == 118):
 *             return 'v'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_u);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_u);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":869
 *     elif(character == 117):
 *             return 'u'
 *     elif(character == 118):             # <<<<<<<<<<<<<<
 *             return 'v'
 *     elif(character == 119):
 */
    case 118:

    /* "utilBMF/Inliners.pxd":870
 *             return 'u'
 *     elif(character == 118):
 *             return 'v'             # <<<<<<<<<<<<<<
 *     elif(character == 119):
 *             return 'w'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_v);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_v);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":871
 *     elif(character == 118):
 *             return 'v'
 *     elif(character == 119):             # <<<<<<<<<<<<<<
 *             return 'w'
 *     elif(character == 120):
 */
    case 119:

    /* "utilBMF/Inliners.pxd":872
 *             return 'v'
 *     elif(character == 119):
 *             return 'w'             # <<<<<<<<<<<<<<
 *     elif(character == 120):
 *             return 'x'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_w);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_w);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":873
 *     elif(character == 119):
 *             return 'w'
 *     elif(character == 120):             # <<<<<<<<<<<<<<
 *             return 'x'
 *     elif(character == 121):
 */
    case 120:

    /* "utilBMF/Inliners.pxd":874
 *             return 'w'
 *     elif(character == 120):
 *             return 'x'             # <<<<<<<<<<<<<<
 *     elif(character == 121):
 *             return 'y'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_x);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_x);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":875
 *     elif(character == 120):
 *             return 'x'
 *     elif(character == 121):             # <<<<<<<<<<<<<<
 *             return 'y'
 *     elif(character == 122):
 */
    case 121:

    /* "utilBMF/Inliners.pxd":876
 *             return 'x'
 *     elif(character == 121):
 *             return 'y'             # <<<<<<<<<<<<<<
 *     elif(character == 122):
 *             return 'z'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_y);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_y);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":877
 *     elif(character == 121):
 *             return 'y'
 *     elif(character == 122):             # <<<<<<<<<<<<<<
 *             return 'z'
 *     elif(character == 123):
 */
    case 122:

    /* "utilBMF/Inliners.pxd":878
 *             return 'y'
 *     elif(character == 122):
 *             return 'z'             # <<<<<<<<<<<<<<
 *     elif(character == 123):
 *             return '{'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_z);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_n_s_z);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":879
 *     elif(character == 122):
 *             return 'z'
 *     elif(character == 123):             # <<<<<<<<<<<<<<
 *             return '{'
 *     elif(character == 124):
 */
    case 123:

    /* "utilBMF/Inliners.pxd":880
 *             return 'z'
 *     elif(character == 123):
 *             return '{'             # <<<<<<<<<<<<<<
 *     elif(character == 124):
 *             return '|'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__53);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__53);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":881
 *     elif(character == 123):
 *             return '{'
 *     elif(character == 124):             # <<<<<<<<<<<<<<
 *             return '|'
 *     elif(character == 125):
 */
    case 124:

    /* "utilBMF/Inliners.pxd":882
 *             return '{'
 *     elif(character == 124):
 *             return '|'             # <<<<<<<<<<<<<<
 *     elif(character == 125):
 *             return '}'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__20);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__20);
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":883
 *     elif(character == 124):
 *             return '|'
 *     elif(character == 125):             # <<<<<<<<<<<<<<
 *             return '}'
 *     else:
 */
    case 125:

    /* "utilBMF/Inliners.pxd":884
 *             return '|'
 *     elif(character == 125):
 *             return '}'             # <<<<<<<<<<<<<<
 *     else:
 *             return '~'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__54);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__54);
    goto __pyx_L0;
    break;
    default:

    /* "utilBMF/Inliners.pxd":886
 *             return '}'
 *     else:
 *             return '~'             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s__55);
    __pyx_r = ((__pyx_t_7utilBMF_8Inliners_cystr)__pyx_kp_s__55);
    goto __pyx_L0;
    break;
  }

  /* "utilBMF/Inliners.pxd":698
 * 
 * 
 * cdef inline cystr chrInline(char character):             # <<<<<<<<<<<<<<
 *     if(character == 33):
 *             return '!'
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/Inliners.pxd":889
 * 
 * 
 * cdef inline char CigarOpToCigarChar(char character):             # <<<<<<<<<<<<<<
 *     if(character == 0):
 *         return 77
 */

static CYTHON_INLINE char __pyx_f_7utilBMF_8Inliners_CigarOpToCigarChar(char __pyx_v_character) {
  char __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CigarOpToCigarChar", 0);

  /* "utilBMF/Inliners.pxd":922
 *     elif(character == 88):
 *         return 8
 *     elif(character == 68):             # <<<<<<<<<<<<<<
 *         return 2
 *     else:
 */
  switch (__pyx_v_character) {

    /* "utilBMF/Inliners.pxd":890
 * 
 * cdef inline char CigarOpToCigarChar(char character):
 *     if(character == 0):             # <<<<<<<<<<<<<<
 *         return 77
 *     elif(character == 1):
 */
    case 0:

    /* "utilBMF/Inliners.pxd":891
 * cdef inline char CigarOpToCigarChar(char character):
 *     if(character == 0):
 *         return 77             # <<<<<<<<<<<<<<
 *     elif(character == 1):
 *         return 73
 */
    __pyx_r = 77;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":892
 *     if(character == 0):
 *         return 77
 *     elif(character == 1):             # <<<<<<<<<<<<<<
 *         return 73
 *     elif(character == 2):
 */
    case 1:

    /* "utilBMF/Inliners.pxd":893
 *         return 77
 *     elif(character == 1):
 *         return 73             # <<<<<<<<<<<<<<
 *     elif(character == 2):
 *         return 68
 */
    __pyx_r = 73;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":894
 *     elif(character == 1):
 *         return 73
 *     elif(character == 2):             # <<<<<<<<<<<<<<
 *         return 68
 *     elif(character == 3):
 */
    case 2:

    /* "utilBMF/Inliners.pxd":895
 *         return 73
 *     elif(character == 2):
 *         return 68             # <<<<<<<<<<<<<<
 *     elif(character == 3):
 *         return 83
 */
    __pyx_r = 68;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":896
 *     elif(character == 2):
 *         return 68
 *     elif(character == 3):             # <<<<<<<<<<<<<<
 *         return 83
 *     elif(character == 4):
 */
    case 3:

    /* "utilBMF/Inliners.pxd":897
 *         return 68
 *     elif(character == 3):
 *         return 83             # <<<<<<<<<<<<<<
 *     elif(character == 4):
 *         return 78
 */
    __pyx_r = 83;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":898
 *     elif(character == 3):
 *         return 83
 *     elif(character == 4):             # <<<<<<<<<<<<<<
 *         return 78
 *     elif(character == 5):
 */
    case 4:

    /* "utilBMF/Inliners.pxd":899
 *         return 83
 *     elif(character == 4):
 *         return 78             # <<<<<<<<<<<<<<
 *     elif(character == 5):
 *         return 72
 */
    __pyx_r = 78;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":900
 *     elif(character == 4):
 *         return 78
 *     elif(character == 5):             # <<<<<<<<<<<<<<
 *         return 72
 *     elif(character == 6):
 */
    case 5:

    /* "utilBMF/Inliners.pxd":901
 *         return 78
 *     elif(character == 5):
 *         return 72             # <<<<<<<<<<<<<<
 *     elif(character == 6):
 *         return 80
 */
    __pyx_r = 72;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":902
 *     elif(character == 5):
 *         return 72
 *     elif(character == 6):             # <<<<<<<<<<<<<<
 *         return 80
 *     elif(character == 7):
 */
    case 6:

    /* "utilBMF/Inliners.pxd":903
 *         return 72
 *     elif(character == 6):
 *         return 80             # <<<<<<<<<<<<<<
 *     elif(character == 7):
 *         return 61
 */
    __pyx_r = 80;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":904
 *     elif(character == 6):
 *         return 80
 *     elif(character == 7):             # <<<<<<<<<<<<<<
 *         return 61
 *     elif(character == 8):
 */
    case 7:

    /* "utilBMF/Inliners.pxd":905
 *         return 80
 *     elif(character == 7):
 *         return 61             # <<<<<<<<<<<<<<
 *     elif(character == 8):
 *         return 88
 */
    __pyx_r = 61;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":906
 *     elif(character == 7):
 *         return 61
 *     elif(character == 8):             # <<<<<<<<<<<<<<
 *         return 88
 *     elif(character == 73):
 */
    case 8:

    /* "utilBMF/Inliners.pxd":907
 *         return 61
 *     elif(character == 8):
 *         return 88             # <<<<<<<<<<<<<<
 *     elif(character == 73):
 *         return 1
 */
    __pyx_r = 88;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":908
 *     elif(character == 8):
 *         return 88
 *     elif(character == 73):             # <<<<<<<<<<<<<<
 *         return 1
 *     elif(character == 77):
 */
    case 73:

    /* "utilBMF/Inliners.pxd":909
 *         return 88
 *     elif(character == 73):
 *         return 1             # <<<<<<<<<<<<<<
 *     elif(character == 77):
 *         return 0
 */
    __pyx_r = 1;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":910
 *     elif(character == 73):
 *         return 1
 *     elif(character == 77):             # <<<<<<<<<<<<<<
 *         return 0
 *     elif(character == 78):
 */
    case 77:

    /* "utilBMF/Inliners.pxd":911
 *         return 1
 *     elif(character == 77):
 *         return 0             # <<<<<<<<<<<<<<
 *     elif(character == 78):
 *         return 4
 */
    __pyx_r = 0;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":912
 *     elif(character == 77):
 *         return 0
 *     elif(character == 78):             # <<<<<<<<<<<<<<
 *         return 4
 *     elif(character == 80):
 */
    case 78:

    /* "utilBMF/Inliners.pxd":913
 *         return 0
 *     elif(character == 78):
 *         return 4             # <<<<<<<<<<<<<<
 *     elif(character == 80):
 *         return 6
 */
    __pyx_r = 4;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":914
 *     elif(character == 78):
 *         return 4
 *     elif(character == 80):             # <<<<<<<<<<<<<<
 *         return 6
 *     elif(character == 72):
 */
    case 80:

    /* "utilBMF/Inliners.pxd":915
 *         return 4
 *     elif(character == 80):
 *         return 6             # <<<<<<<<<<<<<<
 *     elif(character == 72):
 *         return 5
 */
    __pyx_r = 6;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":916
 *     elif(character == 80):
 *         return 6
 *     elif(character == 72):             # <<<<<<<<<<<<<<
 *         return 5
 *     elif(character == 83):
 */
    case 72:

    /* "utilBMF/Inliners.pxd":917
 *         return 6
 *     elif(character == 72):
 *         return 5             # <<<<<<<<<<<<<<
 *     elif(character == 83):
 *         return 3
 */
    __pyx_r = 5;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":918
 *     elif(character == 72):
 *         return 5
 *     elif(character == 83):             # <<<<<<<<<<<<<<
 *         return 3
 *     elif(character == 88):
 */
    case 83:

    /* "utilBMF/Inliners.pxd":919
 *         return 5
 *     elif(character == 83):
 *         return 3             # <<<<<<<<<<<<<<
 *     elif(character == 88):
 *         return 8
 */
    __pyx_r = 3;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":920
 *     elif(character == 83):
 *         return 3
 *     elif(character == 88):             # <<<<<<<<<<<<<<
 *         return 8
 *     elif(character == 68):
 */
    case 88:

    /* "utilBMF/Inliners.pxd":921
 *         return 3
 *     elif(character == 88):
 *         return 8             # <<<<<<<<<<<<<<
 *     elif(character == 68):
 *         return 2
 */
    __pyx_r = 8;
    goto __pyx_L0;
    break;

    /* "utilBMF/Inliners.pxd":922
 *     elif(character == 88):
 *         return 8
 *     elif(character == 68):             # <<<<<<<<<<<<<<
 *         return 2
 *     else:
 */
    case 68:

    /* "utilBMF/Inliners.pxd":923
 *         return 8
 *     elif(character == 68):
 *         return 2             # <<<<<<<<<<<<<<
 *     else:
 *         return 7
 */
    __pyx_r = 2;
    goto __pyx_L0;
    break;
    default:

    /* "utilBMF/Inliners.pxd":925
 *         return 2
 *     else:
 *         return 7             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 7;
    goto __pyx_L0;
    break;
  }

  /* "utilBMF/Inliners.pxd":889
 * 
 * 
 * cdef inline char CigarOpToCigarChar(char character):             # <<<<<<<<<<<<<<
 *     if(character == 0):
 *         return 77
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/Inliners.pxd":928
 * 
 * 
 * cdef inline char ChrToRefIDInline(cystr contig):             # <<<<<<<<<<<<<<
 *     if(contig == 'GL000224.1'):
 *         return 74
 */

static CYTHON_INLINE char __pyx_f_7utilBMF_8Inliners_ChrToRefIDInline(__pyx_t_7utilBMF_8Inliners_cystr __pyx_v_contig) {
  char __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ChrToRefIDInline", 0);

  /* "utilBMF/Inliners.pxd":929
 * 
 * cdef inline char ChrToRefIDInline(cystr contig):
 *     if(contig == 'GL000224.1'):             # <<<<<<<<<<<<<<
 *         return 74
 *     elif(contig == 'GL000219.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000224_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":930
 * cdef inline char ChrToRefIDInline(cystr contig):
 *     if(contig == 'GL000224.1'):
 *         return 74             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000219.1'):
 *         return 73
 */
    __pyx_r = 74;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":931
 *     if(contig == 'GL000224.1'):
 *         return 74
 *     elif(contig == 'GL000219.1'):             # <<<<<<<<<<<<<<
 *         return 73
 *     elif(contig == 'GL000205.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000219_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":932
 *         return 74
 *     elif(contig == 'GL000219.1'):
 *         return 73             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000205.1'):
 *         return 72
 */
    __pyx_r = 73;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":933
 *     elif(contig == 'GL000219.1'):
 *         return 73
 *     elif(contig == 'GL000205.1'):             # <<<<<<<<<<<<<<
 *         return 72
 *     elif(contig == 'GL000204.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000205_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":934
 *         return 73
 *     elif(contig == 'GL000205.1'):
 *         return 72             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000204.1'):
 *         return 55
 */
    __pyx_r = 72;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":935
 *     elif(contig == 'GL000205.1'):
 *         return 72
 *     elif(contig == 'GL000204.1'):             # <<<<<<<<<<<<<<
 *         return 55
 *     elif(contig == 'GL000228.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000204_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":936
 *         return 72
 *     elif(contig == 'GL000204.1'):
 *         return 55             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000228.1'):
 *         return 60
 */
    __pyx_r = 55;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":937
 *     elif(contig == 'GL000204.1'):
 *         return 55
 *     elif(contig == 'GL000228.1'):             # <<<<<<<<<<<<<<
 *         return 60
 *     elif(contig == 'GL000198.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000228_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":938
 *         return 55
 *     elif(contig == 'GL000228.1'):
 *         return 60             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000198.1'):
 *         return 56
 */
    __pyx_r = 60;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":939
 *     elif(contig == 'GL000228.1'):
 *         return 60
 *     elif(contig == 'GL000198.1'):             # <<<<<<<<<<<<<<
 *         return 56
 *     elif(contig == 'GL000241.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000198_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":940
 *         return 60
 *     elif(contig == 'GL000198.1'):
 *         return 56             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000241.1'):
 *         return 49
 */
    __pyx_r = 56;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":941
 *     elif(contig == 'GL000198.1'):
 *         return 56
 *     elif(contig == 'GL000241.1'):             # <<<<<<<<<<<<<<
 *         return 49
 *     elif(contig == 'GL000208.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000241_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":942
 *         return 56
 *     elif(contig == 'GL000241.1'):
 *         return 49             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000208.1'):
 *         return 57
 */
    __pyx_r = 49;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":943
 *     elif(contig == 'GL000241.1'):
 *         return 49
 *     elif(contig == 'GL000208.1'):             # <<<<<<<<<<<<<<
 *         return 57
 *     elif(contig == 'GL000212.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000208_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":944
 *         return 49
 *     elif(contig == 'GL000208.1'):
 *         return 57             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000212.1'):
 *         return 77
 */
    __pyx_r = 57;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":945
 *     elif(contig == 'GL000208.1'):
 *         return 57
 *     elif(contig == 'GL000212.1'):             # <<<<<<<<<<<<<<
 *         return 77
 *     elif(contig == 'GL000193.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000212_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":946
 *         return 57
 *     elif(contig == 'GL000212.1'):
 *         return 77             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000193.1'):
 *         return 80
 */
    __pyx_r = 77;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":947
 *     elif(contig == 'GL000212.1'):
 *         return 77
 *     elif(contig == 'GL000193.1'):             # <<<<<<<<<<<<<<
 *         return 80
 *     elif(contig == 'GL000210.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000193_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":948
 *         return 77
 *     elif(contig == 'GL000193.1'):
 *         return 80             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000210.1'):
 *         return 29
 */
    __pyx_r = 80;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":949
 *     elif(contig == 'GL000193.1'):
 *         return 80
 *     elif(contig == 'GL000210.1'):             # <<<<<<<<<<<<<<
 *         return 29
 *     elif(contig == 'GL000239.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000210_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":950
 *         return 80
 *     elif(contig == 'GL000210.1'):
 *         return 29             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000239.1'):
 *         return 30
 */
    __pyx_r = 29;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":951
 *     elif(contig == 'GL000210.1'):
 *         return 29
 *     elif(contig == 'GL000239.1'):             # <<<<<<<<<<<<<<
 *         return 30
 *     elif(contig == 'GL000191.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000239_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":952
 *         return 29
 *     elif(contig == 'GL000239.1'):
 *         return 30             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000191.1'):
 *         return 58
 */
    __pyx_r = 30;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":953
 *     elif(contig == 'GL000239.1'):
 *         return 30
 *     elif(contig == 'GL000191.1'):             # <<<<<<<<<<<<<<
 *         return 58
 *     elif(contig == 'GL000213.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000191_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":954
 *         return 30
 *     elif(contig == 'GL000191.1'):
 *         return 58             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000213.1'):
 *         return 66
 */
    __pyx_r = 58;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":955
 *     elif(contig == 'GL000191.1'):
 *         return 58
 *     elif(contig == 'GL000213.1'):             # <<<<<<<<<<<<<<
 *         return 66
 *     elif(contig == 'GL000220.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000213_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":956
 *         return 58
 *     elif(contig == 'GL000213.1'):
 *         return 66             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000220.1'):
 *         return 65
 */
    __pyx_r = 66;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":957
 *     elif(contig == 'GL000213.1'):
 *         return 66
 *     elif(contig == 'GL000220.1'):             # <<<<<<<<<<<<<<
 *         return 65
 *     elif(contig == 'GL000238.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000220_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":958
 *         return 66
 *     elif(contig == 'GL000220.1'):
 *         return 65             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000238.1'):
 *         return 42
 */
    __pyx_r = 65;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":959
 *     elif(contig == 'GL000220.1'):
 *         return 65
 *     elif(contig == 'GL000238.1'):             # <<<<<<<<<<<<<<
 *         return 42
 *     elif(contig == 'GL000214.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000238_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":960
 *         return 65
 *     elif(contig == 'GL000238.1'):
 *         return 42             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000214.1'):
 *         return 61
 */
    __pyx_r = 42;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":961
 *     elif(contig == 'GL000238.1'):
 *         return 42
 *     elif(contig == 'GL000214.1'):             # <<<<<<<<<<<<<<
 *         return 61
 *     elif(contig == 'GL000194.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000214_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 961; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":962
 *         return 42
 *     elif(contig == 'GL000214.1'):
 *         return 61             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000194.1'):
 *         return 81
 */
    __pyx_r = 61;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":963
 *     elif(contig == 'GL000214.1'):
 *         return 61
 *     elif(contig == 'GL000194.1'):             # <<<<<<<<<<<<<<
 *         return 81
 *     elif(contig == 'GL000216.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000194_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":964
 *         return 61
 *     elif(contig == 'GL000194.1'):
 *         return 81             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000216.1'):
 *         return 70
 */
    __pyx_r = 81;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":965
 *     elif(contig == 'GL000194.1'):
 *         return 81
 *     elif(contig == 'GL000216.1'):             # <<<<<<<<<<<<<<
 *         return 70
 *     elif(contig == 'GL000237.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000216_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":966
 *         return 81
 *     elif(contig == 'GL000216.1'):
 *         return 70             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000237.1'):
 *         return 53
 */
    __pyx_r = 70;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":967
 *     elif(contig == 'GL000216.1'):
 *         return 70
 *     elif(contig == 'GL000237.1'):             # <<<<<<<<<<<<<<
 *         return 53
 *     elif(contig == 'GL000243.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000237_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":968
 *         return 70
 *     elif(contig == 'GL000237.1'):
 *         return 53             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000243.1'):
 *         return 50
 */
    __pyx_r = 53;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":969
 *     elif(contig == 'GL000237.1'):
 *         return 53
 *     elif(contig == 'GL000243.1'):             # <<<<<<<<<<<<<<
 *         return 50
 *     elif(contig == 'GL000234.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000243_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":970
 *         return 53
 *     elif(contig == 'GL000243.1'):
 *         return 50             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000234.1'):
 *         return 44
 */
    __pyx_r = 50;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":971
 *     elif(contig == 'GL000243.1'):
 *         return 50
 *     elif(contig == 'GL000234.1'):             # <<<<<<<<<<<<<<
 *         return 44
 *     elif(contig == '20'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000234_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":972
 *         return 50
 *     elif(contig == 'GL000234.1'):
 *         return 44             # <<<<<<<<<<<<<<
 *     elif(contig == '20'):
 *         return 19
 */
    __pyx_r = 44;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":973
 *     elif(contig == 'GL000234.1'):
 *         return 44
 *     elif(contig == '20'):             # <<<<<<<<<<<<<<
 *         return 19
 *     elif(contig == '21'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_20, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":974
 *         return 44
 *     elif(contig == '20'):
 *         return 19             # <<<<<<<<<<<<<<
 *     elif(contig == '21'):
 *         return 20
 */
    __pyx_r = 19;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":975
 *     elif(contig == '20'):
 *         return 19
 *     elif(contig == '21'):             # <<<<<<<<<<<<<<
 *         return 20
 *     elif(contig == '22'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_21, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":976
 *         return 19
 *     elif(contig == '21'):
 *         return 20             # <<<<<<<<<<<<<<
 *     elif(contig == '22'):
 *         return 21
 */
    __pyx_r = 20;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":977
 *     elif(contig == '21'):
 *         return 20
 *     elif(contig == '22'):             # <<<<<<<<<<<<<<
 *         return 21
 *     elif(contig == 'GL000215.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_22, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":978
 *         return 20
 *     elif(contig == '22'):
 *         return 21             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000215.1'):
 *         return 71
 */
    __pyx_r = 21;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":979
 *     elif(contig == '22'):
 *         return 21
 *     elif(contig == 'GL000215.1'):             # <<<<<<<<<<<<<<
 *         return 71
 *     elif(contig == 'GL000196.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000215_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":980
 *         return 21
 *     elif(contig == 'GL000215.1'):
 *         return 71             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000196.1'):
 *         return 39
 */
    __pyx_r = 71;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":981
 *     elif(contig == 'GL000215.1'):
 *         return 71
 *     elif(contig == 'GL000196.1'):             # <<<<<<<<<<<<<<
 *         return 39
 *     elif(contig == 'GL000227.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000196_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":982
 *         return 71
 *     elif(contig == 'GL000196.1'):
 *         return 39             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000227.1'):
 *         return 59
 */
    __pyx_r = 39;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":983
 *     elif(contig == 'GL000196.1'):
 *         return 39
 *     elif(contig == 'GL000227.1'):             # <<<<<<<<<<<<<<
 *         return 59
 *     elif(contig == 'GL000248.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000227_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":984
 *         return 39
 *     elif(contig == 'GL000227.1'):
 *         return 59             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000248.1'):
 *         return 40
 */
    __pyx_r = 59;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":985
 *     elif(contig == 'GL000227.1'):
 *         return 59
 *     elif(contig == 'GL000248.1'):             # <<<<<<<<<<<<<<
 *         return 40
 *     elif(contig == 'GL000197.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000248_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":986
 *         return 59
 *     elif(contig == 'GL000248.1'):
 *         return 40             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000197.1'):
 *         return 35
 */
    __pyx_r = 40;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":987
 *     elif(contig == 'GL000248.1'):
 *         return 40
 *     elif(contig == 'GL000197.1'):             # <<<<<<<<<<<<<<
 *         return 35
 *     elif(contig == 'GL000235.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000197_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 987; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":988
 *         return 40
 *     elif(contig == 'GL000197.1'):
 *         return 35             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000235.1'):
 *         return 31
 */
    __pyx_r = 35;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":989
 *     elif(contig == 'GL000197.1'):
 *         return 35
 *     elif(contig == 'GL000235.1'):             # <<<<<<<<<<<<<<
 *         return 31
 *     elif(contig == 'GL000249.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000235_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":990
 *         return 35
 *     elif(contig == 'GL000235.1'):
 *         return 31             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000249.1'):
 *         return 38
 */
    __pyx_r = 31;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":991
 *     elif(contig == 'GL000235.1'):
 *         return 31
 *     elif(contig == 'GL000249.1'):             # <<<<<<<<<<<<<<
 *         return 38
 *     elif(contig == '1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000249_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":992
 *         return 31
 *     elif(contig == 'GL000249.1'):
 *         return 38             # <<<<<<<<<<<<<<
 *     elif(contig == '1'):
 *         return 0
 */
    __pyx_r = 38;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":993
 *     elif(contig == 'GL000249.1'):
 *         return 38
 *     elif(contig == '1'):             # <<<<<<<<<<<<<<
 *         return 0
 *     elif(contig == '3'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":994
 *         return 38
 *     elif(contig == '1'):
 *         return 0             # <<<<<<<<<<<<<<
 *     elif(contig == '3'):
 *         return 2
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":995
 *     elif(contig == '1'):
 *         return 0
 *     elif(contig == '3'):             # <<<<<<<<<<<<<<
 *         return 2
 *     elif(contig == '2'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_3, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":996
 *         return 0
 *     elif(contig == '3'):
 *         return 2             # <<<<<<<<<<<<<<
 *     elif(contig == '2'):
 *         return 1
 */
    __pyx_r = 2;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":997
 *     elif(contig == '3'):
 *         return 2
 *     elif(contig == '2'):             # <<<<<<<<<<<<<<
 *         return 1
 *     elif(contig == '5'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":998
 *         return 2
 *     elif(contig == '2'):
 *         return 1             # <<<<<<<<<<<<<<
 *     elif(contig == '5'):
 *         return 4
 */
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":999
 *     elif(contig == '2'):
 *         return 1
 *     elif(contig == '5'):             # <<<<<<<<<<<<<<
 *         return 4
 *     elif(contig == '4'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_5, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1000
 *         return 1
 *     elif(contig == '5'):
 *         return 4             # <<<<<<<<<<<<<<
 *     elif(contig == '4'):
 *         return 3
 */
    __pyx_r = 4;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1001
 *     elif(contig == '5'):
 *         return 4
 *     elif(contig == '4'):             # <<<<<<<<<<<<<<
 *         return 3
 *     elif(contig == '7'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_4, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1002
 *         return 4
 *     elif(contig == '4'):
 *         return 3             # <<<<<<<<<<<<<<
 *     elif(contig == '7'):
 *         return 6
 */
    __pyx_r = 3;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1003
 *     elif(contig == '4'):
 *         return 3
 *     elif(contig == '7'):             # <<<<<<<<<<<<<<
 *         return 6
 *     elif(contig == '6'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_7, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1004
 *         return 3
 *     elif(contig == '7'):
 *         return 6             # <<<<<<<<<<<<<<
 *     elif(contig == '6'):
 *         return 5
 */
    __pyx_r = 6;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1005
 *     elif(contig == '7'):
 *         return 6
 *     elif(contig == '6'):             # <<<<<<<<<<<<<<
 *         return 5
 *     elif(contig == '9'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_6, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1006
 *         return 6
 *     elif(contig == '6'):
 *         return 5             # <<<<<<<<<<<<<<
 *     elif(contig == '9'):
 *         return 8
 */
    __pyx_r = 5;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1007
 *     elif(contig == '6'):
 *         return 5
 *     elif(contig == '9'):             # <<<<<<<<<<<<<<
 *         return 8
 *     elif(contig == '8'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_9, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1008
 *         return 5
 *     elif(contig == '9'):
 *         return 8             # <<<<<<<<<<<<<<
 *     elif(contig == '8'):
 *         return 7
 */
    __pyx_r = 8;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1009
 *     elif(contig == '9'):
 *         return 8
 *     elif(contig == '8'):             # <<<<<<<<<<<<<<
 *         return 7
 *     elif(contig == 'GL000199.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_8, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1009; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1010
 *         return 8
 *     elif(contig == '8'):
 *         return 7             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000199.1'):
 *         return 68
 */
    __pyx_r = 7;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1011
 *     elif(contig == '8'):
 *         return 7
 *     elif(contig == 'GL000199.1'):             # <<<<<<<<<<<<<<
 *         return 68
 *     elif(contig == 'GL000232.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000199_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1012
 *         return 7
 *     elif(contig == 'GL000199.1'):
 *         return 68             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000232.1'):
 *         return 45
 */
    __pyx_r = 68;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1013
 *     elif(contig == 'GL000199.1'):
 *         return 68
 *     elif(contig == 'GL000232.1'):             # <<<<<<<<<<<<<<
 *         return 45
 *     elif(contig == 'GL000242.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000232_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1014
 *         return 68
 *     elif(contig == 'GL000232.1'):
 *         return 45             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000242.1'):
 *         return 51
 */
    __pyx_r = 45;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1015
 *     elif(contig == 'GL000232.1'):
 *         return 45
 *     elif(contig == 'GL000242.1'):             # <<<<<<<<<<<<<<
 *         return 51
 *     elif(contig == 'GL000236.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000242_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1016
 *         return 45
 *     elif(contig == 'GL000242.1'):
 *         return 51             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000236.1'):
 *         return 48
 */
    __pyx_r = 51;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1017
 *     elif(contig == 'GL000242.1'):
 *         return 51
 *     elif(contig == 'GL000236.1'):             # <<<<<<<<<<<<<<
 *         return 48
 *     elif(contig == 'GL000209.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000236_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1018
 *         return 51
 *     elif(contig == 'GL000236.1'):
 *         return 48             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000209.1'):
 *         return 63
 */
    __pyx_r = 48;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1019
 *     elif(contig == 'GL000236.1'):
 *         return 48
 *     elif(contig == 'GL000209.1'):             # <<<<<<<<<<<<<<
 *         return 63
 *     elif(contig == 'GL000246.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000209_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1019; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1020
 *         return 48
 *     elif(contig == 'GL000209.1'):
 *         return 63             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000246.1'):
 *         return 37
 */
    __pyx_r = 63;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1021
 *     elif(contig == 'GL000209.1'):
 *         return 63
 *     elif(contig == 'GL000246.1'):             # <<<<<<<<<<<<<<
 *         return 37
 *     elif(contig == 'GL000244.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000246_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1022
 *         return 63
 *     elif(contig == 'GL000246.1'):
 *         return 37             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000244.1'):
 *         return 41
 */
    __pyx_r = 37;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1023
 *     elif(contig == 'GL000246.1'):
 *         return 37
 *     elif(contig == 'GL000244.1'):             # <<<<<<<<<<<<<<
 *         return 41
 *     elif(contig == 'GL000221.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000244_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1023; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1024
 *         return 37
 *     elif(contig == 'GL000244.1'):
 *         return 41             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000221.1'):
 *         return 62
 */
    __pyx_r = 41;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1025
 *     elif(contig == 'GL000244.1'):
 *         return 41
 *     elif(contig == 'GL000221.1'):             # <<<<<<<<<<<<<<
 *         return 62
 *     elif(contig == 'GL000245.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000221_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1025; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1026
 *         return 41
 *     elif(contig == 'GL000221.1'):
 *         return 62             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000245.1'):
 *         return 34
 */
    __pyx_r = 62;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1027
 *     elif(contig == 'GL000221.1'):
 *         return 62
 *     elif(contig == 'GL000245.1'):             # <<<<<<<<<<<<<<
 *         return 34
 *     elif(contig == 'GL000203.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000245_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1027; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1028
 *         return 62
 *     elif(contig == 'GL000245.1'):
 *         return 34             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000203.1'):
 *         return 36
 */
    __pyx_r = 34;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1029
 *     elif(contig == 'GL000245.1'):
 *         return 34
 *     elif(contig == 'GL000203.1'):             # <<<<<<<<<<<<<<
 *         return 36
 *     elif(contig == 'GL000195.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000203_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1030
 *         return 34
 *     elif(contig == 'GL000203.1'):
 *         return 36             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000195.1'):
 *         return 76
 */
    __pyx_r = 36;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1031
 *     elif(contig == 'GL000203.1'):
 *         return 36
 *     elif(contig == 'GL000195.1'):             # <<<<<<<<<<<<<<
 *         return 76
 *     elif(contig == 'GL000229.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000195_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1031; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1032
 *         return 36
 *     elif(contig == 'GL000195.1'):
 *         return 76             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000229.1'):
 *         return 27
 */
    __pyx_r = 76;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1033
 *     elif(contig == 'GL000195.1'):
 *         return 76
 *     elif(contig == 'GL000229.1'):             # <<<<<<<<<<<<<<
 *         return 27
 *     elif(contig == 'GL000226.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000229_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1034
 *         return 76
 *     elif(contig == 'GL000229.1'):
 *         return 27             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000226.1'):
 *         return 26
 */
    __pyx_r = 27;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1035
 *     elif(contig == 'GL000229.1'):
 *         return 27
 *     elif(contig == 'GL000226.1'):             # <<<<<<<<<<<<<<
 *         return 26
 *     elif(contig == 'GL000201.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000226_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1036
 *         return 27
 *     elif(contig == 'GL000226.1'):
 *         return 26             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000201.1'):
 *         return 32
 */
    __pyx_r = 26;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1037
 *     elif(contig == 'GL000226.1'):
 *         return 26
 *     elif(contig == 'GL000201.1'):             # <<<<<<<<<<<<<<
 *         return 32
 *     elif(contig == 'GL000247.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000201_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1037; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1038
 *         return 26
 *     elif(contig == 'GL000201.1'):
 *         return 32             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000247.1'):
 *         return 33
 */
    __pyx_r = 32;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1039
 *     elif(contig == 'GL000201.1'):
 *         return 32
 *     elif(contig == 'GL000247.1'):             # <<<<<<<<<<<<<<
 *         return 33
 *     elif(contig == 'Y'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000247_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1040
 *         return 32
 *     elif(contig == 'GL000247.1'):
 *         return 33             # <<<<<<<<<<<<<<
 *     elif(contig == 'Y'):
 *         return 23
 */
    __pyx_r = 33;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1041
 *     elif(contig == 'GL000247.1'):
 *         return 33
 *     elif(contig == 'Y'):             # <<<<<<<<<<<<<<
 *         return 23
 *     elif(contig == 'X'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_n_s_Y, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1042
 *         return 33
 *     elif(contig == 'Y'):
 *         return 23             # <<<<<<<<<<<<<<
 *     elif(contig == 'X'):
 *         return 22
 */
    __pyx_r = 23;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1043
 *     elif(contig == 'Y'):
 *         return 23
 *     elif(contig == 'X'):             # <<<<<<<<<<<<<<
 *         return 22
 *     elif(contig == 'GL000222.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_n_s_X, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1044
 *         return 23
 *     elif(contig == 'X'):
 *         return 22             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000222.1'):
 *         return 78
 */
    __pyx_r = 22;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1045
 *     elif(contig == 'X'):
 *         return 22
 *     elif(contig == 'GL000222.1'):             # <<<<<<<<<<<<<<
 *         return 78
 *     elif(contig == 'GL000202.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000222_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1045; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1046
 *         return 22
 *     elif(contig == 'GL000222.1'):
 *         return 78             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000202.1'):
 *         return 43
 */
    __pyx_r = 78;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1047
 *     elif(contig == 'GL000222.1'):
 *         return 78
 *     elif(contig == 'GL000202.1'):             # <<<<<<<<<<<<<<
 *         return 43
 *     elif(contig == 'GL000211.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000202_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1048
 *         return 78
 *     elif(contig == 'GL000202.1'):
 *         return 43             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000211.1'):
 *         return 67
 */
    __pyx_r = 43;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1049
 *     elif(contig == 'GL000202.1'):
 *         return 43
 *     elif(contig == 'GL000211.1'):             # <<<<<<<<<<<<<<
 *         return 67
 *     elif(contig == '11'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000211_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1050
 *         return 43
 *     elif(contig == 'GL000211.1'):
 *         return 67             # <<<<<<<<<<<<<<
 *     elif(contig == '11'):
 *         return 10
 */
    __pyx_r = 67;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1051
 *     elif(contig == 'GL000211.1'):
 *         return 67
 *     elif(contig == '11'):             # <<<<<<<<<<<<<<
 *         return 10
 *     elif(contig == '10'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_11, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1052
 *         return 67
 *     elif(contig == '11'):
 *         return 10             # <<<<<<<<<<<<<<
 *     elif(contig == '10'):
 *         return 9
 */
    __pyx_r = 10;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1053
 *     elif(contig == '11'):
 *         return 10
 *     elif(contig == '10'):             # <<<<<<<<<<<<<<
 *         return 9
 *     elif(contig == '13'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_10, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1054
 *         return 10
 *     elif(contig == '10'):
 *         return 9             # <<<<<<<<<<<<<<
 *     elif(contig == '13'):
 *         return 12
 */
    __pyx_r = 9;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1055
 *     elif(contig == '10'):
 *         return 9
 *     elif(contig == '13'):             # <<<<<<<<<<<<<<
 *         return 12
 *     elif(contig == '12'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_13, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1056
 *         return 9
 *     elif(contig == '13'):
 *         return 12             # <<<<<<<<<<<<<<
 *     elif(contig == '12'):
 *         return 11
 */
    __pyx_r = 12;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1057
 *     elif(contig == '13'):
 *         return 12
 *     elif(contig == '12'):             # <<<<<<<<<<<<<<
 *         return 11
 *     elif(contig == '15'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_12, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1058
 *         return 12
 *     elif(contig == '12'):
 *         return 11             # <<<<<<<<<<<<<<
 *     elif(contig == '15'):
 *         return 14
 */
    __pyx_r = 11;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1059
 *     elif(contig == '12'):
 *         return 11
 *     elif(contig == '15'):             # <<<<<<<<<<<<<<
 *         return 14
 *     elif(contig == '14'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_15, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1060
 *         return 11
 *     elif(contig == '15'):
 *         return 14             # <<<<<<<<<<<<<<
 *     elif(contig == '14'):
 *         return 13
 */
    __pyx_r = 14;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1061
 *     elif(contig == '15'):
 *         return 14
 *     elif(contig == '14'):             # <<<<<<<<<<<<<<
 *         return 13
 *     elif(contig == '17'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_14, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1061; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1062
 *         return 14
 *     elif(contig == '14'):
 *         return 13             # <<<<<<<<<<<<<<
 *     elif(contig == '17'):
 *         return 16
 */
    __pyx_r = 13;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1063
 *     elif(contig == '14'):
 *         return 13
 *     elif(contig == '17'):             # <<<<<<<<<<<<<<
 *         return 16
 *     elif(contig == '16'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_17, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1064
 *         return 13
 *     elif(contig == '17'):
 *         return 16             # <<<<<<<<<<<<<<
 *     elif(contig == '16'):
 *         return 15
 */
    __pyx_r = 16;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1065
 *     elif(contig == '17'):
 *         return 16
 *     elif(contig == '16'):             # <<<<<<<<<<<<<<
 *         return 15
 *     elif(contig == '19'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_16, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1065; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1066
 *         return 16
 *     elif(contig == '16'):
 *         return 15             # <<<<<<<<<<<<<<
 *     elif(contig == '19'):
 *         return 18
 */
    __pyx_r = 15;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1067
 *     elif(contig == '16'):
 *         return 15
 *     elif(contig == '19'):             # <<<<<<<<<<<<<<
 *         return 18
 *     elif(contig == '18'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_19, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1068
 *         return 15
 *     elif(contig == '19'):
 *         return 18             # <<<<<<<<<<<<<<
 *     elif(contig == '18'):
 *         return 17
 */
    __pyx_r = 18;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1069
 *     elif(contig == '19'):
 *         return 18
 *     elif(contig == '18'):             # <<<<<<<<<<<<<<
 *         return 17
 *     elif(contig == 'GL000231.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_18, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1069; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1070
 *         return 18
 *     elif(contig == '18'):
 *         return 17             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000231.1'):
 *         return 28
 */
    __pyx_r = 17;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1071
 *     elif(contig == '18'):
 *         return 17
 *     elif(contig == 'GL000231.1'):             # <<<<<<<<<<<<<<
 *         return 28
 *     elif(contig == 'GL000233.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000231_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1072
 *         return 17
 *     elif(contig == 'GL000231.1'):
 *         return 28             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000233.1'):
 *         return 54
 */
    __pyx_r = 28;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1073
 *     elif(contig == 'GL000231.1'):
 *         return 28
 *     elif(contig == 'GL000233.1'):             # <<<<<<<<<<<<<<
 *         return 54
 *     elif(contig == 'GL000240.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000233_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1074
 *         return 28
 *     elif(contig == 'GL000233.1'):
 *         return 54             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000240.1'):
 *         return 47
 */
    __pyx_r = 54;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1075
 *     elif(contig == 'GL000233.1'):
 *         return 54
 *     elif(contig == 'GL000240.1'):             # <<<<<<<<<<<<<<
 *         return 47
 *     elif(contig == 'GL000200.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000240_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1076
 *         return 54
 *     elif(contig == 'GL000240.1'):
 *         return 47             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000200.1'):
 *         return 79
 */
    __pyx_r = 47;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1077
 *     elif(contig == 'GL000240.1'):
 *         return 47
 *     elif(contig == 'GL000200.1'):             # <<<<<<<<<<<<<<
 *         return 79
 *     elif(contig == 'GL000230.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000200_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1078
 *         return 47
 *     elif(contig == 'GL000200.1'):
 *         return 79             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000230.1'):
 *         return 52
 */
    __pyx_r = 79;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1079
 *     elif(contig == 'GL000200.1'):
 *         return 79
 *     elif(contig == 'GL000230.1'):             # <<<<<<<<<<<<<<
 *         return 52
 *     elif(contig == 'GL000217.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000230_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1080
 *         return 79
 *     elif(contig == 'GL000230.1'):
 *         return 52             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000217.1'):
 *         return 69
 */
    __pyx_r = 52;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1081
 *     elif(contig == 'GL000230.1'):
 *         return 52
 *     elif(contig == 'GL000217.1'):             # <<<<<<<<<<<<<<
 *         return 69
 *     elif(contig == 'MT'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000217_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1081; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1082
 *         return 52
 *     elif(contig == 'GL000217.1'):
 *         return 69             # <<<<<<<<<<<<<<
 *     elif(contig == 'MT'):
 *         return 24
 */
    __pyx_r = 69;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1083
 *     elif(contig == 'GL000217.1'):
 *         return 69
 *     elif(contig == 'MT'):             # <<<<<<<<<<<<<<
 *         return 24
 *     elif(contig == 'GL000223.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_n_s_MT, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1084
 *         return 69
 *     elif(contig == 'MT'):
 *         return 24             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000223.1'):
 *         return 75
 */
    __pyx_r = 24;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1085
 *     elif(contig == 'MT'):
 *         return 24
 *     elif(contig == 'GL000223.1'):             # <<<<<<<<<<<<<<
 *         return 75
 *     elif(contig == 'GL000225.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000223_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1086
 *         return 24
 *     elif(contig == 'GL000223.1'):
 *         return 75             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000225.1'):
 *         return 82
 */
    __pyx_r = 75;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1087
 *     elif(contig == 'GL000223.1'):
 *         return 75
 *     elif(contig == 'GL000225.1'):             # <<<<<<<<<<<<<<
 *         return 82
 *     elif(contig == 'GL000206.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000225_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1088
 *         return 75
 *     elif(contig == 'GL000225.1'):
 *         return 82             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000206.1'):
 *         return 46
 */
    __pyx_r = 82;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1089
 *     elif(contig == 'GL000225.1'):
 *         return 82
 *     elif(contig == 'GL000206.1'):             # <<<<<<<<<<<<<<
 *         return 46
 *     elif(contig == 'GL000218.1'):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000206_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1090
 *         return 82
 *     elif(contig == 'GL000206.1'):
 *         return 46             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000218.1'):
 *         return 64
 */
    __pyx_r = 46;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1091
 *     elif(contig == 'GL000206.1'):
 *         return 46
 *     elif(contig == 'GL000218.1'):             # <<<<<<<<<<<<<<
 *         return 64
 *     elif(contig == 'GL000207.1'):
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000218_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1091; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "utilBMF/Inliners.pxd":1092
 *         return 46
 *     elif(contig == 'GL000218.1'):
 *         return 64             # <<<<<<<<<<<<<<
 *     elif(contig == 'GL000207.1'):
 *         return 25
 */
    __pyx_r = 64;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":1093
 *     elif(contig == 'GL000218.1'):
 *         return 64
 *     elif(contig == 'GL000207.1'):             # <<<<<<<<<<<<<<
 *         return 25
 *     else:
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_contig, __pyx_kp_s_GL000207_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1093; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "utilBMF/Inliners.pxd":1094
 *         return 64
 *     elif(contig == 'GL000207.1'):
 *         return 25             # <<<<<<<<<<<<<<
 *     else:
 *         return 83
 */
    __pyx_r = 25;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "utilBMF/Inliners.pxd":1096
 *         return 25
 *     else:
 *         return 83             # <<<<<<<<<<<<<<
 */
    __pyx_r = 83;
    goto __pyx_L0;
  }

  /* "utilBMF/Inliners.pxd":928
 * 
 * 
 * cdef inline char ChrToRefIDInline(cystr contig):             # <<<<<<<<<<<<<<
 *     if(contig == 'GL000224.1'):
 *         return 74
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("utilBMF.Inliners.ChrToRefIDInline", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "utilBMF/MergePairedAlignments.pxd":129
 * cdef object oagtag, oig0, oig1
 * 
 * cdef inline bint LayoutsOverlap(Layout_t Layout1, Layout_t Layout2):             # <<<<<<<<<<<<<<
 *     cdef int end1, end2, start1, start2
 *     end1 = Layout1.getLastAlignedRefPos()
 */

static CYTHON_INLINE int __pyx_f_7utilBMF_21MergePairedAlignments_LayoutsOverlap(__pyx_t_7utilBMF_21MergePairedAlignments_Layout_t __pyx_v_Layout1, __pyx_t_7utilBMF_21MergePairedAlignments_Layout_t __pyx_v_Layout2) {
  int __pyx_v_end1;
  int __pyx_v_end2;
  int __pyx_v_start1;
  int __pyx_v_start2;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("LayoutsOverlap", 0);

  /* "utilBMF/MergePairedAlignments.pxd":131
 * cdef inline bint LayoutsOverlap(Layout_t Layout1, Layout_t Layout2):
 *     cdef int end1, end2, start1, start2
 *     end1 = Layout1.getLastAlignedRefPos()             # <<<<<<<<<<<<<<
 *     end2 = Layout2.getLastAlignedRefPos()
 *     start1 = Layout1.getFirstAlignedRefPos()
 */
  __pyx_v_end1 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_Layout1->__pyx_vtab)->getLastAlignedRefPos(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_Layout1));

  /* "utilBMF/MergePairedAlignments.pxd":132
 *     cdef int end1, end2, start1, start2
 *     end1 = Layout1.getLastAlignedRefPos()
 *     end2 = Layout2.getLastAlignedRefPos()             # <<<<<<<<<<<<<<
 *     start1 = Layout1.getFirstAlignedRefPos()
 *     start2 = Layout2.getFirstAlignedRefPos()
 */
  __pyx_v_end2 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_Layout2->__pyx_vtab)->getLastAlignedRefPos(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_Layout2));

  /* "utilBMF/MergePairedAlignments.pxd":133
 *     end1 = Layout1.getLastAlignedRefPos()
 *     end2 = Layout2.getLastAlignedRefPos()
 *     start1 = Layout1.getFirstAlignedRefPos()             # <<<<<<<<<<<<<<
 *     start2 = Layout2.getFirstAlignedRefPos()
 *     if(start2 > end1 or start1 > end2):
 */
  __pyx_v_start1 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_Layout1->__pyx_vtab)->getFirstAlignedRefPos(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_Layout1));

  /* "utilBMF/MergePairedAlignments.pxd":134
 *     end2 = Layout2.getLastAlignedRefPos()
 *     start1 = Layout1.getFirstAlignedRefPos()
 *     start2 = Layout2.getFirstAlignedRefPos()             # <<<<<<<<<<<<<<
 *     if(start2 > end1 or start1 > end2):
 *         return False
 */
  __pyx_v_start2 = ((struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_Layout2->__pyx_vtab)->getFirstAlignedRefPos(((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)__pyx_v_Layout2));

  /* "utilBMF/MergePairedAlignments.pxd":135
 *     start1 = Layout1.getFirstAlignedRefPos()
 *     start2 = Layout2.getFirstAlignedRefPos()
 *     if(start2 > end1 or start1 > end2):             # <<<<<<<<<<<<<<
 *         return False
 *     else:
 */
  __pyx_t_2 = ((__pyx_v_start2 > __pyx_v_end1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_start1 > __pyx_v_end2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "utilBMF/MergePairedAlignments.pxd":136
 *     start2 = Layout2.getFirstAlignedRefPos()
 *     if(start2 > end1 or start1 > end2):
 *         return False             # <<<<<<<<<<<<<<
 *     else:
 *         return True
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "utilBMF/MergePairedAlignments.pxd":138
 *         return False
 *     else:
 *         return True             # <<<<<<<<<<<<<<
 */
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "utilBMF/MergePairedAlignments.pxd":129
 * cdef object oagtag, oig0, oig1
 * 
 * cdef inline bint LayoutsOverlap(Layout_t Layout1, Layout_t Layout2):             # <<<<<<<<<<<<<<
 *     cdef int end1, end2, start1, start2
 *     end1 = Layout1.getLastAlignedRefPos()
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py_ArrayLayoutPos")
 * cdef ArrayLayoutPos __pyx_convert__from_py_ArrayLayoutPos(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef ArrayLayoutPos result
 *     if not PyMapping_Check(obj):
 */

static struct ArrayLayoutPos __pyx_convert__from_py_ArrayLayoutPos(PyObject *__pyx_v_obj) {
  struct ArrayLayoutPos __pyx_v_result;
  PyObject *__pyx_v_value = NULL;
  struct ArrayLayoutPos __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  uint16_t __pyx_t_10;
  char __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert__from_py_ArrayLayoutPos", 0);

  /* "FromPyStructUtility":13
 * cdef ArrayLayoutPos __pyx_convert__from_py_ArrayLayoutPos(obj) except *:
 *     cdef ArrayLayoutPos result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 */
  __pyx_t_1 = ((!(PyMapping_Check(__pyx_v_obj) != 0)) != 0);
  if (__pyx_t_1) {

    /* "FromPyStructUtility":14
 *     cdef ArrayLayoutPos result
 *     if not PyMapping_Check(obj):
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __pyx_t_2 = PyErr_Format(__pyx_builtin_TypeError, __pyx_k_Expected_16s_got_200s, __pyx_k_a_mapping, Py_TYPE(__pyx_v_obj)->tp_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['pos']
 *     except KeyError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":17
 * 
 *     try:
 *         value = obj['pos']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'pos'")
 */
      __pyx_t_2 = PyObject_GetItem(__pyx_v_obj, __pyx_n_s_pos); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L4_error;};
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_value = __pyx_t_2;
      __pyx_t_2 = 0;
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L11_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":18
 *     try:
 *         value = obj['pos']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'pos'")
 *     result.pos = value
 */
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_ArrayLayoutPos", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "FromPyStructUtility":19
 *         value = obj['pos']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'pos'")             # <<<<<<<<<<<<<<
 *     result.pos = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L11_try_end:;
  }

  /* "FromPyStructUtility":20
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'pos'")
 *     result.pos = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['readPos']
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result.pos = __pyx_t_6;

  /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'pos'")
 *     result.pos = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['readPos']
 *     except KeyError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":22
 *     result.pos = value
 *     try:
 *         value = obj['readPos']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'readPos'")
 */
      __pyx_t_8 = PyObject_GetItem(__pyx_v_obj, __pyx_n_s_readPos); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L14_error;};
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L21_try_end;
    __pyx_L14_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "FromPyStructUtility":23
 *     try:
 *         value = obj['readPos']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'readPos'")
 *     result.readPos = value
 */
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_ArrayLayoutPos", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);

      /* "FromPyStructUtility":24
 *         value = obj['readPos']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'readPos'")             # <<<<<<<<<<<<<<
 *     result.readPos = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
    }
    goto __pyx_L16_except_error;
    __pyx_L16_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L21_try_end:;
  }

  /* "FromPyStructUtility":25
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'readPos'")
 *     result.readPos = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['quality']
 */
  __pyx_t_10 = __Pyx_PyInt_As_uint16_t(__pyx_v_value); if (unlikely((__pyx_t_10 == (uint16_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result.readPos = __pyx_t_10;

  /* "FromPyStructUtility":26
 *         raise ValueError("No value specified for struct attribute 'readPos'")
 *     result.readPos = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['quality']
 *     except KeyError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":27
 *     result.readPos = value
 *     try:
 *         value = obj['quality']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'quality'")
 */
      __pyx_t_2 = PyObject_GetItem(__pyx_v_obj, __pyx_n_s_quality); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L24_error;};
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_2);
      __pyx_t_2 = 0;
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L31_try_end;
    __pyx_L24_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":28
 *     try:
 *         value = obj['quality']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'quality'")
 *     result.quality = value
 */
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_ArrayLayoutPos", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L26_except_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "FromPyStructUtility":29
 *         value = obj['quality']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'quality'")             # <<<<<<<<<<<<<<
 *     result.quality = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L26_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L26_except_error;}
    }
    goto __pyx_L26_except_error;
    __pyx_L26_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L31_try_end:;
  }

  /* "FromPyStructUtility":30
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'quality'")
 *     result.quality = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['agreement']
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result.quality = __pyx_t_6;

  /* "FromPyStructUtility":31
 *         raise ValueError("No value specified for struct attribute 'quality'")
 *     result.quality = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['agreement']
 *     except KeyError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":32
 *     result.quality = value
 *     try:
 *         value = obj['agreement']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'agreement'")
 */
      __pyx_t_8 = PyObject_GetItem(__pyx_v_obj, __pyx_n_s_agreement); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L34_error;};
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L41_try_end;
    __pyx_L34_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "FromPyStructUtility":33
 *     try:
 *         value = obj['agreement']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'agreement'")
 *     result.agreement = value
 */
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_ArrayLayoutPos", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L36_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);

      /* "FromPyStructUtility":34
 *         value = obj['agreement']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'agreement'")             # <<<<<<<<<<<<<<
 *     result.agreement = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L36_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L36_except_error;}
    }
    goto __pyx_L36_except_error;
    __pyx_L36_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L41_try_end:;
  }

  /* "FromPyStructUtility":35
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'agreement'")
 *     result.agreement = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['operation']
 */
  __pyx_t_10 = __Pyx_PyInt_As_uint16_t(__pyx_v_value); if (unlikely((__pyx_t_10 == (uint16_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result.agreement = __pyx_t_10;

  /* "FromPyStructUtility":36
 *         raise ValueError("No value specified for struct attribute 'agreement'")
 *     result.agreement = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['operation']
 *     except KeyError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":37
 *     result.agreement = value
 *     try:
 *         value = obj['operation']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'operation'")
 */
      __pyx_t_2 = PyObject_GetItem(__pyx_v_obj, __pyx_n_s_operation); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L44_error;};
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_2);
      __pyx_t_2 = 0;
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L51_try_end;
    __pyx_L44_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":38
 *     try:
 *         value = obj['operation']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'operation'")
 *     result.operation = value
 */
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_ArrayLayoutPos", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L46_except_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "FromPyStructUtility":39
 *         value = obj['operation']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'operation'")             # <<<<<<<<<<<<<<
 *     result.operation = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L46_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L46_except_error;}
    }
    goto __pyx_L46_except_error;
    __pyx_L46_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L51_try_end:;
  }

  /* "FromPyStructUtility":40
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'operation'")
 *     result.operation = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['base']
 */
  __pyx_t_11 = __Pyx_PyInt_As_char(__pyx_v_value); if (unlikely((__pyx_t_11 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result.operation = __pyx_t_11;

  /* "FromPyStructUtility":41
 *         raise ValueError("No value specified for struct attribute 'operation'")
 *     result.operation = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['base']
 *     except KeyError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":42
 *     result.operation = value
 *     try:
 *         value = obj['base']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'base'")
 */
      __pyx_t_8 = PyObject_GetItem(__pyx_v_obj, __pyx_n_s_base); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L54_error;};
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L61_try_end;
    __pyx_L54_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "FromPyStructUtility":43
 *     try:
 *         value = obj['base']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'base'")
 *     result.base = value
 */
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_ArrayLayoutPos", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L56_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);

      /* "FromPyStructUtility":44
 *         value = obj['base']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'base'")             # <<<<<<<<<<<<<<
 *     result.base = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L56_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L56_except_error;}
    }
    goto __pyx_L56_except_error;
    __pyx_L56_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L61_try_end:;
  }

  /* "FromPyStructUtility":45
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'base'")
 *     result.base = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['mergeAgreed']
 */
  __pyx_t_11 = __Pyx_PyInt_As_char(__pyx_v_value); if (unlikely((__pyx_t_11 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result.base = __pyx_t_11;

  /* "FromPyStructUtility":46
 *         raise ValueError("No value specified for struct attribute 'base'")
 *     result.base = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['mergeAgreed']
 *     except KeyError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":47
 *     result.base = value
 *     try:
 *         value = obj['mergeAgreed']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'mergeAgreed'")
 */
      __pyx_t_2 = PyObject_GetItem(__pyx_v_obj, __pyx_n_s_mergeAgreed); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L64_error;};
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_2);
      __pyx_t_2 = 0;
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L71_try_end;
    __pyx_L64_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":48
 *     try:
 *         value = obj['mergeAgreed']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'mergeAgreed'")
 *     result.mergeAgreed = value
 */
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_ArrayLayoutPos", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L66_except_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "FromPyStructUtility":49
 *         value = obj['mergeAgreed']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'mergeAgreed'")             # <<<<<<<<<<<<<<
 *     result.mergeAgreed = value
 *     return result
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L66_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L66_except_error;}
    }
    goto __pyx_L66_except_error;
    __pyx_L66_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L71_try_end:;
  }

  /* "FromPyStructUtility":50
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'mergeAgreed'")
 *     result.mergeAgreed = value             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_t_11 = __Pyx_PyInt_As_char(__pyx_v_value); if (unlikely((__pyx_t_11 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result.mergeAgreed = __pyx_t_11;

  /* "FromPyStructUtility":51
 *         raise ValueError("No value specified for struct attribute 'mergeAgreed'")
 *     result.mergeAgreed = value
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py_ArrayLayoutPos")
 * cdef ArrayLayoutPos __pyx_convert__from_py_ArrayLayoutPos(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef ArrayLayoutPos result
 *     if not PyMapping_Check(obj):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_ArrayLayoutPos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7utilBMF_21MergePairedAlignments_Layout __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout;

static PyObject *__pyx_tp_new_7utilBMF_21MergePairedAlignments_Layout(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)o);
  p->__pyx_vtab = __pyx_vtabptr_7utilBMF_21MergePairedAlignments_Layout;
  p->tagDict = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->Name = ((__pyx_t_7utilBMF_8HTSUtils_cystr)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7utilBMF_21MergePairedAlignments_Layout(PyObject *o) {
  struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *p = (struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_15__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->tagDict);
  Py_CLEAR(p->Name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7utilBMF_21MergePairedAlignments_Layout(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *p = (struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)o;
  if (p->tagDict) {
    e = (*v)(p->tagDict, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7utilBMF_21MergePairedAlignments_Layout(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *p = (struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *)o;
  tmp = ((PyObject*)p->tagDict);
  p->tagDict = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_mapq(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4mapq_1__get__(o);
}

static int __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_mapq(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4mapq_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_tlen(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4tlen_1__get__(o);
}

static int __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_tlen(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4tlen_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_pnext(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_5pnext_1__get__(o);
}

static int __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_pnext(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_5pnext_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_flag(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4flag_1__get__(o);
}

static int __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_flag(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4flag_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_InitPos(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7InitPos_1__get__(o);
}

static int __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_InitPos(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7InitPos_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_firstMapped(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_11firstMapped_1__get__(o);
}

static int __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_firstMapped(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_11firstMapped_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_reference_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_12reference_id_1__get__(o);
}

static int __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_reference_id(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_12reference_id_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_pos(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_3pos_1__get__(o);
}

static int __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_pos(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_3pos_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_rnext(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_5rnext_1__get__(o);
}

static int __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_rnext(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_5rnext_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_tagDict(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7tagDict_1__get__(o);
}

static int __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_tagDict(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7tagDict_3__set__(o, v);
  }
  else {
    return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7tagDict_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_Name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4Name_1__get__(o);
}

static int __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_Name(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4Name_3__set__(o, v);
  }
  else {
    return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_4Name_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_is_reverse(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_10is_reverse_1__get__(o);
}

static int __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_is_reverse(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_10is_reverse_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_isMerged(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_8isMerged_1__get__(o);
}

static int __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_isMerged(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_8isMerged_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_MergeSuccess(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_12MergeSuccess_1__get__(o);
}

static int __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_MergeSuccess(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_12MergeSuccess_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7utilBMF_21MergePairedAlignments_Layout[] = {
  {"posIsMapped", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_5posIsMapped, METH_O, 0},
  {"getQual", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_7getQual, METH_NOARGS, 0},
  {"getQualString", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_9getQualString, METH_NOARGS, 0},
  {"getFAString", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_11getFAString, METH_NOARGS, 0},
  {"getPVString", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_13getPVString, METH_NOARGS, 0},
  {"getSeqArr", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_17getSeqArr, METH_NOARGS, 0},
  {"getSeq", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_19getSeq, METH_NOARGS, 0},
  {"__sam__", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_23__sam__, METH_O, 0},
  {"update", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_25update, METH_NOARGS, 0},
  {"getAgreement", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_27getAgreement, METH_NOARGS, __pyx_doc_7utilBMF_21MergePairedAlignments_6Layout_26getAgreement},
  {"getOperations", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_29getOperations, METH_NOARGS, 0},
  {"getCigarString", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_31getCigarString, METH_NOARGS, 0},
  {"getFlag", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_33getFlag, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7utilBMF_21MergePairedAlignments_Layout[] = {
  {(char *)"mapq", __pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_mapq, __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_mapq, 0, 0},
  {(char *)"tlen", __pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_tlen, __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_tlen, 0, 0},
  {(char *)"pnext", __pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_pnext, __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_pnext, 0, 0},
  {(char *)"flag", __pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_flag, __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_flag, 0, 0},
  {(char *)"InitPos", __pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_InitPos, __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_InitPos, 0, 0},
  {(char *)"firstMapped", __pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_firstMapped, __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_firstMapped, 0, 0},
  {(char *)"reference_id", __pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_reference_id, __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_reference_id, 0, 0},
  {(char *)"pos", __pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_pos, __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_pos, 0, 0},
  {(char *)"rnext", __pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_rnext, __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_rnext, 0, 0},
  {(char *)"tagDict", __pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_tagDict, __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_tagDict, 0, 0},
  {(char *)"Name", __pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_Name, __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_Name, 0, 0},
  {(char *)"is_reverse", __pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_is_reverse, __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_is_reverse, 0, 0},
  {(char *)"isMerged", __pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_isMerged, __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_isMerged, 0, 0},
  {(char *)"MergeSuccess", __pyx_getprop_7utilBMF_21MergePairedAlignments_6Layout_MergeSuccess, __pyx_setprop_7utilBMF_21MergePairedAlignments_6Layout_MergeSuccess, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7utilBMF_21MergePairedAlignments_Layout = {
  PyVarObject_HEAD_INIT(0, 0)
  "utilBMF.MergePairedAlignments.Layout", /*tp_name*/
  sizeof(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7utilBMF_21MergePairedAlignments_Layout, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_21__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Represents a layout as an array of arrays.\n    7 integers each for:\n        pos\n        readPos\n        operation\n        base\n        quality\n        agreement\n        mergeAgreed\n    , respectively.\n    Additional fields:\n        firstMapped\n            layout index for first \"M\" base.\n\n    Test for whether a merge has been attempted\n    by seeing if mergeAgreed == 1. 1 is unset, 2 is success, 0 is failure.\n    ", /*tp_doc*/
  __pyx_tp_traverse_7utilBMF_21MergePairedAlignments_Layout, /*tp_traverse*/
  __pyx_tp_clear_7utilBMF_21MergePairedAlignments_Layout, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7utilBMF_21MergePairedAlignments_Layout, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7utilBMF_21MergePairedAlignments_Layout, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7utilBMF_21MergePairedAlignments_6Layout_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7utilBMF_21MergePairedAlignments_Layout, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7utilBMF_21MergePairedAlignments_ListBool(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7utilBMF_21MergePairedAlignments_ListBool *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7utilBMF_21MergePairedAlignments_ListBool *)o);
  p->List = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7utilBMF_21MergePairedAlignments_8ListBool_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7utilBMF_21MergePairedAlignments_ListBool(PyObject *o) {
  struct __pyx_obj_7utilBMF_21MergePairedAlignments_ListBool *p = (struct __pyx_obj_7utilBMF_21MergePairedAlignments_ListBool *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->List);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7utilBMF_21MergePairedAlignments_ListBool(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7utilBMF_21MergePairedAlignments_ListBool *p = (struct __pyx_obj_7utilBMF_21MergePairedAlignments_ListBool *)o;
  if (p->List) {
    e = (*v)(p->List, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7utilBMF_21MergePairedAlignments_ListBool(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7utilBMF_21MergePairedAlignments_ListBool *p = (struct __pyx_obj_7utilBMF_21MergePairedAlignments_ListBool *)o;
  tmp = ((PyObject*)p->List);
  p->List = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7utilBMF_21MergePairedAlignments_ListBool[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7utilBMF_21MergePairedAlignments_ListBool = {
  PyVarObject_HEAD_INIT(0, 0)
  "utilBMF.MergePairedAlignments.ListBool", /*tp_name*/
  sizeof(struct __pyx_obj_7utilBMF_21MergePairedAlignments_ListBool), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7utilBMF_21MergePairedAlignments_ListBool, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Used to strongly type return type of a list and a bool\n    ", /*tp_doc*/
  __pyx_tp_traverse_7utilBMF_21MergePairedAlignments_ListBool, /*tp_traverse*/
  __pyx_tp_clear_7utilBMF_21MergePairedAlignments_ListBool, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7utilBMF_21MergePairedAlignments_ListBool, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7utilBMF_21MergePairedAlignments_ListBool, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"ALPToStr", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_7ALPToStr, METH_O, 0},
  {"FlattenCigarString", (PyCFunction)__pyx_pw_7utilBMF_21MergePairedAlignments_11FlattenCigarString, METH_O, 0},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "MergePairedAlignments",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_0, __pyx_k_0, sizeof(__pyx_k_0), 0, 0, 1, 0},
  {&__pyx_kp_s_0_9, __pyx_k_0_9, sizeof(__pyx_k_0_9), 0, 0, 1, 0},
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 0},
  {&__pyx_kp_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 0},
  {&__pyx_kp_s_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 0, 1, 0},
  {&__pyx_kp_s_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 0, 1, 0},
  {&__pyx_kp_s_14, __pyx_k_14, sizeof(__pyx_k_14), 0, 0, 1, 0},
  {&__pyx_kp_s_15, __pyx_k_15, sizeof(__pyx_k_15), 0, 0, 1, 0},
  {&__pyx_kp_s_16, __pyx_k_16, sizeof(__pyx_k_16), 0, 0, 1, 0},
  {&__pyx_kp_s_17, __pyx_k_17, sizeof(__pyx_k_17), 0, 0, 1, 0},
  {&__pyx_kp_s_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 0, 1, 0},
  {&__pyx_kp_s_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 0, 1, 0},
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_kp_s_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 0, 1, 0},
  {&__pyx_kp_s_21, __pyx_k_21, sizeof(__pyx_k_21), 0, 0, 1, 0},
  {&__pyx_kp_s_22, __pyx_k_22, sizeof(__pyx_k_22), 0, 0, 1, 0},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_kp_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 0},
  {&__pyx_kp_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 0},
  {&__pyx_kp_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 0},
  {&__pyx_kp_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 0},
  {&__pyx_kp_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 0},
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_n_s_ALPToStr, __pyx_k_ALPToStr, sizeof(__pyx_k_ALPToStr), 0, 0, 1, 1},
  {&__pyx_kp_s_A_Z, __pyx_k_A_Z, sizeof(__pyx_k_A_Z), 0, 0, 1, 0},
  {&__pyx_kp_s_About_to_test_if_they_overlap, __pyx_k_About_to_test_if_they_overlap, sizeof(__pyx_k_About_to_test_if_they_overlap), 0, 0, 1, 0},
  {&__pyx_n_s_AlignedSegment, __pyx_k_AlignedSegment, sizeof(__pyx_k_AlignedSegment), 0, 0, 1, 1},
  {&__pyx_n_s_AlignmentFile, __pyx_k_AlignmentFile, sizeof(__pyx_k_AlignmentFile), 0, 0, 1, 1},
  {&__pyx_kp_s_And_neither_did_writing, __pyx_k_And_neither_did_writing, sizeof(__pyx_k_And_neither_did_writing), 0, 0, 1, 0},
  {&__pyx_kp_s_ArrayLayout_has_no_M_cigar_opera, __pyx_k_ArrayLayout_has_no_M_cigar_opera, sizeof(__pyx_k_ArrayLayout_has_no_M_cigar_opera), 0, 0, 1, 0},
  {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
  {&__pyx_kp_s_Assigning_read_to_read2, __pyx_k_Assigning_read_to_read2, sizeof(__pyx_k_Assigning_read_to_read2), 0, 0, 1, 0},
  {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
  {&__pyx_n_s_BamTag, __pyx_k_BamTag, sizeof(__pyx_k_BamTag), 0, 0, 1, 1},
  {&__pyx_kp_s_Bam_is_either_not_name_sorted_or, __pyx_k_Bam_is_either_not_name_sorted_or, sizeof(__pyx_k_Bam_is_either_not_name_sorted_or), 0, 0, 1, 0},
  {&__pyx_kp_s_Bam_record_merge_failed_write_or, __pyx_k_Bam_record_merge_failed_write_or, sizeof(__pyx_k_Bam_record_merge_failed_write_or), 0, 0, 1, 0},
  {&__pyx_kp_s_Begging_MergeLayouts_in_place, __pyx_k_Begging_MergeLayouts_in_place, sizeof(__pyx_k_Begging_MergeLayouts_in_place), 0, 0, 1, 0},
  {&__pyx_n_s_Bool, __pyx_k_Bool, sizeof(__pyx_k_Bool), 0, 0, 1, 1},
  {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},
  {&__pyx_n_s_CigarDict, __pyx_k_CigarDict, sizeof(__pyx_k_CigarDict), 0, 0, 1, 1},
  {&__pyx_n_s_CigarStrDict, __pyx_k_CigarStrDict, sizeof(__pyx_k_CigarStrDict), 0, 0, 1, 1},
  {&__pyx_n_s_D, __pyx_k_D, sizeof(__pyx_k_D), 0, 0, 1, 1},
  {&__pyx_n_s_DEBUG, __pyx_k_DEBUG, sizeof(__pyx_k_DEBUG), 0, 0, 1, 1},
  {&__pyx_n_s_DG, __pyx_k_DG, sizeof(__pyx_k_DG), 0, 0, 1, 1},
  {&__pyx_n_s_DR, __pyx_k_DR, sizeof(__pyx_k_DR), 0, 0, 1, 1},
  {&__pyx_kp_s_Didn_t_die, __pyx_k_Didn_t_die, sizeof(__pyx_k_Didn_t_die), 0, 0, 1, 0},
  {&__pyx_n_s_E, __pyx_k_E, sizeof(__pyx_k_E), 0, 0, 1, 1},
  {&__pyx_n_s_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 0, 1, 1},
  {&__pyx_n_s_FA, __pyx_k_FA, sizeof(__pyx_k_FA), 0, 0, 1, 1},
  {&__pyx_n_s_FM, __pyx_k_FM, sizeof(__pyx_k_FM), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_G, __pyx_k_G, sizeof(__pyx_k_G), 0, 0, 1, 1},
  {&__pyx_kp_s_GL000191_1, __pyx_k_GL000191_1, sizeof(__pyx_k_GL000191_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000192_1, __pyx_k_GL000192_1, sizeof(__pyx_k_GL000192_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000193_1, __pyx_k_GL000193_1, sizeof(__pyx_k_GL000193_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000194_1, __pyx_k_GL000194_1, sizeof(__pyx_k_GL000194_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000195_1, __pyx_k_GL000195_1, sizeof(__pyx_k_GL000195_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000196_1, __pyx_k_GL000196_1, sizeof(__pyx_k_GL000196_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000197_1, __pyx_k_GL000197_1, sizeof(__pyx_k_GL000197_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000198_1, __pyx_k_GL000198_1, sizeof(__pyx_k_GL000198_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000199_1, __pyx_k_GL000199_1, sizeof(__pyx_k_GL000199_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000200_1, __pyx_k_GL000200_1, sizeof(__pyx_k_GL000200_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000201_1, __pyx_k_GL000201_1, sizeof(__pyx_k_GL000201_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000202_1, __pyx_k_GL000202_1, sizeof(__pyx_k_GL000202_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000203_1, __pyx_k_GL000203_1, sizeof(__pyx_k_GL000203_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000204_1, __pyx_k_GL000204_1, sizeof(__pyx_k_GL000204_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000205_1, __pyx_k_GL000205_1, sizeof(__pyx_k_GL000205_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000206_1, __pyx_k_GL000206_1, sizeof(__pyx_k_GL000206_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000207_1, __pyx_k_GL000207_1, sizeof(__pyx_k_GL000207_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000208_1, __pyx_k_GL000208_1, sizeof(__pyx_k_GL000208_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000209_1, __pyx_k_GL000209_1, sizeof(__pyx_k_GL000209_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000210_1, __pyx_k_GL000210_1, sizeof(__pyx_k_GL000210_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000211_1, __pyx_k_GL000211_1, sizeof(__pyx_k_GL000211_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000212_1, __pyx_k_GL000212_1, sizeof(__pyx_k_GL000212_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000213_1, __pyx_k_GL000213_1, sizeof(__pyx_k_GL000213_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000214_1, __pyx_k_GL000214_1, sizeof(__pyx_k_GL000214_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000215_1, __pyx_k_GL000215_1, sizeof(__pyx_k_GL000215_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000216_1, __pyx_k_GL000216_1, sizeof(__pyx_k_GL000216_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000217_1, __pyx_k_GL000217_1, sizeof(__pyx_k_GL000217_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000218_1, __pyx_k_GL000218_1, sizeof(__pyx_k_GL000218_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000219_1, __pyx_k_GL000219_1, sizeof(__pyx_k_GL000219_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000220_1, __pyx_k_GL000220_1, sizeof(__pyx_k_GL000220_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000221_1, __pyx_k_GL000221_1, sizeof(__pyx_k_GL000221_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000222_1, __pyx_k_GL000222_1, sizeof(__pyx_k_GL000222_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000223_1, __pyx_k_GL000223_1, sizeof(__pyx_k_GL000223_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000224_1, __pyx_k_GL000224_1, sizeof(__pyx_k_GL000224_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000225_1, __pyx_k_GL000225_1, sizeof(__pyx_k_GL000225_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000226_1, __pyx_k_GL000226_1, sizeof(__pyx_k_GL000226_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000227_1, __pyx_k_GL000227_1, sizeof(__pyx_k_GL000227_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000228_1, __pyx_k_GL000228_1, sizeof(__pyx_k_GL000228_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000229_1, __pyx_k_GL000229_1, sizeof(__pyx_k_GL000229_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000230_1, __pyx_k_GL000230_1, sizeof(__pyx_k_GL000230_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000231_1, __pyx_k_GL000231_1, sizeof(__pyx_k_GL000231_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000232_1, __pyx_k_GL000232_1, sizeof(__pyx_k_GL000232_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000233_1, __pyx_k_GL000233_1, sizeof(__pyx_k_GL000233_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000234_1, __pyx_k_GL000234_1, sizeof(__pyx_k_GL000234_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000235_1, __pyx_k_GL000235_1, sizeof(__pyx_k_GL000235_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000236_1, __pyx_k_GL000236_1, sizeof(__pyx_k_GL000236_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000237_1, __pyx_k_GL000237_1, sizeof(__pyx_k_GL000237_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000238_1, __pyx_k_GL000238_1, sizeof(__pyx_k_GL000238_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000239_1, __pyx_k_GL000239_1, sizeof(__pyx_k_GL000239_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000240_1, __pyx_k_GL000240_1, sizeof(__pyx_k_GL000240_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000241_1, __pyx_k_GL000241_1, sizeof(__pyx_k_GL000241_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000242_1, __pyx_k_GL000242_1, sizeof(__pyx_k_GL000242_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000243_1, __pyx_k_GL000243_1, sizeof(__pyx_k_GL000243_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000244_1, __pyx_k_GL000244_1, sizeof(__pyx_k_GL000244_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000245_1, __pyx_k_GL000245_1, sizeof(__pyx_k_GL000245_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000246_1, __pyx_k_GL000246_1, sizeof(__pyx_k_GL000246_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000247_1, __pyx_k_GL000247_1, sizeof(__pyx_k_GL000247_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000248_1, __pyx_k_GL000248_1, sizeof(__pyx_k_GL000248_1), 0, 0, 1, 0},
  {&__pyx_kp_s_GL000249_1, __pyx_k_GL000249_1, sizeof(__pyx_k_GL000249_1), 0, 0, 1, 0},
  {&__pyx_n_s_H, __pyx_k_H, sizeof(__pyx_k_H), 0, 0, 1, 1},
  {&__pyx_n_s_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 0, 1, 1},
  {&__pyx_kp_s_I_am_now_continuing_over_this_re, __pyx_k_I_am_now_continuing_over_this_re, sizeof(__pyx_k_I_am_now_continuing_over_this_re), 0, 0, 1, 0},
  {&__pyx_kp_s_I_am_now_continuing_over_this_re_2, __pyx_k_I_am_now_continuing_over_this_re_2, sizeof(__pyx_k_I_am_now_continuing_over_this_re_2), 0, 0, 1, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_ImproperArgumentError, __pyx_k_ImproperArgumentError, sizeof(__pyx_k_ImproperArgumentError), 0, 0, 1, 1},
  {&__pyx_n_s_IndexedReads, __pyx_k_IndexedReads, sizeof(__pyx_k_IndexedReads), 0, 0, 1, 1},
  {&__pyx_n_s_J, __pyx_k_J, sizeof(__pyx_k_J), 0, 0, 1, 1},
  {&__pyx_n_s_K, __pyx_k_K, sizeof(__pyx_k_K), 0, 0, 1, 1},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 0, 1, 1},
  {&__pyx_n_s_Layout1, __pyx_k_Layout1, sizeof(__pyx_k_Layout1), 0, 0, 1, 1},
  {&__pyx_n_s_Layout2, __pyx_k_Layout2, sizeof(__pyx_k_Layout2), 0, 0, 1, 1},
  {&__pyx_kp_s_Layouts_made_now_trying_to_merge, __pyx_k_Layouts_made_now_trying_to_merge, sizeof(__pyx_k_Layouts_made_now_trying_to_merge), 0, 0, 1, 0},
  {&__pyx_n_s_List, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {&__pyx_n_s_M, __pyx_k_M, sizeof(__pyx_k_M), 0, 0, 1, 1},
  {&__pyx_n_s_MA, __pyx_k_MA, sizeof(__pyx_k_MA), 0, 0, 1, 1},
  {&__pyx_n_s_MP, __pyx_k_MP, sizeof(__pyx_k_MP), 0, 0, 1, 1},
  {&__pyx_kp_s_MPA_RAN, __pyx_k_MPA_RAN, sizeof(__pyx_k_MPA_RAN), 0, 0, 1, 0},
  {&__pyx_n_s_MT, __pyx_k_MT, sizeof(__pyx_k_MT), 0, 0, 1, 1},
  {&__pyx_kp_s_Making_Layout1_object, __pyx_k_Making_Layout1_object, sizeof(__pyx_k_Making_Layout1_object), 0, 0, 1, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s_MergePairedAlignments, __pyx_k_MergePairedAlignments, sizeof(__pyx_k_MergePairedAlignments), 0, 0, 1, 1},
  {&__pyx_kp_s_Merging_Layouts, __pyx_k_Merging_Layouts, sizeof(__pyx_k_Merging_Layouts), 0, 0, 1, 0},
  {&__pyx_kp_s_Merging_didn_t_break_everything, __pyx_k_Merging_didn_t_break_everything, sizeof(__pyx_k_Merging_didn_t_break_everything), 0, 0, 1, 0},
  {&__pyx_n_s_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 0, 1, 1},
  {&__pyx_kp_s_Name_s, __pyx_k_Name_s, sizeof(__pyx_k_Name_s), 0, 0, 1, 0},
  {&__pyx_kp_s_New_SAM_read_s, __pyx_k_New_SAM_read_s, sizeof(__pyx_k_New_SAM_read_s), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at, __pyx_k_No_value_specified_for_struct_at, sizeof(__pyx_k_No_value_specified_for_struct_at), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_2, __pyx_k_No_value_specified_for_struct_at_2, sizeof(__pyx_k_No_value_specified_for_struct_at_2), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_3, __pyx_k_No_value_specified_for_struct_at_3, sizeof(__pyx_k_No_value_specified_for_struct_at_3), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_4, __pyx_k_No_value_specified_for_struct_at_4, sizeof(__pyx_k_No_value_specified_for_struct_at_4), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_5, __pyx_k_No_value_specified_for_struct_at_5, sizeof(__pyx_k_No_value_specified_for_struct_at_5), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_6, __pyx_k_No_value_specified_for_struct_at_6, sizeof(__pyx_k_No_value_specified_for_struct_at_6), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_7, __pyx_k_No_value_specified_for_struct_at_7, sizeof(__pyx_k_No_value_specified_for_struct_at_7), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_kp_s_Not_a_proper_pair_continuing, __pyx_k_Not_a_proper_pair_continuing, sizeof(__pyx_k_Not_a_proper_pair_continuing), 0, 0, 1, 0},
  {&__pyx_n_s_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 1, 1},
  {&__pyx_kp_s_Only_MIDS_cigar_operations_curre, __pyx_k_Only_MIDS_cigar_operations_curre, sizeof(__pyx_k_Only_MIDS_cigar_operations_curre), 0, 0, 1, 0},
  {&__pyx_n_s_P, __pyx_k_P, sizeof(__pyx_k_P), 0, 0, 1, 1},
  {&__pyx_n_s_PM, __pyx_k_PM, sizeof(__pyx_k_PM), 0, 0, 1, 1},
  {&__pyx_n_s_PV, __pyx_k_PV, sizeof(__pyx_k_PV), 0, 0, 1, 1},
  {&__pyx_n_s_Q, __pyx_k_Q, sizeof(__pyx_k_Q), 0, 0, 1, 1},
  {&__pyx_n_s_R, __pyx_k_R, sizeof(__pyx_k_R), 0, 0, 1, 1},
  {&__pyx_n_s_ReadIndex, __pyx_k_ReadIndex, sizeof(__pyx_k_ReadIndex), 0, 0, 1, 1},
  {&__pyx_kp_s_Read_is_neither_read_1_nor_read, __pyx_k_Read_is_neither_read_1_nor_read, sizeof(__pyx_k_Read_is_neither_read_1_nor_read), 0, 0, 1, 0},
  {&__pyx_kp_s_Repr_of_read_align_pairs_s, __pyx_k_Repr_of_read_align_pairs_s, sizeof(__pyx_k_Repr_of_read_align_pairs_s), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 0, 1, 1},
  {&__pyx_kp_s_Str_of_BT_with_key_s_is_s, __pyx_k_Str_of_BT_with_key_s_is_s, sizeof(__pyx_k_Str_of_BT_with_key_s_is_s), 0, 0, 1, 0},
  {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
  {&__pyx_kp_s_Tested_if_it_was_supp_2nd, __pyx_k_Tested_if_it_was_supp_2nd, sizeof(__pyx_k_Tested_if_it_was_supp_2nd), 0, 0, 1, 0},
  {&__pyx_n_s_ThisIsMadness, __pyx_k_ThisIsMadness, sizeof(__pyx_k_ThisIsMadness), 0, 0, 1, 1},
  {&__pyx_n_s_TrimExt, __pyx_k_TrimExt, sizeof(__pyx_k_TrimExt), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_U, __pyx_k_U, sizeof(__pyx_k_U), 0, 0, 1, 1},
  {&__pyx_n_s_V, __pyx_k_V, sizeof(__pyx_k_V), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_W, __pyx_k_W, sizeof(__pyx_k_W), 0, 0, 1, 1},
  {&__pyx_kp_s_Watch_out_FA_tag_not_set, __pyx_k_Watch_out_FA_tag_not_set, sizeof(__pyx_k_Watch_out_FA_tag_not_set), 0, 0, 1, 0},
  {&__pyx_kp_s_Watch_out_PV_tag_not_set, __pyx_k_Watch_out_PV_tag_not_set, sizeof(__pyx_k_Watch_out_PV_tag_not_set), 0, 0, 1, 0},
  {&__pyx_n_s_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 0, 1, 1},
  {&__pyx_n_s_Y, __pyx_k_Y, sizeof(__pyx_k_Y), 0, 0, 1, 1},
  {&__pyx_n_s_Z, __pyx_k_Z, sizeof(__pyx_k_Z), 0, 0, 1, 1},
  {&__pyx_kp_s__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 0, 1, 0},
  {&__pyx_kp_s__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 0, 1, 0},
  {&__pyx_kp_s__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 0, 1, 0},
  {&__pyx_kp_s__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 0, 1, 0},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_kp_s__20, __pyx_k__20, sizeof(__pyx_k__20), 0, 0, 1, 0},
  {&__pyx_kp_s__28, __pyx_k__28, sizeof(__pyx_k__28), 0, 0, 1, 0},
  {&__pyx_kp_s__29, __pyx_k__29, sizeof(__pyx_k__29), 0, 0, 1, 0},
  {&__pyx_kp_s__30, __pyx_k__30, sizeof(__pyx_k__30), 0, 0, 1, 0},
  {&__pyx_kp_s__31, __pyx_k__31, sizeof(__pyx_k__31), 0, 0, 1, 0},
  {&__pyx_kp_s__32, __pyx_k__32, sizeof(__pyx_k__32), 0, 0, 1, 0},
  {&__pyx_kp_s__33, __pyx_k__33, sizeof(__pyx_k__33), 0, 0, 1, 0},
  {&__pyx_kp_s__34, __pyx_k__34, sizeof(__pyx_k__34), 0, 0, 1, 0},
  {&__pyx_kp_s__35, __pyx_k__35, sizeof(__pyx_k__35), 0, 0, 1, 0},
  {&__pyx_kp_s__36, __pyx_k__36, sizeof(__pyx_k__36), 0, 0, 1, 0},
  {&__pyx_kp_s__37, __pyx_k__37, sizeof(__pyx_k__37), 0, 0, 1, 0},
  {&__pyx_kp_s__38, __pyx_k__38, sizeof(__pyx_k__38), 0, 0, 1, 0},
  {&__pyx_kp_s__39, __pyx_k__39, sizeof(__pyx_k__39), 0, 0, 1, 0},
  {&__pyx_kp_s__40, __pyx_k__40, sizeof(__pyx_k__40), 0, 0, 1, 0},
  {&__pyx_kp_s__41, __pyx_k__41, sizeof(__pyx_k__41), 0, 0, 1, 0},
  {&__pyx_kp_s__42, __pyx_k__42, sizeof(__pyx_k__42), 0, 0, 1, 0},
  {&__pyx_kp_s__43, __pyx_k__43, sizeof(__pyx_k__43), 0, 0, 1, 0},
  {&__pyx_kp_s__44, __pyx_k__44, sizeof(__pyx_k__44), 0, 0, 1, 0},
  {&__pyx_kp_s__45, __pyx_k__45, sizeof(__pyx_k__45), 0, 0, 1, 0},
  {&__pyx_kp_s__46, __pyx_k__46, sizeof(__pyx_k__46), 0, 0, 1, 0},
  {&__pyx_kp_s__47, __pyx_k__47, sizeof(__pyx_k__47), 0, 0, 1, 0},
  {&__pyx_kp_s__48, __pyx_k__48, sizeof(__pyx_k__48), 0, 0, 1, 0},
  {&__pyx_kp_s__49, __pyx_k__49, sizeof(__pyx_k__49), 0, 0, 1, 0},
  {&__pyx_kp_s__50, __pyx_k__50, sizeof(__pyx_k__50), 0, 0, 1, 0},
  {&__pyx_n_s__51, __pyx_k__51, sizeof(__pyx_k__51), 0, 0, 1, 1},
  {&__pyx_kp_s__52, __pyx_k__52, sizeof(__pyx_k__52), 0, 0, 1, 0},
  {&__pyx_kp_s__53, __pyx_k__53, sizeof(__pyx_k__53), 0, 0, 1, 0},
  {&__pyx_kp_s__54, __pyx_k__54, sizeof(__pyx_k__54), 0, 0, 1, 0},
  {&__pyx_kp_s__55, __pyx_k__55, sizeof(__pyx_k__55), 0, 0, 1, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_agreement, __pyx_k_agreement, sizeof(__pyx_k_agreement), 0, 0, 1, 1},
  {&__pyx_n_s_aligned_pairs, __pyx_k_aligned_pairs, sizeof(__pyx_k_aligned_pairs), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_astype, __pyx_k_astype, sizeof(__pyx_k_astype), 0, 0, 1, 1},
  {&__pyx_n_s_attrgetter, __pyx_k_attrgetter, sizeof(__pyx_k_attrgetter), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_build, __pyx_k_build, sizeof(__pyx_k_build), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_char, __pyx_k_char, sizeof(__pyx_k_char), 0, 0, 1, 1},
  {&__pyx_n_s_check_call, __pyx_k_check_call, sizeof(__pyx_k_check_call), 0, 0, 1, 1},
  {&__pyx_n_s_chr, __pyx_k_chr, sizeof(__pyx_k_chr), 0, 0, 1, 1},
  {&__pyx_n_s_cigar, __pyx_k_cigar, sizeof(__pyx_k_cigar), 0, 0, 1, 1},
  {&__pyx_n_s_cigarstring, __pyx_k_cigarstring, sizeof(__pyx_k_cigarstring), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_find, __pyx_k_find, sizeof(__pyx_k_find), 0, 0, 1, 1},
  {&__pyx_n_s_firstMapped, __pyx_k_firstMapped, sizeof(__pyx_k_firstMapped), 0, 0, 1, 1},
  {&__pyx_n_s_flag, __pyx_k_flag, sizeof(__pyx_k_flag), 0, 0, 1, 1},
  {&__pyx_n_s_fromtuple, __pyx_k_fromtuple, sizeof(__pyx_k_fromtuple), 0, 0, 1, 1},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_getAgreement, __pyx_k_getAgreement, sizeof(__pyx_k_getAgreement), 0, 0, 1, 1},
  {&__pyx_n_s_getCigarString, __pyx_k_getCigarString, sizeof(__pyx_k_getCigarString), 0, 0, 1, 1},
  {&__pyx_n_s_getFAString, __pyx_k_getFAString, sizeof(__pyx_k_getFAString), 0, 0, 1, 1},
  {&__pyx_n_s_getFirstMappedRefPos, __pyx_k_getFirstMappedRefPos, sizeof(__pyx_k_getFirstMappedRefPos), 0, 0, 1, 1},
  {&__pyx_n_s_getFlag, __pyx_k_getFlag, sizeof(__pyx_k_getFlag), 0, 0, 1, 1},
  {&__pyx_n_s_getOperations, __pyx_k_getOperations, sizeof(__pyx_k_getOperations), 0, 0, 1, 1},
  {&__pyx_n_s_getPVString, __pyx_k_getPVString, sizeof(__pyx_k_getPVString), 0, 0, 1, 1},
  {&__pyx_n_s_getQual, __pyx_k_getQual, sizeof(__pyx_k_getQual), 0, 0, 1, 1},
  {&__pyx_n_s_getQualString, __pyx_k_getQualString, sizeof(__pyx_k_getQualString), 0, 0, 1, 1},
  {&__pyx_n_s_getSeq, __pyx_k_getSeq, sizeof(__pyx_k_getSeq), 0, 0, 1, 1},
  {&__pyx_n_s_getSeqArr, __pyx_k_getSeqArr, sizeof(__pyx_k_getSeqArr), 0, 0, 1, 1},
  {&__pyx_n_s_get_tags, __pyx_k_get_tags, sizeof(__pyx_k_get_tags), 0, 0, 1, 1},
  {&__pyx_n_s_groupby, __pyx_k_groupby, sizeof(__pyx_k_groupby), 0, 0, 1, 1},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_n_s_header, __pyx_k_header, sizeof(__pyx_k_header), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_inBAM, __pyx_k_inBAM, sizeof(__pyx_k_inBAM), 0, 0, 1, 1},
  {&__pyx_n_s_inHandle, __pyx_k_inHandle, sizeof(__pyx_k_inHandle), 0, 0, 1, 1},
  {&__pyx_n_s_int16, __pyx_k_int16, sizeof(__pyx_k_int16), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_int8, __pyx_k_int8, sizeof(__pyx_k_int8), 0, 0, 1, 1},
  {&__pyx_n_s_is_proper_pair, __pyx_k_is_proper_pair, sizeof(__pyx_k_is_proper_pair), 0, 0, 1, 1},
  {&__pyx_n_s_is_read1, __pyx_k_is_read1, sizeof(__pyx_k_is_read1), 0, 0, 1, 1},
  {&__pyx_n_s_is_read2, __pyx_k_is_read2, sizeof(__pyx_k_is_read2), 0, 0, 1, 1},
  {&__pyx_n_s_is_reverse, __pyx_k_is_reverse, sizeof(__pyx_k_is_reverse), 0, 0, 1, 1},
  {&__pyx_n_s_is_secondary, __pyx_k_is_secondary, sizeof(__pyx_k_is_secondary), 0, 0, 1, 1},
  {&__pyx_n_s_is_supplementary, __pyx_k_is_supplementary, sizeof(__pyx_k_is_supplementary), 0, 0, 1, 1},
  {&__pyx_kp_s_is_unmapped_no_such_thing_as_a, __pyx_k_is_unmapped_no_such_thing_as_a, sizeof(__pyx_k_is_unmapped_no_such_thing_as_a), 0, 0, 1, 0},
  {&__pyx_n_s_itemgetter, __pyx_k_itemgetter, sizeof(__pyx_k_itemgetter), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_itervalues, __pyx_k_itervalues, sizeof(__pyx_k_itervalues), 0, 0, 1, 1},
  {&__pyx_n_s_izip, __pyx_k_izip, sizeof(__pyx_k_izip), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
  {&__pyx_n_s_lambda1None, __pyx_k_lambda1None, sizeof(__pyx_k_lambda1None), 0, 0, 1, 1},
  {&__pyx_n_s_layout, __pyx_k_layout, sizeof(__pyx_k_layout), 0, 0, 1, 1},
  {&__pyx_n_s_layouts, __pyx_k_layouts, sizeof(__pyx_k_layouts), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_n_s_level, __pyx_k_level, sizeof(__pyx_k_level), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {&__pyx_n_s_mapq, __pyx_k_mapq, sizeof(__pyx_k_mapq), 0, 0, 1, 1},
  {&__pyx_n_s_maxint, __pyx_k_maxint, sizeof(__pyx_k_maxint), 0, 0, 1, 1},
  {&__pyx_n_s_mc, __pyx_k_mc, sizeof(__pyx_k_mc), 0, 0, 1, 1},
  {&__pyx_n_s_mergeAgreed, __pyx_k_mergeAgreed, sizeof(__pyx_k_mergeAgreed), 0, 0, 1, 1},
  {&__pyx_n_s_methodcaller, __pyx_k_methodcaller, sizeof(__pyx_k_methodcaller), 0, 0, 1, 1},
  {&__pyx_n_s_mp, __pyx_k_mp, sizeof(__pyx_k_mp), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_newSamRead, __pyx_k_newSamRead, sizeof(__pyx_k_newSamRead), 0, 0, 1, 1},
  {&__pyx_n_s_next, __pyx_k_next, sizeof(__pyx_k_next), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_o, __pyx_k_o, sizeof(__pyx_k_o), 0, 0, 1, 1},
  {&__pyx_n_s_oag, __pyx_k_oag, sizeof(__pyx_k_oag), 0, 0, 1, 1},
  {&__pyx_n_s_oagag, __pyx_k_oagag, sizeof(__pyx_k_oagag), 0, 0, 1, 1},
  {&__pyx_n_s_oagbase, __pyx_k_oagbase, sizeof(__pyx_k_oagbase), 0, 0, 1, 1},
  {&__pyx_n_s_oagop, __pyx_k_oagop, sizeof(__pyx_k_oagop), 0, 0, 1, 1},
  {&__pyx_n_s_oagqual, __pyx_k_oagqual, sizeof(__pyx_k_oagqual), 0, 0, 1, 1},
  {&__pyx_n_s_oagsk, __pyx_k_oagsk, sizeof(__pyx_k_oagsk), 0, 0, 1, 1},
  {&__pyx_n_s_oagtag, __pyx_k_oagtag, sizeof(__pyx_k_oagtag), 0, 0, 1, 1},
  {&__pyx_n_s_oig, __pyx_k_oig, sizeof(__pyx_k_oig), 0, 0, 1, 1},
  {&__pyx_n_s_oig0, __pyx_k_oig0, sizeof(__pyx_k_oig0), 0, 0, 1, 1},
  {&__pyx_n_s_oig1, __pyx_k_oig1, sizeof(__pyx_k_oig1), 0, 0, 1, 1},
  {&__pyx_n_s_om, __pyx_k_om, sizeof(__pyx_k_om), 0, 0, 1, 1},
  {&__pyx_n_s_operation, __pyx_k_operation, sizeof(__pyx_k_operation), 0, 0, 1, 1},
  {&__pyx_n_s_operator, __pyx_k_operator, sizeof(__pyx_k_operator), 0, 0, 1, 1},
  {&__pyx_n_s_opt, __pyx_k_opt, sizeof(__pyx_k_opt), 0, 0, 1, 1},
  {&__pyx_n_s_ord, __pyx_k_ord, sizeof(__pyx_k_ord), 0, 0, 1, 1},
  {&__pyx_n_s_ot, __pyx_k_ot, sizeof(__pyx_k_ot), 0, 0, 1, 1},
  {&__pyx_n_s_outBAM, __pyx_k_outBAM, sizeof(__pyx_k_outBAM), 0, 0, 1, 1},
  {&__pyx_n_s_outHandle, __pyx_k_outHandle, sizeof(__pyx_k_outHandle), 0, 0, 1, 1},
  {&__pyx_n_s_outHandleMerge, __pyx_k_outHandleMerge, sizeof(__pyx_k_outHandleMerge), 0, 0, 1, 1},
  {&__pyx_n_s_outMerge, __pyx_k_outMerge, sizeof(__pyx_k_outMerge), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_pl, __pyx_k_pl, sizeof(__pyx_k_pl), 0, 0, 1, 1},
  {&__pyx_n_s_pnext, __pyx_k_pnext, sizeof(__pyx_k_pnext), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_n_s_posIsMapped, __pyx_k_posIsMapped, sizeof(__pyx_k_posIsMapped), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_printlog, __pyx_k_printlog, sizeof(__pyx_k_printlog), 0, 0, 1, 1},
  {&__pyx_n_s_pysam, __pyx_k_pysam, sizeof(__pyx_k_pysam), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_capi, __pyx_k_pyx_capi, sizeof(__pyx_k_pyx_capi), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 0, 1, 1},
  {&__pyx_n_s_quality, __pyx_k_quality, sizeof(__pyx_k_quality), 0, 0, 1, 1},
  {&__pyx_n_s_query_name, __pyx_k_query_name, sizeof(__pyx_k_query_name), 0, 0, 1, 1},
  {&__pyx_n_s_query_qualities, __pyx_k_query_qualities, sizeof(__pyx_k_query_qualities), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rb, __pyx_k_rb, sizeof(__pyx_k_rb), 0, 0, 1, 1},
  {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
  {&__pyx_n_s_re2, __pyx_k_re2, sizeof(__pyx_k_re2), 0, 0, 1, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_kp_s_read1_query_name_s_read2_query_n, __pyx_k_read1_query_name_s_read2_query_n, sizeof(__pyx_k_read1_query_name_s_read2_query_n), 0, 0, 1, 0},
  {&__pyx_n_s_readLength, __pyx_k_readLength, sizeof(__pyx_k_readLength), 0, 0, 1, 1},
  {&__pyx_kp_s_readLength_not_set_inferring, __pyx_k_readLength_not_set_inferring, sizeof(__pyx_k_readLength_not_set_inferring), 0, 0, 1, 0},
  {&__pyx_n_s_readPos, __pyx_k_readPos, sizeof(__pyx_k_readPos), 0, 0, 1, 1},
  {&__pyx_kp_s_read_2, __pyx_k_read_2, sizeof(__pyx_k_read_2), 0, 0, 1, 0},
  {&__pyx_n_s_read_3, __pyx_k_read_3, sizeof(__pyx_k_read_3), 0, 0, 1, 1},
  {&__pyx_n_s_rec, __pyx_k_rec, sizeof(__pyx_k_rec), 0, 0, 1, 1},
  {&__pyx_n_s_reference_id, __pyx_k_reference_id, sizeof(__pyx_k_reference_id), 0, 0, 1, 1},
  {&__pyx_n_s_rsplit, __pyx_k_rsplit, sizeof(__pyx_k_rsplit), 0, 0, 1, 1},
  {&__pyx_kp_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 0},
  {&__pyx_kp_s_sD, __pyx_k_sD, sizeof(__pyx_k_sD), 0, 0, 1, 0},
  {&__pyx_kp_s_sI, __pyx_k_sI, sizeof(__pyx_k_sI), 0, 0, 1, 0},
  {&__pyx_kp_s_sM, __pyx_k_sM, sizeof(__pyx_k_sM), 0, 0, 1, 0},
  {&__pyx_kp_s_sS, __pyx_k_sS, sizeof(__pyx_k_sS), 0, 0, 1, 0},
  {&__pyx_n_s_s_2, __pyx_k_s_2, sizeof(__pyx_k_s_2), 0, 0, 1, 1},
  {&__pyx_kp_s_s_s, __pyx_k_s_s, sizeof(__pyx_k_s_s), 0, 0, 1, 0},
  {&__pyx_kp_s_s_s_s, __pyx_k_s_s_s, sizeof(__pyx_k_s_s_s), 0, 0, 1, 0},
  {&__pyx_n_s_sam, __pyx_k_sam, sizeof(__pyx_k_sam), 0, 0, 1, 1},
  {&__pyx_n_s_seq, __pyx_k_seq, sizeof(__pyx_k_seq), 0, 0, 1, 1},
  {&__pyx_n_s_sequence, __pyx_k_sequence, sizeof(__pyx_k_sequence), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_stdout, __pyx_k_stdout, sizeof(__pyx_k_stdout), 0, 0, 1, 1},
  {&__pyx_n_s_subprocess, __pyx_k_subprocess, sizeof(__pyx_k_subprocess), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_tag, __pyx_k_tag, sizeof(__pyx_k_tag), 0, 0, 1, 1},
  {&__pyx_n_s_template, __pyx_k_template, sizeof(__pyx_k_template), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_testLayout, __pyx_k_testLayout, sizeof(__pyx_k_testLayout), 0, 0, 1, 1},
  {&__pyx_kp_s_testLayout_bam, __pyx_k_testLayout_bam, sizeof(__pyx_k_testLayout_bam), 0, 0, 1, 0},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_tlen, __pyx_k_tlen, sizeof(__pyx_k_tlen), 0, 0, 1, 1},
  {&__pyx_kp_s_tmpInt_s, __pyx_k_tmpInt_s, sizeof(__pyx_k_tmpInt_s), 0, 0, 1, 0},
  {&__pyx_n_s_tmpName, __pyx_k_tmpName, sizeof(__pyx_k_tmpName), 0, 0, 1, 1},
  {&__pyx_n_s_tmpRead, __pyx_k_tmpRead, sizeof(__pyx_k_tmpRead), 0, 0, 1, 1},
  {&__pyx_n_s_tostring, __pyx_k_tostring, sizeof(__pyx_k_tostring), 0, 0, 1, 1},
  {&__pyx_n_s_u, __pyx_k_u, sizeof(__pyx_k_u), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_utilBMF_ErrorHandling, __pyx_k_utilBMF_ErrorHandling, sizeof(__pyx_k_utilBMF_ErrorHandling), 0, 0, 1, 1},
  {&__pyx_n_s_utilBMF_HTSUtils, __pyx_k_utilBMF_HTSUtils, sizeof(__pyx_k_utilBMF_HTSUtils), 0, 0, 1, 1},
  {&__pyx_n_s_utilBMF_MergePairedAlignments, __pyx_k_utilBMF_MergePairedAlignments, sizeof(__pyx_k_utilBMF_MergePairedAlignments), 0, 0, 1, 1},
  {&__pyx_n_s_uuid, __pyx_k_uuid, sizeof(__pyx_k_uuid), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_wb, __pyx_k_wb, sizeof(__pyx_k_wb), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_kp_s_yggdrasil_workspace_BMFTools_ut, __pyx_k_yggdrasil_workspace_BMFTools_ut, sizeof(__pyx_k_yggdrasil_workspace_BMFTools_ut), 0, 0, 1, 0},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ord = __Pyx_GetBuiltinName(__pyx_n_s_ord); if (!__pyx_builtin_ord) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_map = __Pyx_GetBuiltinName(__pyx_n_s_map); if (!__pyx_builtin_map) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_chr = __Pyx_GetBuiltinName(__pyx_n_s_chr); if (!__pyx_builtin_chr) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "utilBMF/MergePairedAlignments.pyx":121
 *         self.firstMapped = -1
 *         try:
 *             quals = np.array(read.opt("PV").split(","), dtype=np.int32)             # <<<<<<<<<<<<<<
 *         except KeyError:
 *             pl("Watch out - PV tag not set.", level=logging.DEBUG)
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_n_s_PV); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s__2); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "utilBMF/MergePairedAlignments.pyx":123
 *             quals = np.array(read.opt("PV").split(","), dtype=np.int32)
 *         except KeyError:
 *             pl("Watch out - PV tag not set.", level=logging.DEBUG)             # <<<<<<<<<<<<<<
 *             quals = np.array(read.query_qualities, dtype=np.int32)
 *             # Let's make sure that these don't need reversal, too!
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_Watch_out_PV_tag_not_set); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "utilBMF/MergePairedAlignments.pyx":127
 *             # Let's make sure that these don't need reversal, too!
 *         try:
 *             agrees = np.array(read.opt("FA").split(","), dtype=np.int32)             # <<<<<<<<<<<<<<
 *         except KeyError:
 *             pl("Watch out - FA tag not set.", level=logging.DEBUG)
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_n_s_FA); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s__2); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "utilBMF/MergePairedAlignments.pyx":129
 *             agrees = np.array(read.opt("FA").split(","), dtype=np.int32)
 *         except KeyError:
 *             pl("Watch out - FA tag not set.", level=logging.DEBUG)             # <<<<<<<<<<<<<<
 *             agrees = np.array([1] * len(read.sequence), dtype=np.int32)
 * 
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_Watch_out_FA_tag_not_set); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "utilBMF/MergePairedAlignments.pyx":143
 *         self.tagDict = {tag[0]: BamTag.fromtuple(tag) for tag
 *                         in read.get_tags() if tag[0] not in ["PV", "FA"]}
 *         self.isMerged = (read.has_tag("MP") and read.opt("MP") == "T")             # <<<<<<<<<<<<<<
 * 
 *         # Parse out the read cigar.
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_n_s_MP); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "utilBMF/MergePairedAlignments.pyx":203
 *                         quality=-1, agreement=-1, mergeAgreed=1)
 *                 else:
 *                     raise NotImplementedError(             # <<<<<<<<<<<<<<
 *                         "Only MIDS cigar operations currently supported. If "
 *                         "you have an application that could use further "
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Only_MIDS_cigar_operations_curre); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "utilBMF/MergePairedAlignments.pyx":238
 *                 return self.Layout.layouts[tmpInt].pos
 *             # Operation is M, returns the ref position.
 *         raise ImproperArgumentError(             # <<<<<<<<<<<<<<
 *             "ArrayLayout has no 'M' cigar operation positions. "
 *             "This read can't be layed out???")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_ArrayLayout_has_no_M_cigar_opera); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "utilBMF/MergePairedAlignments.pyx":406
 *             return [("PM", PMStr), ("MA", MAStr),
 *                     ("ot", self.tlen), ("mp", self.pnext),
 *                     ("om", self.mapq), ("MP", "T"),             # <<<<<<<<<<<<<<
 *                     ("DG", DGStr), ("DR", DRStr),
 *                     ("PV", self.cGetPVString()),
 */
  __pyx_tuple__13 = PyTuple_Pack(2, __pyx_n_s_MP, __pyx_n_s_T); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "utilBMF/MergePairedAlignments.pyx":413
 *             return [("PM", PMStr), ("MA", MAStr),
 *                     ("ot", self.tlen), ("mp", self.pnext),
 *                     ("om", self.mapq), ("MP", "T"),             # <<<<<<<<<<<<<<
 *                     ("PV", self.cGetPVString()),
 *                     ("FA", self.cGetFAString())]
 */
  __pyx_tuple__14 = PyTuple_Pack(2, __pyx_n_s_MP, __pyx_n_s_T); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "utilBMF/MergePairedAlignments.pyx":590
 *     ReadIndex.build()
 *     if(readLength < 0):
 *         pl("readLength not set - inferring.")             # <<<<<<<<<<<<<<
 *         readLength = len(inHandle.next().seq)
 *         inHandle = pysam.AlignmentFile(inBAM, "rb")
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_readLength_not_set_inferring); if (unlikely(!__pyx_tuple__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "utilBMF/MergePairedAlignments.pyx":593
 *         readLength = len(inHandle.next().seq)
 *         inHandle = pysam.AlignmentFile(inBAM, "rb")
 *     outHandle = pysam.AlignmentFile("-", "w",             # <<<<<<<<<<<<<<
 *                                     header=inHandle.header)
 *     outHandleMerge = sys.stdout
 */
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_kp_s__17, __pyx_n_s_w); if (unlikely(!__pyx_tuple__18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "utilBMF/MergePairedAlignments.pyx":626
 *         else:
 *             print("Read is neither read 1 nor read 2: %s" % (not read.is_read1 and not read.is_read2))
 *             sys.exit(1)             # <<<<<<<<<<<<<<
 *         print("Layouts made, now trying to merge. About to assert shared names.")
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "utilBMF/MergePairedAlignments.pyx":742
 *     cdef int cigarOpLen
 *     cdef int newCigarOpLen
 *     cdef py_array chars = cs_to_ia("".join(rsplit("[0-9]+", cigar)[1:]))             # <<<<<<<<<<<<<<
 *     cdef py_array Lengths = array('i', [int(tmpIntStr) for tmpIntStr in
 *                                         rsplit("[A-Z]", cigar)[:len(chars)]])
 */
  __pyx_slice__21 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__21);
  __Pyx_GIVEREF(__pyx_slice__21);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__22)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__23)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__24)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__25)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":806
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__26)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "../../../mounts/anaconda/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":826
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__27)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "FromPyStructUtility":19
 *         value = obj['pos']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'pos'")             # <<<<<<<<<<<<<<
 *     result.pos = value
 *     try:
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at); if (unlikely(!__pyx_tuple__56)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "FromPyStructUtility":24
 *         value = obj['readPos']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'readPos'")             # <<<<<<<<<<<<<<
 *     result.readPos = value
 *     try:
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_2); if (unlikely(!__pyx_tuple__57)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "FromPyStructUtility":29
 *         value = obj['quality']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'quality'")             # <<<<<<<<<<<<<<
 *     result.quality = value
 *     try:
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_3); if (unlikely(!__pyx_tuple__58)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "FromPyStructUtility":34
 *         value = obj['agreement']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'agreement'")             # <<<<<<<<<<<<<<
 *     result.agreement = value
 *     try:
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_4); if (unlikely(!__pyx_tuple__59)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "FromPyStructUtility":39
 *         value = obj['operation']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'operation'")             # <<<<<<<<<<<<<<
 *     result.operation = value
 *     try:
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_5); if (unlikely(!__pyx_tuple__60)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "FromPyStructUtility":44
 *         value = obj['base']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'base'")             # <<<<<<<<<<<<<<
 *     result.base = value
 *     try:
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_6); if (unlikely(!__pyx_tuple__61)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "FromPyStructUtility":49
 *         value = obj['mergeAgreed']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'mergeAgreed'")             # <<<<<<<<<<<<<<
 *     result.mergeAgreed = value
 *     return result
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_7); if (unlikely(!__pyx_tuple__62)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "utilBMF/MergePairedAlignments.pyx":33
 * ##DEFINES
 * 
 * oagsk = oag("firstMapped")             # <<<<<<<<<<<<<<
 * oagbase = oag("base")
 * oagop = oag("operation")
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_n_s_firstMapped); if (unlikely(!__pyx_tuple__63)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "utilBMF/MergePairedAlignments.pyx":34
 * 
 * oagsk = oag("firstMapped")
 * oagbase = oag("base")             # <<<<<<<<<<<<<<
 * oagop = oag("operation")
 * oagqual = oag("quality")
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_n_s_base); if (unlikely(!__pyx_tuple__64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "utilBMF/MergePairedAlignments.pyx":35
 * oagsk = oag("firstMapped")
 * oagbase = oag("base")
 * oagop = oag("operation")             # <<<<<<<<<<<<<<
 * oagqual = oag("quality")
 * oagag = oag("agreement")
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_n_s_operation); if (unlikely(!__pyx_tuple__65)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "utilBMF/MergePairedAlignments.pyx":36
 * oagbase = oag("base")
 * oagop = oag("operation")
 * oagqual = oag("quality")             # <<<<<<<<<<<<<<
 * oagag = oag("agreement")
 * oagtag = oag("tag")
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_n_s_quality); if (unlikely(!__pyx_tuple__66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "utilBMF/MergePairedAlignments.pyx":37
 * oagop = oag("operation")
 * oagqual = oag("quality")
 * oagag = oag("agreement")             # <<<<<<<<<<<<<<
 * oagtag = oag("tag")
 * oig0 = oig(0)
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_n_s_agreement); if (unlikely(!__pyx_tuple__67)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "utilBMF/MergePairedAlignments.pyx":38
 * oagqual = oag("quality")
 * oagag = oag("agreement")
 * oagtag = oag("tag")             # <<<<<<<<<<<<<<
 * oig0 = oig(0)
 * oig1 = oig(1)
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_n_s_tag); if (unlikely(!__pyx_tuple__68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "utilBMF/MergePairedAlignments.pyx":39
 * oagag = oag("agreement")
 * oagtag = oag("tag")
 * oig0 = oig(0)             # <<<<<<<<<<<<<<
 * oig1 = oig(1)
 * 
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__69)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "utilBMF/MergePairedAlignments.pyx":40
 * oagtag = oag("tag")
 * oig0 = oig(0)
 * oig1 = oig(1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__70)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "utilBMF/MergePairedAlignments.pyx":66
 * 
 * @cython.returns(bint)
 * def lambda1None(tuple i):             # <<<<<<<<<<<<<<
 *     """
 *     If a tuple in a cigar returns true for this function,
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_n_s_i); if (unlikely(!__pyx_tuple__71)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yggdrasil_workspace_BMFTools_ut, __pyx_n_s_lambda1None, 66, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "utilBMF/MergePairedAlignments.pyx":76
 * 
 * @cython.returns(int)
 * def getFirstMappedRefPos(AlignedSegment_t rec):             # <<<<<<<<<<<<<<
 *     cdef tuple i
 *     return [i for i in rec.aligned_pairs if i[1] is not None][0][1]
 */
  __pyx_tuple__73 = PyTuple_Pack(2, __pyx_n_s_rec, __pyx_n_s_i); if (unlikely(!__pyx_tuple__73)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yggdrasil_workspace_BMFTools_ut, __pyx_n_s_getFirstMappedRefPos, 76, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "utilBMF/MergePairedAlignments.pyx":578
 * 
 * 
 * def MergePairedAlignments(cystr inBAM, cystr outBAM=None,             # <<<<<<<<<<<<<<
 *                           int readLength=-1,
 *                           cystr outMerge=None):
 */
  __pyx_tuple__75 = PyTuple_Pack(15, __pyx_n_s_inBAM, __pyx_n_s_outBAM, __pyx_n_s_readLength, __pyx_n_s_outMerge, __pyx_n_s_read, __pyx_n_s_tmpRead, __pyx_n_s_Layout1, __pyx_n_s_Layout2, __pyx_n_s_count, __pyx_n_s_newSamRead, __pyx_n_s_tmpName, __pyx_n_s_inHandle, __pyx_n_s_ReadIndex, __pyx_n_s_outHandle, __pyx_n_s_outHandleMerge); if (unlikely(!__pyx_tuple__75)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(4, 0, 15, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yggdrasil_workspace_BMFTools_ut, __pyx_n_s_MergePairedAlignments, 578, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "utilBMF/MergePairedAlignments.pyx":702
 * 
 * 
 * def testLayout(cystr inBAM, cystr outBAM=None):             # <<<<<<<<<<<<<<
 *     cdef AlignedSegment_t read
 *     cdef Layout_t layout
 */
  __pyx_tuple__77 = PyTuple_Pack(6, __pyx_n_s_inBAM, __pyx_n_s_outBAM, __pyx_n_s_read, __pyx_n_s_layout, __pyx_n_s_inHandle, __pyx_n_s_outHandle); if (unlikely(!__pyx_tuple__77)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yggdrasil_workspace_BMFTools_ut, __pyx_n_s_testLayout, 702, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_61 = PyInt_FromLong(61); if (unlikely(!__pyx_int_61)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_68 = PyInt_FromLong(68); if (unlikely(!__pyx_int_68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_72 = PyInt_FromLong(72); if (unlikely(!__pyx_int_72)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_73 = PyInt_FromLong(73); if (unlikely(!__pyx_int_73)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_77 = PyInt_FromLong(77); if (unlikely(!__pyx_int_77)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_78 = PyInt_FromLong(78); if (unlikely(!__pyx_int_78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_80 = PyInt_FromLong(80); if (unlikely(!__pyx_int_80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_83 = PyInt_FromLong(83); if (unlikely(!__pyx_int_83)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_88 = PyInt_FromLong(88); if (unlikely(!__pyx_int_88)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initMergePairedAlignments(void); /*proto*/
PyMODINIT_FUNC initMergePairedAlignments(void)
#else
PyMODINIT_FUNC PyInit_MergePairedAlignments(void); /*proto*/
PyMODINIT_FUNC PyInit_MergePairedAlignments(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_MergePairedAlignments(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("MergePairedAlignments", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_utilBMF__MergePairedAlignments) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "utilBMF.MergePairedAlignments")) {
      if (unlikely(PyDict_SetItemString(modules, "utilBMF.MergePairedAlignments", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  __pyx_v_7utilBMF_21MergePairedAlignments_CigarDict = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_7utilBMF_21MergePairedAlignments_CigarStrDict = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_7utilBMF_21MergePairedAlignments_oagtag = Py_None; Py_INCREF(Py_None);
  __pyx_v_7utilBMF_21MergePairedAlignments_oig0 = Py_None; Py_INCREF(Py_None);
  __pyx_v_7utilBMF_21MergePairedAlignments_oig1 = Py_None; Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  if (__Pyx_ExportVoidPtr(__pyx_n_s_CigarDict, (void *)&__pyx_v_7utilBMF_21MergePairedAlignments_CigarDict, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportVoidPtr(__pyx_n_s_CigarStrDict, (void *)&__pyx_v_7utilBMF_21MergePairedAlignments_CigarStrDict, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportVoidPtr(__pyx_n_s_oagtag, (void *)&__pyx_v_7utilBMF_21MergePairedAlignments_oagtag, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportVoidPtr(__pyx_n_s_oig0, (void *)&__pyx_v_7utilBMF_21MergePairedAlignments_oig0, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportVoidPtr(__pyx_n_s_oig1, (void *)&__pyx_v_7utilBMF_21MergePairedAlignments_oig1, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("getLayoutLen", (void (*)(void))__pyx_f_7utilBMF_21MergePairedAlignments_getLayoutLen, "int (__pyx_t_7utilBMF_21MergePairedAlignments_AlignedSegment_t)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("FlattenCigarString", (void (*)(void))__pyx_f_7utilBMF_21MergePairedAlignments_FlattenCigarString, "__pyx_t_7utilBMF_8HTSUtils_cystr (__pyx_t_7utilBMF_8HTSUtils_cystr, int __pyx_skip_dispatch)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("cFlattenCigarString", (void (*)(void))__pyx_f_7utilBMF_21MergePairedAlignments_cFlattenCigarString, "__pyx_t_7utilBMF_8HTSUtils_cystr (__pyx_t_7utilBMF_8HTSUtils_cystr)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("ALPToStr", (void (*)(void))__pyx_f_7utilBMF_21MergePairedAlignments_ALPToStr, "__pyx_t_7utilBMF_8HTSUtils_cystr (__pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayoutPos_t, int __pyx_skip_dispatch)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Type init code ---*/
  __pyx_vtabptr_7utilBMF_21MergePairedAlignments_Layout = &__pyx_vtable_7utilBMF_21MergePairedAlignments_Layout;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.getFirstAlignedRefPos = (int (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getFirstAlignedRefPos;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.getLastAlignedRefPos = (int (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getLastAlignedRefPos;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.getFirstMappedReadPos = (int (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getFirstMappedReadPos;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.getAlignmentStart = (int (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getAlignmentStart;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.cPosIsMapped = (int (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cPosIsMapped;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.posIsMapped = (int (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int, int __pyx_skip_dispatch))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_posIsMapped;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.MergeLayouts_in_place = (char (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, __pyx_t_7utilBMF_21MergePairedAlignments_ArrayLayout_t))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_MergeLayouts_in_place;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.getMergedPositions = (PyArrayObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getMergedPositions;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.getAgreement = (PyArrayObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int __pyx_skip_dispatch))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getAgreement;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.cGetAgreement = (PyArrayObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetAgreement;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.getPVString = (__pyx_t_7utilBMF_8HTSUtils_cystr (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int __pyx_skip_dispatch))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getPVString;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.cGetPVString = (__pyx_t_7utilBMF_8HTSUtils_cystr (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetPVString;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.getFAString = (__pyx_t_7utilBMF_8HTSUtils_cystr (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int __pyx_skip_dispatch))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getFAString;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.cGetFAString = (__pyx_t_7utilBMF_8HTSUtils_cystr (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetFAString;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.getOperations = (PyArrayObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int __pyx_skip_dispatch))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getOperations;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.cGetOperations = (PyArrayObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetOperations;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.cGetCigarString = (__pyx_t_7utilBMF_8HTSUtils_cystr (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetCigarString;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.getCigarString = (__pyx_t_7utilBMF_8HTSUtils_cystr (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int __pyx_skip_dispatch))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getCigarString;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.cGetQual = (PyArrayObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetQual;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.getQual = (PyArrayObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int __pyx_skip_dispatch))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getQual;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.cGetQualString = (__pyx_t_7utilBMF_8HTSUtils_cystr (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetQualString;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.getQualString = (__pyx_t_7utilBMF_8HTSUtils_cystr (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int __pyx_skip_dispatch))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getQualString;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.cGetSeqArr = (PyArrayObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetSeqArr;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.getSeqArr = (PyArrayObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int __pyx_skip_dispatch))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getSeqArr;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.getSeq = (__pyx_t_7utilBMF_8HTSUtils_cystr (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, int __pyx_skip_dispatch))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getSeq;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.get_merge_tags = (PyObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_get_merge_tags;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.get_tag_string = (PyObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_get_tag_string;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.cGetGenomicDiscordantPositions = (PyArrayObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetGenomicDiscordantPositions;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.cGetReadDiscordantPositions = (PyArrayObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetReadDiscordantPositions;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.getMergeAgreements = (PyArrayObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_getMergeAgreements;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.__pyx___sam__ = (__pyx_t_7utilBMF_8HTSUtils_cystr (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, __pyx_t_7utilBMF_21MergePairedAlignments_Layout_t, int __pyx_skip_dispatch))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout___sam__;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.__pyx___csam__ = (__pyx_t_7utilBMF_8HTSUtils_cystr (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, __pyx_t_7utilBMF_21MergePairedAlignments_Layout_t))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout___csam__;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.update_read_positions = (PyObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_update_read_positions;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.set_merge_tags_BT = (PyObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_set_merge_tags_BT;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.cGetAgreementSlice = (PyArrayObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetAgreementSlice *__pyx_optional_args))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetAgreementSlice;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.cGetQualSlice = (PyArrayObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetQualSlice *__pyx_optional_args))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetQualSlice;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.cGetCigarStringSlice = (__pyx_t_7utilBMF_8HTSUtils_cystr (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetCigarStringSlice *__pyx_optional_args))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetCigarStringSlice;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.cGetSeqArrSlice = (PyArrayObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetSeqArrSlice *__pyx_optional_args))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetSeqArrSlice;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.cGetOperationsSlice = (PyArrayObject *(*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetOperationsSlice *__pyx_optional_args))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetOperationsSlice;
  __pyx_vtable_7utilBMF_21MergePairedAlignments_Layout.cGetQualStringSlice = (__pyx_t_7utilBMF_8HTSUtils_cystr (*)(struct __pyx_obj_7utilBMF_21MergePairedAlignments_Layout *, struct __pyx_opt_args_7utilBMF_21MergePairedAlignments_6Layout_cGetQualStringSlice *__pyx_optional_args))__pyx_f_7utilBMF_21MergePairedAlignments_6Layout_cGetQualStringSlice;
  if (PyType_Ready(&__pyx_type_7utilBMF_21MergePairedAlignments_Layout) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7utilBMF_21MergePairedAlignments_Layout.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_7utilBMF_21MergePairedAlignments_Layout.tp_dict, __pyx_vtabptr_7utilBMF_21MergePairedAlignments_Layout) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Layout", (PyObject *)&__pyx_type_7utilBMF_21MergePairedAlignments_Layout) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7utilBMF_21MergePairedAlignments_Layout = &__pyx_type_7utilBMF_21MergePairedAlignments_Layout;
  if (PyType_Ready(&__pyx_type_7utilBMF_21MergePairedAlignments_ListBool) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_7utilBMF_21MergePairedAlignments_ListBool.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "ListBool", (PyObject *)&__pyx_type_7utilBMF_21MergePairedAlignments_ListBool) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7utilBMF_21MergePairedAlignments_ListBool = &__pyx_type_7utilBMF_21MergePairedAlignments_ListBool;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_5array_array = __Pyx_ImportType("array", "array", sizeof(arrayobject), 0); if (unlikely(!__pyx_ptype_7cpython_5array_array)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_6cfaidx_FastaFile = __Pyx_ImportType("pysam.cfaidx", "FastaFile", sizeof(struct __pyx_obj_5pysam_6cfaidx_FastaFile), 1); if (unlikely(!__pyx_ptype_5pysam_6cfaidx_FastaFile)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_6cfaidx_FastaFile = (struct __pyx_vtabstruct_5pysam_6cfaidx_FastaFile*)__Pyx_GetVtable(__pyx_ptype_5pysam_6cfaidx_FastaFile->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_6cfaidx_FastaFile)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_6cfaidx_FastqProxy = __Pyx_ImportType("pysam.cfaidx", "FastqProxy", sizeof(struct __pyx_obj_5pysam_6cfaidx_FastqProxy), 1); if (unlikely(!__pyx_ptype_5pysam_6cfaidx_FastqProxy)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_6cfaidx_FastxFile = __Pyx_ImportType("pysam.cfaidx", "FastxFile", sizeof(struct __pyx_obj_5pysam_6cfaidx_FastxFile), 1); if (unlikely(!__pyx_ptype_5pysam_6cfaidx_FastxFile)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_6cfaidx_FastxFile = (struct __pyx_vtabstruct_5pysam_6cfaidx_FastxFile*)__Pyx_GetVtable(__pyx_ptype_5pysam_6cfaidx_FastxFile->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_6cfaidx_FastxFile)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_6cfaidx_FastqFile = __Pyx_ImportType("pysam.cfaidx", "FastqFile", sizeof(struct __pyx_obj_5pysam_6cfaidx_FastqFile), 1); if (unlikely(!__pyx_ptype_5pysam_6cfaidx_FastqFile)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_6cfaidx_FastqFile = (struct __pyx_vtabstruct_5pysam_6cfaidx_FastqFile*)__Pyx_GetVtable(__pyx_ptype_5pysam_6cfaidx_FastqFile->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_6cfaidx_FastqFile)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_6cfaidx_Fastafile = __Pyx_ImportType("pysam.cfaidx", "Fastafile", sizeof(struct __pyx_obj_5pysam_6cfaidx_Fastafile), 1); if (unlikely(!__pyx_ptype_5pysam_6cfaidx_Fastafile)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_6cfaidx_Fastafile = (struct __pyx_vtabstruct_5pysam_6cfaidx_Fastafile*)__Pyx_GetVtable(__pyx_ptype_5pysam_6cfaidx_Fastafile->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_6cfaidx_Fastafile)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_6cfaidx_Fastqfile = __Pyx_ImportType("pysam.cfaidx", "Fastqfile", sizeof(struct __pyx_obj_5pysam_6cfaidx_Fastqfile), 1); if (unlikely(!__pyx_ptype_5pysam_6cfaidx_Fastqfile)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_6cfaidx_Fastqfile = (struct __pyx_vtabstruct_5pysam_6cfaidx_Fastqfile*)__Pyx_GetVtable(__pyx_ptype_5pysam_6cfaidx_Fastqfile->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_6cfaidx_Fastqfile)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_6cfaidx_pFastqFile = __Pyx_ImportType("pysam.cfaidx", "pFastqFile", sizeof(struct __pyx_obj_5pysam_6cfaidx_pFastqFile), 1); if (unlikely(!__pyx_ptype_5pysam_6cfaidx_pFastqFile)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_6cfaidx_pFastqFile = (struct __pyx_vtabstruct_5pysam_6cfaidx_pFastqFile*)__Pyx_GetVtable(__pyx_ptype_5pysam_6cfaidx_pFastqFile->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_6cfaidx_pFastqFile)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_6cfaidx_pFastqProxy = __Pyx_ImportType("pysam.cfaidx", "pFastqProxy", sizeof(struct __pyx_obj_5pysam_6cfaidx_pFastqProxy), 1); if (unlikely(!__pyx_ptype_5pysam_6cfaidx_pFastqProxy)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_6cfaidx_pFastqProxy = (struct __pyx_vtabstruct_5pysam_6cfaidx_pFastqProxy*)__Pyx_GetVtable(__pyx_ptype_5pysam_6cfaidx_pFastqProxy->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_6cfaidx_pFastqProxy)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_14calignmentfile_AlignedSegment = __Pyx_ImportType("pysam.calignmentfile", "AlignedSegment", sizeof(struct __pyx_obj_5pysam_14calignmentfile_AlignedSegment), 1); if (unlikely(!__pyx_ptype_5pysam_14calignmentfile_AlignedSegment)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_14calignmentfile_AlignedSegment = (struct __pyx_vtabstruct_5pysam_14calignmentfile_AlignedSegment*)__Pyx_GetVtable(__pyx_ptype_5pysam_14calignmentfile_AlignedSegment->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_14calignmentfile_AlignedSegment)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_14calignmentfile_AlignmentFile = __Pyx_ImportType("pysam.calignmentfile", "AlignmentFile", sizeof(struct __pyx_obj_5pysam_14calignmentfile_AlignmentFile), 1); if (unlikely(!__pyx_ptype_5pysam_14calignmentfile_AlignmentFile)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_14calignmentfile_AlignmentFile = (struct __pyx_vtabstruct_5pysam_14calignmentfile_AlignmentFile*)__Pyx_GetVtable(__pyx_ptype_5pysam_14calignmentfile_AlignmentFile->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_14calignmentfile_AlignmentFile)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_14calignmentfile_PileupColumn = __Pyx_ImportType("pysam.calignmentfile", "PileupColumn", sizeof(struct __pyx_obj_5pysam_14calignmentfile_PileupColumn), 1); if (unlikely(!__pyx_ptype_5pysam_14calignmentfile_PileupColumn)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_14calignmentfile_PileupRead = __Pyx_ImportType("pysam.calignmentfile", "PileupRead", sizeof(struct __pyx_obj_5pysam_14calignmentfile_PileupRead), 1); if (unlikely(!__pyx_ptype_5pysam_14calignmentfile_PileupRead)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_14calignmentfile_IteratorRow = __Pyx_ImportType("pysam.calignmentfile", "IteratorRow", sizeof(struct __pyx_obj_5pysam_14calignmentfile_IteratorRow), 1); if (unlikely(!__pyx_ptype_5pysam_14calignmentfile_IteratorRow)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_14calignmentfile_IteratorRowRegion = __Pyx_ImportType("pysam.calignmentfile", "IteratorRowRegion", sizeof(struct __pyx_obj_5pysam_14calignmentfile_IteratorRowRegion), 1); if (unlikely(!__pyx_ptype_5pysam_14calignmentfile_IteratorRowRegion)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_14calignmentfile_IteratorRowRegion = (struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorRowRegion*)__Pyx_GetVtable(__pyx_ptype_5pysam_14calignmentfile_IteratorRowRegion->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_14calignmentfile_IteratorRowRegion)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_14calignmentfile_IteratorRowHead = __Pyx_ImportType("pysam.calignmentfile", "IteratorRowHead", sizeof(struct __pyx_obj_5pysam_14calignmentfile_IteratorRowHead), 1); if (unlikely(!__pyx_ptype_5pysam_14calignmentfile_IteratorRowHead)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_14calignmentfile_IteratorRowHead = (struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorRowHead*)__Pyx_GetVtable(__pyx_ptype_5pysam_14calignmentfile_IteratorRowHead->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_14calignmentfile_IteratorRowHead)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_14calignmentfile_IteratorRowAll = __Pyx_ImportType("pysam.calignmentfile", "IteratorRowAll", sizeof(struct __pyx_obj_5pysam_14calignmentfile_IteratorRowAll), 1); if (unlikely(!__pyx_ptype_5pysam_14calignmentfile_IteratorRowAll)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_14calignmentfile_IteratorRowAll = (struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorRowAll*)__Pyx_GetVtable(__pyx_ptype_5pysam_14calignmentfile_IteratorRowAll->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_14calignmentfile_IteratorRowAll)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_14calignmentfile_IteratorRowAllRefs = __Pyx_ImportType("pysam.calignmentfile", "IteratorRowAllRefs", sizeof(struct __pyx_obj_5pysam_14calignmentfile_IteratorRowAllRefs), 1); if (unlikely(!__pyx_ptype_5pysam_14calignmentfile_IteratorRowAllRefs)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_14calignmentfile_IteratorRowSelection = __Pyx_ImportType("pysam.calignmentfile", "IteratorRowSelection", sizeof(struct __pyx_obj_5pysam_14calignmentfile_IteratorRowSelection), 1); if (unlikely(!__pyx_ptype_5pysam_14calignmentfile_IteratorRowSelection)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_14calignmentfile_IteratorRowSelection = (struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorRowSelection*)__Pyx_GetVtable(__pyx_ptype_5pysam_14calignmentfile_IteratorRowSelection->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_14calignmentfile_IteratorRowSelection)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_14calignmentfile_IteratorColumn = __Pyx_ImportType("pysam.calignmentfile", "IteratorColumn", sizeof(struct __pyx_obj_5pysam_14calignmentfile_IteratorColumn), 1); if (unlikely(!__pyx_ptype_5pysam_14calignmentfile_IteratorColumn)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_14calignmentfile_IteratorColumn = (struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorColumn*)__Pyx_GetVtable(__pyx_ptype_5pysam_14calignmentfile_IteratorColumn->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_14calignmentfile_IteratorColumn)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_14calignmentfile_IteratorColumnRegion = __Pyx_ImportType("pysam.calignmentfile", "IteratorColumnRegion", sizeof(struct __pyx_obj_5pysam_14calignmentfile_IteratorColumnRegion), 1); if (unlikely(!__pyx_ptype_5pysam_14calignmentfile_IteratorColumnRegion)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_14calignmentfile_IteratorColumnRegion = (struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorColumnRegion*)__Pyx_GetVtable(__pyx_ptype_5pysam_14calignmentfile_IteratorColumnRegion->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_14calignmentfile_IteratorColumnRegion)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_14calignmentfile_IteratorColumnAllRefs = __Pyx_ImportType("pysam.calignmentfile", "IteratorColumnAllRefs", sizeof(struct __pyx_obj_5pysam_14calignmentfile_IteratorColumnAllRefs), 1); if (unlikely(!__pyx_ptype_5pysam_14calignmentfile_IteratorColumnAllRefs)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_14calignmentfile_IteratorColumnAllRefs = (struct __pyx_vtabstruct_5pysam_14calignmentfile_IteratorColumnAllRefs*)__Pyx_GetVtable(__pyx_ptype_5pysam_14calignmentfile_IteratorColumnAllRefs->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_14calignmentfile_IteratorColumnAllRefs)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_14calignmentfile_IndexedReads = __Pyx_ImportType("pysam.calignmentfile", "IndexedReads", sizeof(struct __pyx_obj_5pysam_14calignmentfile_IndexedReads), 1); if (unlikely(!__pyx_ptype_5pysam_14calignmentfile_IndexedReads)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_10TabProxies_TupleProxy = __Pyx_ImportType("pysam.TabProxies", "TupleProxy", sizeof(struct __pyx_obj_5pysam_10TabProxies_TupleProxy), 1); if (unlikely(!__pyx_ptype_5pysam_10TabProxies_TupleProxy)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_10TabProxies_TupleProxy = (struct __pyx_vtabstruct_5pysam_10TabProxies_TupleProxy*)__Pyx_GetVtable(__pyx_ptype_5pysam_10TabProxies_TupleProxy->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_10TabProxies_TupleProxy)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_10TabProxies_GTFProxy = __Pyx_ImportType("pysam.TabProxies", "GTFProxy", sizeof(struct __pyx_obj_5pysam_10TabProxies_GTFProxy), 1); if (unlikely(!__pyx_ptype_5pysam_10TabProxies_GTFProxy)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_10TabProxies_GTFProxy = (struct __pyx_vtabstruct_5pysam_10TabProxies_GTFProxy*)__Pyx_GetVtable(__pyx_ptype_5pysam_10TabProxies_GTFProxy->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_10TabProxies_GTFProxy)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_10TabProxies_NamedTupleProxy = __Pyx_ImportType("pysam.TabProxies", "NamedTupleProxy", sizeof(struct __pyx_obj_5pysam_10TabProxies_NamedTupleProxy), 1); if (unlikely(!__pyx_ptype_5pysam_10TabProxies_NamedTupleProxy)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_10TabProxies_NamedTupleProxy = (struct __pyx_vtabstruct_5pysam_10TabProxies_NamedTupleProxy*)__Pyx_GetVtable(__pyx_ptype_5pysam_10TabProxies_NamedTupleProxy->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_10TabProxies_NamedTupleProxy)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_10TabProxies_BedProxy = __Pyx_ImportType("pysam.TabProxies", "BedProxy", sizeof(struct __pyx_obj_5pysam_10TabProxies_BedProxy), 1); if (unlikely(!__pyx_ptype_5pysam_10TabProxies_BedProxy)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_10TabProxies_BedProxy = (struct __pyx_vtabstruct_5pysam_10TabProxies_BedProxy*)__Pyx_GetVtable(__pyx_ptype_5pysam_10TabProxies_BedProxy->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_10TabProxies_BedProxy)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5pysam_10TabProxies_VCFProxy = __Pyx_ImportType("pysam.TabProxies", "VCFProxy", sizeof(struct __pyx_obj_5pysam_10TabProxies_VCFProxy), 1); if (unlikely(!__pyx_ptype_5pysam_10TabProxies_VCFProxy)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5pysam_10TabProxies_VCFProxy = (struct __pyx_vtabstruct_5pysam_10TabProxies_VCFProxy*)__Pyx_GetVtable(__pyx_ptype_5pysam_10TabProxies_VCFProxy->tp_dict); if (unlikely(!__pyx_vtabptr_5pysam_10TabProxies_VCFProxy)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7utilBMF_8HTSUtils_pPileupRead = __Pyx_ImportType("utilBMF.HTSUtils", "pPileupRead", sizeof(struct __pyx_obj_7utilBMF_8HTSUtils_pPileupRead), 1); if (unlikely(!__pyx_ptype_7utilBMF_8HTSUtils_pPileupRead)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_7utilBMF_8HTSUtils_pPileupRead = (struct __pyx_vtabstruct_7utilBMF_8HTSUtils_pPileupRead*)__Pyx_GetVtable(__pyx_ptype_7utilBMF_8HTSUtils_pPileupRead->tp_dict); if (unlikely(!__pyx_vtabptr_7utilBMF_8HTSUtils_pPileupRead)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7utilBMF_8HTSUtils_PileupReadPair = __Pyx_ImportType("utilBMF.HTSUtils", "PileupReadPair", sizeof(struct __pyx_obj_7utilBMF_8HTSUtils_PileupReadPair), 1); if (unlikely(!__pyx_ptype_7utilBMF_8HTSUtils_PileupReadPair)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7utilBMF_8HTSUtils_ReadPair = __Pyx_ImportType("utilBMF.HTSUtils", "ReadPair", sizeof(struct __pyx_obj_7utilBMF_8HTSUtils_ReadPair), 1); if (unlikely(!__pyx_ptype_7utilBMF_8HTSUtils_ReadPair)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7utilBMF_8HTSUtils_AbstractIndelContainer = __Pyx_ImportType("utilBMF.HTSUtils", "AbstractIndelContainer", sizeof(struct __pyx_obj_7utilBMF_8HTSUtils_AbstractIndelContainer), 1); if (unlikely(!__pyx_ptype_7utilBMF_8HTSUtils_AbstractIndelContainer)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7utilBMF_8HTSUtils_Deletion = __Pyx_ImportType("utilBMF.HTSUtils", "Deletion", sizeof(struct __pyx_obj_7utilBMF_8HTSUtils_Deletion), 1); if (unlikely(!__pyx_ptype_7utilBMF_8HTSUtils_Deletion)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7utilBMF_8HTSUtils_Insertion = __Pyx_ImportType("utilBMF.HTSUtils", "Insertion", sizeof(struct __pyx_obj_7utilBMF_8HTSUtils_Insertion), 1); if (unlikely(!__pyx_ptype_7utilBMF_8HTSUtils_Insertion)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7utilBMF_8HTSUtils_IndelQuiver = __Pyx_ImportType("utilBMF.HTSUtils", "IndelQuiver", sizeof(struct __pyx_obj_7utilBMF_8HTSUtils_IndelQuiver), 1); if (unlikely(!__pyx_ptype_7utilBMF_8HTSUtils_IndelQuiver)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7utilBMF_8HTSUtils_IDVCFLine = __Pyx_ImportType("utilBMF.HTSUtils", "IDVCFLine", sizeof(struct __pyx_obj_7utilBMF_8HTSUtils_IDVCFLine), 1); if (unlikely(!__pyx_ptype_7utilBMF_8HTSUtils_IDVCFLine)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7utilBMF_8HTSUtils_pFastqProxy = __Pyx_ImportType("utilBMF.HTSUtils", "pFastqProxy", sizeof(struct __pyx_obj_7utilBMF_8HTSUtils_pFastqProxy), 1); if (unlikely(!__pyx_ptype_7utilBMF_8HTSUtils_pFastqProxy)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_7utilBMF_8HTSUtils_pFastqProxy = (struct __pyx_vtabstruct_7utilBMF_8HTSUtils_pFastqProxy*)__Pyx_GetVtable(__pyx_ptype_7utilBMF_8HTSUtils_pFastqProxy->tp_dict); if (unlikely(!__pyx_vtabptr_7utilBMF_8HTSUtils_pFastqProxy)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7utilBMF_8HTSUtils_pFastqFile = __Pyx_ImportType("utilBMF.HTSUtils", "pFastqFile", sizeof(struct __pyx_obj_7utilBMF_8HTSUtils_pFastqFile), 1); if (unlikely(!__pyx_ptype_7utilBMF_8HTSUtils_pFastqFile)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_7utilBMF_8HTSUtils_pFastqFile = (struct __pyx_vtabstruct_7utilBMF_8HTSUtils_pFastqFile*)__Pyx_GetVtable(__pyx_ptype_7utilBMF_8HTSUtils_pFastqFile->tp_dict); if (unlikely(!__pyx_vtabptr_7utilBMF_8HTSUtils_pFastqFile)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7utilBMF_8HTSUtils_BamTag = __Pyx_ImportType("utilBMF.HTSUtils", "BamTag", sizeof(struct __pyx_obj_7utilBMF_8HTSUtils_BamTag), 1); if (unlikely(!__pyx_ptype_7utilBMF_8HTSUtils_BamTag)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7utilBMF_10PysamUtils_PairwiseAlignmentFile = __Pyx_ImportType("utilBMF.PysamUtils", "PairwiseAlignmentFile", sizeof(struct __pyx_obj_7utilBMF_10PysamUtils_PairwiseAlignmentFile), 1); if (unlikely(!__pyx_ptype_7utilBMF_10PysamUtils_PairwiseAlignmentFile)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("utilBMF.HTSUtils"); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "PysamToChrDict", (void **)&__pyx_vp_7utilBMF_8HTSUtils_PysamToChrDict, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "ph2chrDict", (void **)&__pyx_vp_7utilBMF_8HTSUtils_ph2chrDict, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "chr2ph", (void **)&__pyx_vp_7utilBMF_8HTSUtils_chr2ph, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "chr2phStr", (void **)&__pyx_vp_7utilBMF_8HTSUtils_chr2phStr, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "int2Str", (void **)&__pyx_vp_7utilBMF_8HTSUtils_int2Str, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "TagTypeDict", (void **)&__pyx_vp_7utilBMF_8HTSUtils_TagTypeDict, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "nucList", (void **)&__pyx_vp_7utilBMF_8HTSUtils_nucList, "PyObject *") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*--- Function import code ---*/
  __pyx_t_2 = __Pyx_ImportModule("utilBMF.cstring"); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_2, "cs_to_ia", (void (**)(void))&__pyx_f_7utilBMF_7cstring_cs_to_ia, "__pyx_t_7utilBMF_7cstring_py_array (__pyx_t_7utilBMF_7cstring_cystr)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_2, "cs_to_ph", (void (**)(void))&__pyx_f_7utilBMF_7cstring_cs_to_ph, "__pyx_t_7utilBMF_7cstring_py_array (__pyx_t_7utilBMF_7cstring_cystr)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_2, "RevCmpImplicit", (void (**)(void))&__pyx_f_7utilBMF_7cstring_RevCmpImplicit, "__pyx_t_7utilBMF_7cstring_cystr (__pyx_t_7utilBMF_7cstring_cystr)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_ImportModule("utilBMF.HTSUtils"); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_3, "cReadsOverlap", (void (**)(void))&__pyx_f_7utilBMF_8HTSUtils_cReadsOverlap, "int (__pyx_t_7utilBMF_8HTSUtils_AlignedSegment_t, __pyx_t_7utilBMF_8HTSUtils_AlignedSegment_t)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_ImportModule("utilBMF.PysamUtils"); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ImportFunction(__pyx_t_4, "CopyAlignedSegment", (void (**)(void))&__pyx_f_7utilBMF_10PysamUtils_CopyAlignedSegment, "__pyx_t_7utilBMF_10PysamUtils_AlignedSegment_t (__pyx_t_7utilBMF_10PysamUtils_AlignedSegment_t)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  /*--- Execution code ---*/

  /* "utilBMF/MergePairedAlignments.pyx":6
 * ## Standard Library module-level imports
 * from __future__ import division
 * import logging             # <<<<<<<<<<<<<<
 * import sys
 * import uuid
 */
  __pyx_t_5 = __Pyx_Import(__pyx_n_s_logging, 0, -1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":7
 * from __future__ import division
 * import logging
 * import sys             # <<<<<<<<<<<<<<
 * import uuid
 * 
 */
  __pyx_t_5 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":8
 * import logging
 * import sys
 * import uuid             # <<<<<<<<<<<<<<
 * 
 * ## Third party imports
 */
  __pyx_t_5 = __Pyx_Import(__pyx_n_s_uuid, 0, -1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_uuid, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":11
 * 
 * ## Third party imports
 * import pysam             # <<<<<<<<<<<<<<
 * import cython
 * import numpy as np
 */
  __pyx_t_5 = __Pyx_Import(__pyx_n_s_pysam, 0, -1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pysam, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":13
 * import pysam
 * import cython
 * import numpy as np             # <<<<<<<<<<<<<<
 * from pysam import AlignedSegment
 * 
 */
  __pyx_t_5 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":14
 * import cython
 * import numpy as np
 * from pysam import AlignedSegment             # <<<<<<<<<<<<<<
 * 
 * ## Standard Library local imports
 */
  __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_AlignedSegment);
  __Pyx_GIVEREF(__pyx_n_s_AlignedSegment);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_AlignedSegment);
  __pyx_t_6 = __Pyx_Import(__pyx_n_s_pysam, __pyx_t_5, -1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_AlignedSegment); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AlignedSegment, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":17
 * 
 * ## Standard Library local imports
 * from array import array             # <<<<<<<<<<<<<<
 * from itertools import izip, groupby
 * from operator import attrgetter as oag, methodcaller as mc, itemgetter as oig
 */
  __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_n_s_array);
  __Pyx_GIVEREF(__pyx_n_s_array);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_array);
  __pyx_t_5 = __Pyx_Import(__pyx_n_s_array, __pyx_t_6, -1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":18
 * ## Standard Library local imports
 * from array import array
 * from itertools import izip, groupby             # <<<<<<<<<<<<<<
 * from operator import attrgetter as oag, methodcaller as mc, itemgetter as oig
 * from subprocess import check_call
 */
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_izip);
  __Pyx_GIVEREF(__pyx_n_s_izip);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_izip);
  __Pyx_INCREF(__pyx_n_s_groupby);
  __Pyx_GIVEREF(__pyx_n_s_groupby);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_groupby);
  __pyx_t_6 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_5, -1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_izip); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_izip, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_groupby); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_groupby, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":19
 * from array import array
 * from itertools import izip, groupby
 * from operator import attrgetter as oag, methodcaller as mc, itemgetter as oig             # <<<<<<<<<<<<<<
 * from subprocess import check_call
 * from sys import maxint
 */
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_n_s_attrgetter);
  __Pyx_GIVEREF(__pyx_n_s_attrgetter);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_attrgetter);
  __Pyx_INCREF(__pyx_n_s_methodcaller);
  __Pyx_GIVEREF(__pyx_n_s_methodcaller);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_n_s_methodcaller);
  __Pyx_INCREF(__pyx_n_s_itemgetter);
  __Pyx_GIVEREF(__pyx_n_s_itemgetter);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_n_s_itemgetter);
  __pyx_t_5 = __Pyx_Import(__pyx_n_s_operator, __pyx_t_6, -1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_attrgetter); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_oag, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_methodcaller); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mc, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_itemgetter); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_oig, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":20
 * from itertools import izip, groupby
 * from operator import attrgetter as oag, methodcaller as mc, itemgetter as oig
 * from subprocess import check_call             # <<<<<<<<<<<<<<
 * from sys import maxint
 * try:
 */
  __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_check_call);
  __Pyx_GIVEREF(__pyx_n_s_check_call);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_check_call);
  __pyx_t_6 = __Pyx_Import(__pyx_n_s_subprocess, __pyx_t_5, -1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_check_call); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_check_call, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":21
 * from operator import attrgetter as oag, methodcaller as mc, itemgetter as oig
 * from subprocess import check_call
 * from sys import maxint             # <<<<<<<<<<<<<<
 * try:
 *     from re2 import split as rsplit
 */
  __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_n_s_maxint);
  __Pyx_GIVEREF(__pyx_n_s_maxint);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_maxint);
  __pyx_t_5 = __Pyx_Import(__pyx_n_s_sys, __pyx_t_6, -1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_maxint); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_maxint, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":22
 * from subprocess import check_call
 * from sys import maxint
 * try:             # <<<<<<<<<<<<<<
 *     from re2 import split as rsplit
 * except ImportError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_9);
    /*try:*/ {

      /* "utilBMF/MergePairedAlignments.pyx":23
 * from sys import maxint
 * try:
 *     from re2 import split as rsplit             # <<<<<<<<<<<<<<
 * except ImportError:
 *     from re import split as rsplit
 */
      __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_n_s_split);
      __Pyx_GIVEREF(__pyx_n_s_split);
      PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_split);
      __pyx_t_6 = __Pyx_Import(__pyx_n_s_re2, __pyx_t_5, -1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_split); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_rsplit, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    goto __pyx_L9_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "utilBMF/MergePairedAlignments.pyx":24
 * try:
 *     from re2 import split as rsplit
 * except ImportError:             # <<<<<<<<<<<<<<
 *     from re import split as rsplit
 * 
 */
    __pyx_t_10 = PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_10) {
      __Pyx_AddTraceback("utilBMF.MergePairedAlignments", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_11);

      /* "utilBMF/MergePairedAlignments.pyx":25
 *     from re2 import split as rsplit
 * except ImportError:
 *     from re import split as rsplit             # <<<<<<<<<<<<<<
 * 
 * ##BMFTools imports
 */
      __pyx_t_12 = PyList_New(1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_INCREF(__pyx_n_s_split);
      __Pyx_GIVEREF(__pyx_n_s_split);
      PyList_SET_ITEM(__pyx_t_12, 0, __pyx_n_s_split);
      __pyx_t_13 = __Pyx_Import(__pyx_n_s_re, __pyx_t_12, -1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = __Pyx_ImportFrom(__pyx_t_13, __pyx_n_s_split); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_12);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_rsplit, __pyx_t_12) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;
    __pyx_L4_except_error:;
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
    __pyx_L9_try_end:;
  }

  /* "utilBMF/MergePairedAlignments.pyx":28
 * 
 * ##BMFTools imports
 * from utilBMF.ErrorHandling import ThisIsMadness, ImproperArgumentError             # <<<<<<<<<<<<<<
 * from utilBMF.HTSUtils import printlog as pl, BamTag, TrimExt
 * 
 */
  __pyx_t_11 = PyList_New(2); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(__pyx_n_s_ThisIsMadness);
  __Pyx_GIVEREF(__pyx_n_s_ThisIsMadness);
  PyList_SET_ITEM(__pyx_t_11, 0, __pyx_n_s_ThisIsMadness);
  __Pyx_INCREF(__pyx_n_s_ImproperArgumentError);
  __Pyx_GIVEREF(__pyx_n_s_ImproperArgumentError);
  PyList_SET_ITEM(__pyx_t_11, 1, __pyx_n_s_ImproperArgumentError);
  __pyx_t_5 = __Pyx_Import(__pyx_n_s_utilBMF_ErrorHandling, __pyx_t_11, -1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_ThisIsMadness); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ThisIsMadness, __pyx_t_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_ImproperArgumentError); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ImproperArgumentError, __pyx_t_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":29
 * ##BMFTools imports
 * from utilBMF.ErrorHandling import ThisIsMadness, ImproperArgumentError
 * from utilBMF.HTSUtils import printlog as pl, BamTag, TrimExt             # <<<<<<<<<<<<<<
 * 
 * ##DEFINES
 */
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_printlog);
  __Pyx_GIVEREF(__pyx_n_s_printlog);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_printlog);
  __Pyx_INCREF(__pyx_n_s_BamTag);
  __Pyx_GIVEREF(__pyx_n_s_BamTag);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_BamTag);
  __Pyx_INCREF(__pyx_n_s_TrimExt);
  __Pyx_GIVEREF(__pyx_n_s_TrimExt);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_n_s_TrimExt);
  __pyx_t_11 = __Pyx_Import(__pyx_n_s_utilBMF_HTSUtils, __pyx_t_5, -1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_11, __pyx_n_s_printlog); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pl, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_11, __pyx_n_s_TrimExt); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TrimExt, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":33
 * ##DEFINES
 * 
 * oagsk = oag("firstMapped")             # <<<<<<<<<<<<<<
 * oagbase = oag("base")
 * oagop = oag("operation")
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_oag); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_oagsk, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":34
 * 
 * oagsk = oag("firstMapped")
 * oagbase = oag("base")             # <<<<<<<<<<<<<<
 * oagop = oag("operation")
 * oagqual = oag("quality")
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_oag); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_oagbase, __pyx_t_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":35
 * oagsk = oag("firstMapped")
 * oagbase = oag("base")
 * oagop = oag("operation")             # <<<<<<<<<<<<<<
 * oagqual = oag("quality")
 * oagag = oag("agreement")
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_oag); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_oagop, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":36
 * oagbase = oag("base")
 * oagop = oag("operation")
 * oagqual = oag("quality")             # <<<<<<<<<<<<<<
 * oagag = oag("agreement")
 * oagtag = oag("tag")
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_oag); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_oagqual, __pyx_t_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":37
 * oagop = oag("operation")
 * oagqual = oag("quality")
 * oagag = oag("agreement")             # <<<<<<<<<<<<<<
 * oagtag = oag("tag")
 * oig0 = oig(0)
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_oag); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_oagag, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":38
 * oagqual = oag("quality")
 * oagag = oag("agreement")
 * oagtag = oag("tag")             # <<<<<<<<<<<<<<
 * oig0 = oig(0)
 * oig1 = oig(1)
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_oag); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_XGOTREF(__pyx_v_7utilBMF_21MergePairedAlignments_oagtag);
  __Pyx_DECREF_SET(__pyx_v_7utilBMF_21MergePairedAlignments_oagtag, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  __pyx_t_11 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":39
 * oagag = oag("agreement")
 * oagtag = oag("tag")
 * oig0 = oig(0)             # <<<<<<<<<<<<<<
 * oig1 = oig(1)
 * 
 */
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_oig); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_XGOTREF(__pyx_v_7utilBMF_21MergePairedAlignments_oig0);
  __Pyx_DECREF_SET(__pyx_v_7utilBMF_21MergePairedAlignments_oig0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":40
 * oagtag = oag("tag")
 * oig0 = oig(0)
 * oig1 = oig(1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_oig); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_XGOTREF(__pyx_v_7utilBMF_21MergePairedAlignments_oig1);
  __Pyx_DECREF_SET(__pyx_v_7utilBMF_21MergePairedAlignments_oig1, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  __pyx_t_11 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":51
 * # Maps CigarOp numbers to ASCII characters
 * # and the reverse
 * CigarDict = {0: 77, 1: 73, 2: 68, 3: 83, 4: 78, 5: 72,             # <<<<<<<<<<<<<<
 *              6: 80, 7: 61, 8: 88,
 *              77: 0, 73: 1, 68:2, 83: 3, 78: 4, 72: 5,
 */
  __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  if (PyDict_SetItem(__pyx_t_11, __pyx_int_0, __pyx_int_77) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_11, __pyx_int_1, __pyx_int_73) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_11, __pyx_int_2, __pyx_int_68) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_11, __pyx_int_3, __pyx_int_83) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_11, __pyx_int_4, __pyx_int_78) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_11, __pyx_int_5, __pyx_int_72) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_11, __pyx_int_6, __pyx_int_80) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_11, __pyx_int_7, __pyx_int_61) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_11, __pyx_int_8, __pyx_int_88) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_11, __pyx_int_77, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_11, __pyx_int_73, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_11, __pyx_int_68, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_11, __pyx_int_83, __pyx_int_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_11, __pyx_int_78, __pyx_int_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_11, __pyx_int_72, __pyx_int_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_11, __pyx_int_80, __pyx_int_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_11, __pyx_int_61, __pyx_int_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_11, __pyx_int_88, __pyx_int_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XGOTREF(__pyx_v_7utilBMF_21MergePairedAlignments_CigarDict);
  __Pyx_DECREF_SET(__pyx_v_7utilBMF_21MergePairedAlignments_CigarDict, ((PyObject*)__pyx_t_11));
  __Pyx_GIVEREF(__pyx_t_11);
  __pyx_t_11 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":66
 * 
 * @cython.returns(bint)
 * def lambda1None(tuple i):             # <<<<<<<<<<<<<<
 *     """
 *     If a tuple in a cigar returns true for this function,
 */
  __pyx_t_11 = PyCFunction_NewEx(&__pyx_mdef_7utilBMF_21MergePairedAlignments_1lambda1None, NULL, __pyx_n_s_utilBMF_MergePairedAlignments); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lambda1None, __pyx_t_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":76
 * 
 * @cython.returns(int)
 * def getFirstMappedRefPos(AlignedSegment_t rec):             # <<<<<<<<<<<<<<
 *     cdef tuple i
 *     return [i for i in rec.aligned_pairs if i[1] is not None][0][1]
 */
  __pyx_t_11 = PyCFunction_NewEx(&__pyx_mdef_7utilBMF_21MergePairedAlignments_3getFirstMappedRefPos, NULL, __pyx_n_s_utilBMF_MergePairedAlignments); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getFirstMappedRefPos, __pyx_t_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":578
 * 
 * 
 * def MergePairedAlignments(cystr inBAM, cystr outBAM=None,             # <<<<<<<<<<<<<<
 *                           int readLength=-1,
 *                           cystr outMerge=None):
 */
  __pyx_t_11 = PyCFunction_NewEx(&__pyx_mdef_7utilBMF_21MergePairedAlignments_5MergePairedAlignments, NULL, __pyx_n_s_utilBMF_MergePairedAlignments); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MergePairedAlignments, __pyx_t_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":702
 * 
 * 
 * def testLayout(cystr inBAM, cystr outBAM=None):             # <<<<<<<<<<<<<<
 *     cdef AlignedSegment_t read
 *     cdef Layout_t layout
 */
  __pyx_t_11 = PyCFunction_NewEx(&__pyx_mdef_7utilBMF_21MergePairedAlignments_9testLayout, NULL, __pyx_n_s_utilBMF_MergePairedAlignments); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_testLayout, __pyx_t_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "utilBMF/MergePairedAlignments.pyx":1
 * # cython: c_string_type=str, c_string_encoding=ascii             # <<<<<<<<<<<<<<
 * # cython: boundscheck=False, wraparound=False
 * # distutils: sources="include/MPA.c"
 */
  __pyx_t_11 = PyDict_New(); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py_ArrayLayoutPos")
 * cdef ArrayLayoutPos __pyx_convert__from_py_ArrayLayoutPos(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef ArrayLayoutPos result
 *     if not PyMapping_Check(obj):
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init utilBMF.MergePairedAlignments", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init utilBMF.MergePairedAlignments");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#endif
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

#if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *function = PyMethod_GET_FUNCTION(method);
            result = __Pyx_PyObject_CallOneArg(function, self);
            Py_DECREF(method);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                             int is_tuple, int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    if (!is_tuple && unlikely(!PyTuple_Check(tuple))) {
        iternextfunc iternext;
        iter = PyObject_GetIter(tuple);
        if (unlikely(!iter)) goto bad;
        if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
        iternext = Py_TYPE(iter)->tp_iternext;
        value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
        value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
        if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
        Py_DECREF(iter);
    } else {
        if (!has_known_size && unlikely(PyTuple_GET_SIZE(tuple) != 2)) {
            __Pyx_UnpackTupleError(tuple, 2);
            goto bad;
        }
#if CYTHON_COMPILING_IN_PYPY
        value1 = PySequence_ITEM(tuple, 0);
        if (unlikely(!value1)) goto bad;
        value2 = PySequence_ITEM(tuple, 1);
        if (unlikely(!value2)) goto bad;
#else
        value1 = PyTuple_GET_ITEM(tuple, 0);
        value2 = PyTuple_GET_ITEM(tuple, 1);
        Py_INCREF(value1);
        Py_INCREF(value2);
#endif
        if (decref_tuple) { Py_DECREF(tuple); }
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
#if !CYTHON_COMPILING_IN_PYPY
    if (is_dict) {
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#endif
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (PyErr_ExceptionMatches(PyExc_OverflowError))
                    PyErr_Clear();
                else
                    goto bad;
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) return __pyx_pw_7cpython_5array_5array_1__getbuffer__(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) return __pyx_pw_7cpython_5array_5array_1__getbuffer__(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) return __pyx_pw_7cpython_5array_5array_1__getbuffer__(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) return __pyx_pw_7cpython_5array_5array_1__getbuffer__(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) return __pyx_pw_7cpython_5array_5array_1__getbuffer__(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
        if (PyObject_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) { __pyx_pw_7cpython_5array_5array_3__releasebuffer__(obj, view); return; }
        if (PyObject_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) { __pyx_pw_7cpython_5array_5array_3__releasebuffer__(obj, view); return; }
        if (PyObject_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) { __pyx_pw_7cpython_5array_5array_3__releasebuffer__(obj, view); return; }
        if (PyObject_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) { __pyx_pw_7cpython_5array_5array_3__releasebuffer__(obj, view); return; }
        if (PyObject_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) { __pyx_pw_7cpython_5array_5array_3__releasebuffer__(obj, view); return; }
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif


          static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE uint16_t __Pyx_PyInt_As_uint16_t(PyObject *x) {
    const uint16_t neg_one = (uint16_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint16_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint16_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint16_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint16_t, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint16_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint16_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(uint16_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(uint16_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(uint16_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint16_t,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(uint16_t, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(uint16_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(uint16_t, long, PyLong_AsLong(x))
            } else if (sizeof(uint16_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(uint16_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint16_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint16_t) -1;
        }
    } else {
        uint16_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (uint16_t) -1;
        val = __Pyx_PyInt_As_uint16_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint16_t");
    return (uint16_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint16_t");
    return (uint16_t) -1;
}

static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(char, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(char, long, PyLong_AsLong(x))
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(char, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_As_unsigned_char(PyObject *x) {
    const unsigned char neg_one = (unsigned char) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned char, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(unsigned char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(unsigned char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned char,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(unsigned char, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(unsigned char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(unsigned char, long, PyLong_AsLong(x))
            } else if (sizeof(unsigned char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(unsigned char, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned char val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned char) -1;
        }
    } else {
        unsigned char val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned char) -1;
        val = __Pyx_PyInt_As_unsigned_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned char");
    return (unsigned char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned char");
    return (unsigned char) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint16_t(uint16_t value) {
    const uint16_t neg_one = (uint16_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint16_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint16_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(uint16_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(uint16_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint16_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint16_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value) {
    const char neg_one = (char) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(char),
                                     little, !is_unsigned);
    }
}

static PyObject* __pyx_convert__to_py_ArrayLayoutPos(struct ArrayLayoutPos s) {
            PyObject* res;
            PyObject* member;
            res = PyDict_New(); if (res == NULL) return NULL;
            member = __Pyx_PyInt_From_int(s.pos); if (member == NULL) goto bad;
            if (PyDict_SetItem(res, __pyx_n_s_pos, member) < 0) goto bad;
            Py_DECREF(member);
            member = __Pyx_PyInt_From_uint16_t(s.readPos); if (member == NULL) goto bad;
            if (PyDict_SetItem(res, __pyx_n_s_readPos, member) < 0) goto bad;
            Py_DECREF(member);
            member = __Pyx_PyInt_From_int(s.quality); if (member == NULL) goto bad;
            if (PyDict_SetItem(res, __pyx_n_s_quality, member) < 0) goto bad;
            Py_DECREF(member);
            member = __Pyx_PyInt_From_uint16_t(s.agreement); if (member == NULL) goto bad;
            if (PyDict_SetItem(res, __pyx_n_s_agreement, member) < 0) goto bad;
            Py_DECREF(member);
            member = __Pyx_PyInt_From_char(s.operation); if (member == NULL) goto bad;
            if (PyDict_SetItem(res, __pyx_n_s_operation, member) < 0) goto bad;
            Py_DECREF(member);
            member = __Pyx_PyInt_From_char(s.base); if (member == NULL) goto bad;
            if (PyDict_SetItem(res, __pyx_n_s_base, member) < 0) goto bad;
            Py_DECREF(member);
            member = __Pyx_PyInt_From_char(s.mergeAgreed); if (member == NULL) goto bad;
            if (PyDict_SetItem(res, __pyx_n_s_mergeAgreed, member) < 0) goto bad;
            Py_DECREF(member);
            return res;
            bad:
            Py_XDECREF(member);
            Py_DECREF(res);
            return NULL;
          }
          static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_char(unsigned char value) {
    const unsigned char neg_one = (unsigned char) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(unsigned char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned char),
                                     little, !is_unsigned);
    }
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_ExportVoidPtr(PyObject *name, void *p, const char *sig) {
    PyObject *d;
    PyObject *cobj = 0;
    d = PyDict_GetItem(__pyx_d, __pyx_n_s_pyx_capi);
    Py_XINCREF(d);
    if (!d) {
        d = PyDict_New();
        if (!d)
            goto bad;
        if (__Pyx_PyObject_SetAttrStr(__pyx_m, __pyx_n_s_pyx_capi, d) < 0)
            goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItem(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

#ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
